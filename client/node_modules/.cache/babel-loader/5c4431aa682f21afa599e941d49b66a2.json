{"ast":null,"code":"var _jsxFileName = \"/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/src/components/DrawHelper.js\";\nimport React, { Component } from 'react';\nimport './DrawHelper.css';\nimport { drawStates } from '../helpers/constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class DrawHelper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      makeAnnouncement: false,\n      announcement: \"\",\n      announcementId: 0\n    };\n    this.announcementTime = 1000;\n  }\n\n  componentDidMount() {}\n\n  componentDidUpdate(prevProps) {\n    if (this.props.announcement !== prevProps.announcement) {\n      this.setState(prevState => ({\n        makeAnnouncement: true,\n        announcement: this.props.announcement,\n        announcementId: prevState.announcementId + 1\n      }));\n    }\n  }\n\n  setNoAnnouncement(announcementId) {\n    this.setState(prevState => ({\n      makeAnnouncement: announcementId !== prevState.announcementId\n    }));\n  }\n\n  render() {\n    var text = '';\n\n    if (this.props.drawState === drawStates.choosingState) {\n      text = \"swipe left or right with fingers extended to switch word\";\n    } else if (this.props.drawState === drawStates.drawingState) {\n      text = \"say 'undo' or 'clear' to erase. hover over and grab colors or thickness levels\";\n    }\n\n    if (this.state.makeAnnouncement) {\n      text = this.state.announcement;\n      setTimeout(() => this.setNoAnnouncement(this.state.announcementId), this.announcementTime);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"DrawHelper-container\",\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/src/components/DrawHelper.js"],"names":["React","Component","drawStates","DrawHelper","constructor","props","state","makeAnnouncement","announcement","announcementId","announcementTime","componentDidMount","componentDidUpdate","prevProps","setState","prevState","setNoAnnouncement","render","text","drawState","choosingState","drawingState","setTimeout"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,kBAAP;AAEA,SAASC,UAAT,QAA2B,sBAA3B;;AAEA,eAAe,MAAMC,UAAN,SAAyBH,KAAK,CAACC,SAA/B,CAAyC;AACpDG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,gBAAgB,EAAE,KADT;AAETC,MAAAA,YAAY,EAAE,EAFL;AAGTC,MAAAA,cAAc,EAAE;AAHP,KAAb;AAKA,SAAKC,gBAAL,GAAwB,IAAxB;AACH;;AACDC,EAAAA,iBAAiB,GAAG,CAEnB;;AACDC,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC1B,QAAI,KAAKR,KAAL,CAAWG,YAAX,KAA4BK,SAAS,CAACL,YAA1C,EAAwD;AACpD,WAAKM,QAAL,CAAcC,SAAS,KAAK;AACxBR,QAAAA,gBAAgB,EAAE,IADM;AAExBC,QAAAA,YAAY,EAAE,KAAKH,KAAL,CAAWG,YAFD;AAGxBC,QAAAA,cAAc,EAAEM,SAAS,CAACN,cAAV,GAA2B;AAHnB,OAAL,CAAvB;AAKH;AACJ;;AACDO,EAAAA,iBAAiB,CAACP,cAAD,EAAiB;AAC9B,SAAKK,QAAL,CAAcC,SAAS,KAAK;AACxBR,MAAAA,gBAAgB,EAAEE,cAAc,KAAKM,SAAS,CAACN;AADvB,KAAL,CAAvB;AAGH;;AACDQ,EAAAA,MAAM,GAAG;AACL,QAAIC,IAAI,GAAG,EAAX;;AACA,QAAI,KAAKb,KAAL,CAAWc,SAAX,KAAyBjB,UAAU,CAACkB,aAAxC,EAAuD;AACnDF,MAAAA,IAAI,GAAG,0DAAP;AACH,KAFD,MAEO,IAAI,KAAKb,KAAL,CAAWc,SAAX,KAAyBjB,UAAU,CAACmB,YAAxC,EAAsD;AACzDH,MAAAA,IAAI,GAAG,gFAAP;AACH;;AACD,QAAI,KAAKZ,KAAL,CAAWC,gBAAf,EAAiC;AAC7BW,MAAAA,IAAI,GAAG,KAAKZ,KAAL,CAAWE,YAAlB;AACAc,MAAAA,UAAU,CAAC,MAAM,KAAKN,iBAAL,CAAuB,KAAKV,KAAL,CAAWG,cAAlC,CAAP,EAA0D,KAAKC,gBAA/D,CAAV;AACH;;AACD,wBACI;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA,gBACKQ;AADL;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AA3CmD","sourcesContent":["import React, { Component } from 'react';\nimport './DrawHelper.css';\n\nimport { drawStates } from '../helpers/constants';\n\nexport default class DrawHelper extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            makeAnnouncement: false,\n            announcement: \"\",\n            announcementId: 0,\n        };\n        this.announcementTime = 1000;\n    }\n    componentDidMount() {\n\n    }\n    componentDidUpdate(prevProps) {\n        if (this.props.announcement !== prevProps.announcement) {\n            this.setState(prevState => ({\n                makeAnnouncement: true,\n                announcement: this.props.announcement,\n                announcementId: prevState.announcementId + 1,\n            }));\n        }\n    }\n    setNoAnnouncement(announcementId) {\n        this.setState(prevState => ({\n            makeAnnouncement: announcementId !== prevState.announcementId,\n        }));\n    }\n    render() {\n        var text = '';\n        if (this.props.drawState === drawStates.choosingState) {\n            text = \"swipe left or right with fingers extended to switch word\";\n        } else if (this.props.drawState === drawStates.drawingState) {\n            text = \"say 'undo' or 'clear' to erase. hover over and grab colors or thickness levels\";\n        }\n        if (this.state.makeAnnouncement) {\n            text = this.state.announcement;\n            setTimeout(() => this.setNoAnnouncement(this.state.announcementId), this.announcementTime);\n        }\n        return (\n            <div className='DrawHelper-container'>\n                {text}\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}