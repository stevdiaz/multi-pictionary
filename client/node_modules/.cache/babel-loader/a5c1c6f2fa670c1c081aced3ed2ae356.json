{"ast":null,"code":"//CoffeeScript generated from main/bone-hand/leap.bone-hand.coffee\n(function () {\n  var HandMesh, THREE, armTopAndBottomRotation, baseBoneRotation, boneColor, boneHandLost, boneRadius, boneScale, initScene, jointColor, jointRadius, jointScale, material, onHand, scope;\n  scope = null;\n  THREE = typeof require !== 'undefined' ? require('three') : window.THREE;\n\n  initScene = function (targetEl, scale) {\n    var camera, far, height, near, renderer, width;\n    scope.scene = new THREE.Scene();\n    scope.rendererOps || (scope.rendererOps = {});\n\n    if (scope.rendererOps.alpha === void 0) {\n      scope.rendererOps.alpha = true;\n    }\n\n    scope.renderer = renderer = new THREE.WebGLRenderer(scope.rendererOps);\n    width = scope.width || window.innerWidth;\n    height = scope.height || window.innerHeight;\n    renderer.setClearColor(0x000000, 0);\n    renderer.setSize(width, height);\n    renderer.domElement.className = \"leap-boneHand\";\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    targetEl.appendChild(renderer.domElement);\n    near = 1;\n    far = 10000;\n\n    if (scale) {\n      near *= scale;\n      far *= scale;\n    }\n\n    scope.camera = camera = new THREE.PerspectiveCamera(45, width / height, near, far);\n    camera.position.set(0, 300, 500);\n    camera.lookAt(new THREE.Vector3(0, 160, 0));\n    scope.scene.add(camera);\n\n    if (!scope.width && !scope.height) {\n      window.addEventListener('resize', function () {\n        width = window.innerWidth;\n        height = window.innerHeight;\n        camera.aspect = width / height;\n        camera.updateProjectionMatrix();\n        renderer.setSize(width, height);\n        return renderer.render(scope.scene, camera);\n      }, false);\n    }\n\n    scope.render || (scope.render = function (timestamp) {\n      return renderer.render(scope.scene, scope.camera);\n    });\n    return scope.render();\n  };\n\n  baseBoneRotation = null;\n  jointColor = null;\n  boneColor = null;\n  boneScale = null;\n  jointScale = null;\n  boneRadius = null;\n  jointRadius = null;\n  material = null;\n  armTopAndBottomRotation = null;\n\n  HandMesh = function () {\n    HandMesh.unusedHandMeshes = [];\n\n    HandMesh.get = function () {\n      var handMesh;\n\n      if (HandMesh.unusedHandMeshes.length === 0) {\n        handMesh = HandMesh.create();\n      }\n\n      handMesh = HandMesh.unusedHandMeshes.pop();\n      handMesh.show();\n      return handMesh;\n    };\n\n    HandMesh.prototype.replace = function () {\n      this.hide();\n      return HandMesh.unusedHandMeshes.push(this);\n    };\n\n    HandMesh.create = function () {\n      var mesh;\n      mesh = new HandMesh();\n      mesh.setVisibility(false);\n      HandMesh.unusedHandMeshes.push(mesh);\n\n      if (HandMesh.onMeshCreated) {\n        HandMesh.onMeshCreated(mesh);\n      }\n\n      return mesh;\n    };\n\n    function HandMesh() {\n      var boneCount, finger, i, j, mesh, _i, _j, _k, _l;\n\n      material = !isNaN(scope.opacity) ? new THREE.MeshPhongMaterial({\n        fog: false,\n        transparent: true,\n        opacity: scope.opacity\n      }) : new THREE.MeshPhongMaterial({\n        fog: false\n      });\n      boneRadius = 40 * boneScale;\n      jointRadius = 40 * jointScale;\n      this.fingerMeshes = [];\n\n      for (i = _i = 0; _i < 5; i = ++_i) {\n        finger = [];\n        boneCount = i === 0 ? 3 : 4;\n\n        for (j = _j = 0; 0 <= boneCount ? _j < boneCount : _j > boneCount; j = 0 <= boneCount ? ++_j : --_j) {\n          mesh = new THREE.Mesh(new THREE.SphereGeometry(jointRadius, 32, 32), material.clone());\n          mesh.name = \"hand-bone-\" + j;\n          mesh.material.color.copy(jointColor);\n          mesh.renderOrder = (i * 9 + 2 * j) / 36;\n          mesh.castShadow = true;\n          scope.scene.add(mesh);\n          finger.push(mesh);\n          mesh = new THREE.Mesh(new THREE.CylinderGeometry(boneRadius, boneRadius, 40, 32), material.clone());\n          mesh.name = \"hand-joint-\" + j;\n          mesh.material.color.copy(boneColor);\n          mesh.renderOrder = (i * 9 + 2 * j + 1) / 36;\n          mesh.castShadow = true;\n          scope.scene.add(mesh);\n          finger.push(mesh);\n        }\n\n        mesh = new THREE.Mesh(new THREE.SphereGeometry(jointRadius, 32, 32), material.clone());\n        mesh.material.color.copy(jointColor);\n        mesh.castShadow = true;\n        scope.scene.add(mesh);\n        finger.push(mesh);\n        this.fingerMeshes.push(finger);\n      }\n\n      if (scope.arm) {\n        this.armMesh = new THREE.Object3D();\n        this.armBones = [];\n        this.armSpheres = [];\n\n        for (i = _k = 0; _k <= 3; i = ++_k) {\n          this.armBones.push(new THREE.Mesh(new THREE.CylinderGeometry(boneRadius, boneRadius, i < 2 ? 1000 : 100, 32), material.clone()));\n          this.armBones[i].material.color.copy(boneColor);\n          this.armBones[i].castShadow = true;\n          this.armBones[i].name = \"ArmBone\" + i;\n\n          if (i > 1) {\n            this.armBones[i].quaternion.multiply(armTopAndBottomRotation);\n          }\n\n          this.armMesh.add(this.armBones[i]);\n        }\n\n        this.armSpheres = [];\n\n        for (i = _l = 0; _l <= 3; i = ++_l) {\n          this.armSpheres.push(new THREE.Mesh(new THREE.SphereGeometry(jointRadius, 32, 32), material.clone()));\n          this.armSpheres[i].material.color.copy(jointColor);\n          this.armSpheres[i].castShadow = true;\n          this.armSpheres[i].name = \"ArmSphere\" + i;\n          this.armMesh.add(this.armSpheres[i]);\n        }\n\n        scope.scene.add(this.armMesh);\n      }\n    }\n\n    HandMesh.prototype.traverse = function (callback) {\n      var i, mesh, _i, _j, _len, _ref;\n\n      for (i = _i = 0; _i < 5; i = ++_i) {\n        _ref = this.fingerMeshes[i];\n\n        for (_j = 0, _len = _ref.length; _j < _len; _j++) {\n          mesh = _ref[_j];\n          callback(mesh);\n        }\n      }\n\n      return this.armMesh && this.armMesh.traverse(callback);\n    };\n\n    HandMesh.prototype.scaleTo = function (hand) {\n      var armLenScale, armWidthScale, baseScale, bone, boneXOffset, finger, fingerBoneLengthScale, halfArmLength, i, j, mesh, _i, _j;\n\n      baseScale = hand.middleFinger.proximal.length / this.fingerMeshes[2][1].geometry.parameters.height;\n\n      for (i = _i = 0; _i < 5; i = ++_i) {\n        finger = hand.fingers[i];\n        j = 0;\n\n        while (true) {\n          if (j === this.fingerMeshes[i].length - 1) {\n            mesh = this.fingerMeshes[i][j];\n            mesh.scale.set(baseScale, baseScale, baseScale);\n            break;\n          }\n\n          bone = finger.bones[3 - j / 2];\n          mesh = this.fingerMeshes[i][j];\n          mesh.scale.set(baseScale, baseScale, baseScale);\n          j++;\n          mesh = this.fingerMeshes[i][j];\n          fingerBoneLengthScale = bone.length / mesh.geometry.parameters.height;\n          mesh.scale.set(baseScale, fingerBoneLengthScale, baseScale);\n          j++;\n        }\n      }\n\n      if (scope.arm) {\n        armLenScale = hand.arm.length / (this.armBones[0].geometry.parameters.height + this.armBones[0].geometry.parameters.radiusTop);\n        armWidthScale = hand.arm.width / (this.armBones[2].geometry.parameters.height + this.armBones[2].geometry.parameters.radiusTop);\n\n        for (i = _j = 0; _j <= 3; i = ++_j) {\n          this.armBones[i].scale.set(baseScale, i < 2 ? armLenScale : armWidthScale, baseScale);\n          this.armSpheres[i].scale.set(baseScale, baseScale, baseScale);\n        }\n\n        boneXOffset = hand.arm.width / 2 * 0.85;\n        halfArmLength = hand.arm.length / 2;\n        this.armBones[0].position.setX(boneXOffset);\n        this.armBones[1].position.setX(-boneXOffset);\n        this.armBones[2].position.setY(halfArmLength);\n        this.armBones[3].position.setY(-halfArmLength);\n        this.armSpheres[0].position.set(-boneXOffset, halfArmLength, 0);\n        this.armSpheres[1].position.set(boneXOffset, halfArmLength, 0);\n        this.armSpheres[2].position.set(boneXOffset, -halfArmLength, 0);\n        this.armSpheres[3].position.set(-boneXOffset, -halfArmLength, 0);\n      }\n\n      return this;\n    };\n\n    HandMesh.prototype.formTo = function (hand) {\n      var bone, finger, i, j, mesh, _i;\n\n      for (i = _i = 0; _i < 5; i = ++_i) {\n        finger = hand.fingers[i];\n        j = 0;\n\n        while (true) {\n          if (j === this.fingerMeshes[i].length - 1) {\n            mesh = this.fingerMeshes[i][j];\n            mesh.position.fromArray(bone.prevJoint);\n            break;\n          }\n\n          bone = finger.bones[3 - j / 2];\n          mesh = this.fingerMeshes[i][j];\n          mesh.position.fromArray(bone.nextJoint);\n          ++j;\n          mesh = this.fingerMeshes[i][j];\n          mesh.position.fromArray(bone.center());\n          mesh.setRotationFromMatrix(new THREE.Matrix4().fromArray(bone.matrix()));\n          mesh.quaternion.multiply(baseBoneRotation);\n          ++j;\n        }\n      }\n\n      if (this.armMesh) {\n        this.armMesh.position.fromArray(hand.arm.center());\n        this.armMesh.setRotationFromMatrix(new THREE.Matrix4().fromArray(hand.arm.matrix()));\n        this.armMesh.quaternion.multiply(baseBoneRotation);\n      }\n\n      return this;\n    };\n\n    HandMesh.prototype.setVisibility = function (visible) {\n      var i, j, _i, _j, _results;\n\n      for (i = _i = 0; _i < 5; i = ++_i) {\n        j = 0;\n\n        while (true) {\n          this.fingerMeshes[i][j].visible = visible;\n          ++j;\n\n          if (j === this.fingerMeshes[i].length) {\n            break;\n          }\n        }\n      }\n\n      if (scope.arm) {\n        _results = [];\n\n        for (i = _j = 0; _j <= 3; i = ++_j) {\n          this.armBones[i].visible = visible;\n\n          _results.push(this.armSpheres[i].visible = visible);\n        }\n\n        return _results;\n      }\n    };\n\n    HandMesh.prototype.show = function () {\n      return this.setVisibility(true);\n    };\n\n    HandMesh.prototype.hide = function () {\n      return this.setVisibility(false);\n    };\n\n    return HandMesh;\n  }();\n\n  onHand = function (hand) {\n    var handMesh;\n\n    if (!scope.scene) {\n      return;\n    }\n\n    handMesh = hand.data('handMesh');\n\n    if (!handMesh) {\n      handMesh = HandMesh.get().scaleTo(hand);\n      hand.data('handMesh', handMesh);\n\n      if (HandMesh.onMeshUsed) {\n        HandMesh.onMeshUsed(handMesh);\n      }\n    }\n\n    return handMesh.formTo(hand);\n  };\n\n  boneHandLost = function (hand) {\n    var handMesh;\n    handMesh = hand.data('handMesh');\n\n    if (handMesh) {\n      handMesh.replace();\n    }\n\n    return handMesh = hand.data('handMesh', null);\n  };\n\n  Leap.plugin('boneHand', function (options) {\n    var controller, scale;\n\n    if (options == null) {\n      options = {};\n    }\n\n    scope = options;\n    controller = this;\n    jointColor = new THREE.Color().setHex(0x5daa00);\n    boneColor = new THREE.Color().setHex(0xffffff);\n    scope.boneScale && (boneScale = scope.boneScale);\n    scope.jointScale && (jointScale = scope.jointScale);\n    scope.boneColor && (boneColor = scope.boneColor);\n    scope.jointColor && (jointColor = scope.jointColor);\n    scope.HandMesh = HandMesh;\n\n    scope.addShadowCamera = function () {\n      scope.light = new THREE.SpotLight(0xffffff, 1);\n      scope.light.castShadow = true;\n      scope.light.shadow.mapSize.width = 1024;\n      scope.light.shadow.mapSize.height = 1024;\n      scope.light.shadow.camera.near = 0.5 / 0.001;\n      scope.light.shadow.camera.far = 3 / 0.001;\n      scope.light.position.set(0, 1000, 1000);\n      scope.light.target.position.set(0, 0, -1000);\n      scope.camera.add(scope.light.target);\n      scope.camera.add(scope.light);\n\n      if (controller.plugins.transform) {\n        if (controller.plugins.transform.getScale()) {\n          scope.light.shadowCameraNear *= controller.plugins.transform.scale.x;\n          scope.light.shadowCameraFar *= controller.plugins.transform.scale.x;\n          scope.light.target.position.multiply(controller.plugins.transform.scale);\n          scope.light.position.multiply(controller.plugins.transform.scale);\n        }\n\n        if (controller.plugins.transform.vr === true) {\n          scope.camera.position.set(0, 0, 0);\n        }\n\n        if (controller.plugins.transform.vr === 'desktop') {\n          return scope.camera.position.set(0, 0.15, 0.3);\n        }\n      }\n    };\n\n    baseBoneRotation = new THREE.Quaternion().setFromEuler(new THREE.Euler(Math.PI / 2, 0, 0));\n    boneScale = 1 / 6;\n    jointScale = 1 / 5;\n    boneRadius = null;\n    jointRadius = null;\n    material = null;\n    armTopAndBottomRotation = new THREE.Quaternion().setFromEuler(new THREE.Euler(0, 0, Math.PI / 2));\n\n    HandMesh.onMeshCreated = function (mesh) {\n      return controller.emit('handMeshCreated', mesh);\n    };\n\n    HandMesh.onMeshUsed = function (mesh) {\n      return controller.emit('handMeshUsed', mesh);\n    };\n\n    this.use('handEntry');\n    this.use('handHold');\n\n    if (scope.scene === void 0) {\n      console.assert(scope.targetEl);\n\n      if (this.plugins.transform && this.plugins.transform.getScale()) {\n        scale = this.plugins.transform.scale.x;\n      }\n\n      initScene(scope.targetEl, scale);\n      scope.addShadowCamera();\n    }\n\n    if (scope.scene) {\n      HandMesh.create();\n      HandMesh.create();\n\n      if (Leap.version.major === 0 && Leap.version.minor < 7 && Leap.version.dot < 4) {\n        console.warn(\"BoneHand default scene render requires LeapJS > 0.6.3. You're running have \" + Leap.version.full);\n      }\n\n      this.on('frameEnd', function (timestamp) {\n        if (scope.render) {\n          return scope.render(timestamp);\n        }\n      });\n    }\n\n    this.on('handLost', boneHandLost);\n    return {\n      hand: onHand\n    };\n  });\n}).call(this);","map":{"version":3,"sources":["/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/node_modules/leapjs-plugins/main/bone-hand/leap.bone-hand.js"],"names":["HandMesh","THREE","armTopAndBottomRotation","baseBoneRotation","boneColor","boneHandLost","boneRadius","boneScale","initScene","jointColor","jointRadius","jointScale","material","onHand","scope","require","window","targetEl","scale","camera","far","height","near","renderer","width","scene","Scene","rendererOps","alpha","WebGLRenderer","innerWidth","innerHeight","setClearColor","setSize","domElement","className","shadowMap","enabled","type","PCFSoftShadowMap","appendChild","PerspectiveCamera","position","set","lookAt","Vector3","add","addEventListener","aspect","updateProjectionMatrix","render","timestamp","unusedHandMeshes","get","handMesh","length","create","pop","show","prototype","replace","hide","push","mesh","setVisibility","onMeshCreated","boneCount","finger","i","j","_i","_j","_k","_l","isNaN","opacity","MeshPhongMaterial","fog","transparent","fingerMeshes","Mesh","SphereGeometry","clone","name","color","copy","renderOrder","castShadow","CylinderGeometry","arm","armMesh","Object3D","armBones","armSpheres","quaternion","multiply","traverse","callback","_len","_ref","scaleTo","hand","armLenScale","armWidthScale","baseScale","bone","boneXOffset","fingerBoneLengthScale","halfArmLength","middleFinger","proximal","geometry","parameters","fingers","bones","radiusTop","setX","setY","formTo","fromArray","prevJoint","nextJoint","center","setRotationFromMatrix","Matrix4","matrix","visible","_results","data","onMeshUsed","Leap","plugin","options","controller","Color","setHex","addShadowCamera","light","SpotLight","shadow","mapSize","target","plugins","transform","getScale","shadowCameraNear","x","shadowCameraFar","vr","Quaternion","setFromEuler","Euler","Math","PI","emit","use","console","assert","version","major","minor","dot","warn","full","on","call"],"mappings":"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","sourcesContent":["//CoffeeScript generated from main/bone-hand/leap.bone-hand.coffee\n(function() {\n  var HandMesh, THREE, armTopAndBottomRotation, baseBoneRotation, boneColor, boneHandLost, boneRadius, boneScale, initScene, jointColor, jointRadius, jointScale, material, onHand, scope;\n\n  scope = null;\n\n  THREE = typeof require !== 'undefined' ? require('three') : window.THREE;\n\n  initScene = function(targetEl, scale) {\n    var camera, far, height, near, renderer, width;\n    scope.scene = new THREE.Scene();\n    scope.rendererOps || (scope.rendererOps = {});\n    if (scope.rendererOps.alpha === void 0) {\n      scope.rendererOps.alpha = true;\n    }\n    scope.renderer = renderer = new THREE.WebGLRenderer(scope.rendererOps);\n    width = scope.width || window.innerWidth;\n    height = scope.height || window.innerHeight;\n    renderer.setClearColor(0x000000, 0);\n    renderer.setSize(width, height);\n    renderer.domElement.className = \"leap-boneHand\";\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    targetEl.appendChild(renderer.domElement);\n    near = 1;\n    far = 10000;\n    if (scale) {\n      near *= scale;\n      far *= scale;\n    }\n    scope.camera = camera = new THREE.PerspectiveCamera(45, width / height, near, far);\n    camera.position.set(0, 300, 500);\n    camera.lookAt(new THREE.Vector3(0, 160, 0));\n    scope.scene.add(camera);\n    if (!scope.width && !scope.height) {\n      window.addEventListener('resize', function() {\n        width = window.innerWidth;\n        height = window.innerHeight;\n        camera.aspect = width / height;\n        camera.updateProjectionMatrix();\n        renderer.setSize(width, height);\n        return renderer.render(scope.scene, camera);\n      }, false);\n    }\n    scope.render || (scope.render = function(timestamp) {\n      return renderer.render(scope.scene, scope.camera);\n    });\n    return scope.render();\n  };\n\n  baseBoneRotation = null;\n\n  jointColor = null;\n\n  boneColor = null;\n\n  boneScale = null;\n\n  jointScale = null;\n\n  boneRadius = null;\n\n  jointRadius = null;\n\n  material = null;\n\n  armTopAndBottomRotation = null;\n\n  HandMesh = (function() {\n    HandMesh.unusedHandMeshes = [];\n\n    HandMesh.get = function() {\n      var handMesh;\n      if (HandMesh.unusedHandMeshes.length === 0) {\n        handMesh = HandMesh.create();\n      }\n      handMesh = HandMesh.unusedHandMeshes.pop();\n      handMesh.show();\n      return handMesh;\n    };\n\n    HandMesh.prototype.replace = function() {\n      this.hide();\n      return HandMesh.unusedHandMeshes.push(this);\n    };\n\n    HandMesh.create = function() {\n      var mesh;\n      mesh = new HandMesh;\n      mesh.setVisibility(false);\n      HandMesh.unusedHandMeshes.push(mesh);\n      if (HandMesh.onMeshCreated) {\n        HandMesh.onMeshCreated(mesh);\n      }\n      return mesh;\n    };\n\n    function HandMesh() {\n      var boneCount, finger, i, j, mesh, _i, _j, _k, _l;\n      material = !isNaN(scope.opacity) ? new THREE.MeshPhongMaterial({\n        fog: false,\n        transparent: true,\n        opacity: scope.opacity\n      }) : new THREE.MeshPhongMaterial({\n        fog: false\n      });\n      boneRadius = 40 * boneScale;\n      jointRadius = 40 * jointScale;\n      this.fingerMeshes = [];\n      for (i = _i = 0; _i < 5; i = ++_i) {\n        finger = [];\n        boneCount = i === 0 ? 3 : 4;\n        for (j = _j = 0; 0 <= boneCount ? _j < boneCount : _j > boneCount; j = 0 <= boneCount ? ++_j : --_j) {\n          mesh = new THREE.Mesh(new THREE.SphereGeometry(jointRadius, 32, 32), material.clone());\n          mesh.name = \"hand-bone-\" + j;\n          mesh.material.color.copy(jointColor);\n          mesh.renderOrder = ((i * 9) + (2 * j)) / 36;\n          mesh.castShadow = true;\n          scope.scene.add(mesh);\n          finger.push(mesh);\n          mesh = new THREE.Mesh(new THREE.CylinderGeometry(boneRadius, boneRadius, 40, 32), material.clone());\n          mesh.name = \"hand-joint-\" + j;\n          mesh.material.color.copy(boneColor);\n          mesh.renderOrder = ((i * 9) + (2 * j) + 1) / 36;\n          mesh.castShadow = true;\n          scope.scene.add(mesh);\n          finger.push(mesh);\n        }\n        mesh = new THREE.Mesh(new THREE.SphereGeometry(jointRadius, 32, 32), material.clone());\n        mesh.material.color.copy(jointColor);\n        mesh.castShadow = true;\n        scope.scene.add(mesh);\n        finger.push(mesh);\n        this.fingerMeshes.push(finger);\n      }\n      if (scope.arm) {\n        this.armMesh = new THREE.Object3D;\n        this.armBones = [];\n        this.armSpheres = [];\n        for (i = _k = 0; _k <= 3; i = ++_k) {\n          this.armBones.push(new THREE.Mesh(new THREE.CylinderGeometry(boneRadius, boneRadius, (i < 2 ? 1000 : 100), 32), material.clone()));\n          this.armBones[i].material.color.copy(boneColor);\n          this.armBones[i].castShadow = true;\n          this.armBones[i].name = \"ArmBone\" + i;\n          if (i > 1) {\n            this.armBones[i].quaternion.multiply(armTopAndBottomRotation);\n          }\n          this.armMesh.add(this.armBones[i]);\n        }\n        this.armSpheres = [];\n        for (i = _l = 0; _l <= 3; i = ++_l) {\n          this.armSpheres.push(new THREE.Mesh(new THREE.SphereGeometry(jointRadius, 32, 32), material.clone()));\n          this.armSpheres[i].material.color.copy(jointColor);\n          this.armSpheres[i].castShadow = true;\n          this.armSpheres[i].name = \"ArmSphere\" + i;\n          this.armMesh.add(this.armSpheres[i]);\n        }\n        scope.scene.add(this.armMesh);\n      }\n    }\n\n    HandMesh.prototype.traverse = function(callback) {\n      var i, mesh, _i, _j, _len, _ref;\n      for (i = _i = 0; _i < 5; i = ++_i) {\n        _ref = this.fingerMeshes[i];\n        for (_j = 0, _len = _ref.length; _j < _len; _j++) {\n          mesh = _ref[_j];\n          callback(mesh);\n        }\n      }\n      return this.armMesh && this.armMesh.traverse(callback);\n    };\n\n    HandMesh.prototype.scaleTo = function(hand) {\n      var armLenScale, armWidthScale, baseScale, bone, boneXOffset, finger, fingerBoneLengthScale, halfArmLength, i, j, mesh, _i, _j;\n      baseScale = hand.middleFinger.proximal.length / this.fingerMeshes[2][1].geometry.parameters.height;\n      for (i = _i = 0; _i < 5; i = ++_i) {\n        finger = hand.fingers[i];\n        j = 0;\n        while (true) {\n          if (j === this.fingerMeshes[i].length - 1) {\n            mesh = this.fingerMeshes[i][j];\n            mesh.scale.set(baseScale, baseScale, baseScale);\n            break;\n          }\n          bone = finger.bones[3 - (j / 2)];\n          mesh = this.fingerMeshes[i][j];\n          mesh.scale.set(baseScale, baseScale, baseScale);\n          j++;\n          mesh = this.fingerMeshes[i][j];\n          fingerBoneLengthScale = bone.length / mesh.geometry.parameters.height;\n          mesh.scale.set(baseScale, fingerBoneLengthScale, baseScale);\n          j++;\n        }\n      }\n      if (scope.arm) {\n        armLenScale = hand.arm.length / (this.armBones[0].geometry.parameters.height + this.armBones[0].geometry.parameters.radiusTop);\n        armWidthScale = hand.arm.width / (this.armBones[2].geometry.parameters.height + this.armBones[2].geometry.parameters.radiusTop);\n        for (i = _j = 0; _j <= 3; i = ++_j) {\n          this.armBones[i].scale.set(baseScale, (i < 2 ? armLenScale : armWidthScale), baseScale);\n          this.armSpheres[i].scale.set(baseScale, baseScale, baseScale);\n        }\n        boneXOffset = (hand.arm.width / 2) * 0.85;\n        halfArmLength = hand.arm.length / 2;\n        this.armBones[0].position.setX(boneXOffset);\n        this.armBones[1].position.setX(-boneXOffset);\n        this.armBones[2].position.setY(halfArmLength);\n        this.armBones[3].position.setY(-halfArmLength);\n        this.armSpheres[0].position.set(-boneXOffset, halfArmLength, 0);\n        this.armSpheres[1].position.set(boneXOffset, halfArmLength, 0);\n        this.armSpheres[2].position.set(boneXOffset, -halfArmLength, 0);\n        this.armSpheres[3].position.set(-boneXOffset, -halfArmLength, 0);\n      }\n      return this;\n    };\n\n    HandMesh.prototype.formTo = function(hand) {\n      var bone, finger, i, j, mesh, _i;\n      for (i = _i = 0; _i < 5; i = ++_i) {\n        finger = hand.fingers[i];\n        j = 0;\n        while (true) {\n          if (j === this.fingerMeshes[i].length - 1) {\n            mesh = this.fingerMeshes[i][j];\n            mesh.position.fromArray(bone.prevJoint);\n            break;\n          }\n          bone = finger.bones[3 - (j / 2)];\n          mesh = this.fingerMeshes[i][j];\n          mesh.position.fromArray(bone.nextJoint);\n          ++j;\n          mesh = this.fingerMeshes[i][j];\n          mesh.position.fromArray(bone.center());\n          mesh.setRotationFromMatrix((new THREE.Matrix4).fromArray(bone.matrix()));\n          mesh.quaternion.multiply(baseBoneRotation);\n          ++j;\n        }\n      }\n      if (this.armMesh) {\n        this.armMesh.position.fromArray(hand.arm.center());\n        this.armMesh.setRotationFromMatrix((new THREE.Matrix4).fromArray(hand.arm.matrix()));\n        this.armMesh.quaternion.multiply(baseBoneRotation);\n      }\n      return this;\n    };\n\n    HandMesh.prototype.setVisibility = function(visible) {\n      var i, j, _i, _j, _results;\n      for (i = _i = 0; _i < 5; i = ++_i) {\n        j = 0;\n        while (true) {\n          this.fingerMeshes[i][j].visible = visible;\n          ++j;\n          if (j === this.fingerMeshes[i].length) {\n            break;\n          }\n        }\n      }\n      if (scope.arm) {\n        _results = [];\n        for (i = _j = 0; _j <= 3; i = ++_j) {\n          this.armBones[i].visible = visible;\n          _results.push(this.armSpheres[i].visible = visible);\n        }\n        return _results;\n      }\n    };\n\n    HandMesh.prototype.show = function() {\n      return this.setVisibility(true);\n    };\n\n    HandMesh.prototype.hide = function() {\n      return this.setVisibility(false);\n    };\n\n    return HandMesh;\n\n  })();\n\n  onHand = function(hand) {\n    var handMesh;\n    if (!scope.scene) {\n      return;\n    }\n    handMesh = hand.data('handMesh');\n    if (!handMesh) {\n      handMesh = HandMesh.get().scaleTo(hand);\n      hand.data('handMesh', handMesh);\n      if (HandMesh.onMeshUsed) {\n        HandMesh.onMeshUsed(handMesh);\n      }\n    }\n    return handMesh.formTo(hand);\n  };\n\n  boneHandLost = function(hand) {\n    var handMesh;\n    handMesh = hand.data('handMesh');\n    if (handMesh) {\n      handMesh.replace();\n    }\n    return handMesh = hand.data('handMesh', null);\n  };\n\n  Leap.plugin('boneHand', function(options) {\n    var controller, scale;\n    if (options == null) {\n      options = {};\n    }\n    scope = options;\n    controller = this;\n    jointColor = (new THREE.Color).setHex(0x5daa00);\n    boneColor = (new THREE.Color).setHex(0xffffff);\n    scope.boneScale && (boneScale = scope.boneScale);\n    scope.jointScale && (jointScale = scope.jointScale);\n    scope.boneColor && (boneColor = scope.boneColor);\n    scope.jointColor && (jointColor = scope.jointColor);\n    scope.HandMesh = HandMesh;\n    scope.addShadowCamera = function() {\n      scope.light = new THREE.SpotLight(0xffffff, 1);\n      scope.light.castShadow = true;\n      scope.light.shadow.mapSize.width = 1024;\n      scope.light.shadow.mapSize.height = 1024;\n      scope.light.shadow.camera.near = 0.5 / 0.001;\n      scope.light.shadow.camera.far = 3 / 0.001;\n      scope.light.position.set(0, 1000, 1000);\n      scope.light.target.position.set(0, 0, -1000);\n      scope.camera.add(scope.light.target);\n      scope.camera.add(scope.light);\n      if (controller.plugins.transform) {\n        if (controller.plugins.transform.getScale()) {\n          scope.light.shadowCameraNear *= controller.plugins.transform.scale.x;\n          scope.light.shadowCameraFar *= controller.plugins.transform.scale.x;\n          scope.light.target.position.multiply(controller.plugins.transform.scale);\n          scope.light.position.multiply(controller.plugins.transform.scale);\n        }\n        if (controller.plugins.transform.vr === true) {\n          scope.camera.position.set(0, 0, 0);\n        }\n        if (controller.plugins.transform.vr === 'desktop') {\n          return scope.camera.position.set(0, 0.15, 0.3);\n        }\n      }\n    };\n    baseBoneRotation = (new THREE.Quaternion).setFromEuler(new THREE.Euler(Math.PI / 2, 0, 0));\n    boneScale = 1 / 6;\n    jointScale = 1 / 5;\n    boneRadius = null;\n    jointRadius = null;\n    material = null;\n    armTopAndBottomRotation = (new THREE.Quaternion).setFromEuler(new THREE.Euler(0, 0, Math.PI / 2));\n    HandMesh.onMeshCreated = function(mesh) {\n      return controller.emit('handMeshCreated', mesh);\n    };\n    HandMesh.onMeshUsed = function(mesh) {\n      return controller.emit('handMeshUsed', mesh);\n    };\n    this.use('handEntry');\n    this.use('handHold');\n    if (scope.scene === void 0) {\n      console.assert(scope.targetEl);\n      if (this.plugins.transform && this.plugins.transform.getScale()) {\n        scale = this.plugins.transform.scale.x;\n      }\n      initScene(scope.targetEl, scale);\n      scope.addShadowCamera();\n    }\n    if (scope.scene) {\n      HandMesh.create();\n      HandMesh.create();\n      if (Leap.version.major === 0 && Leap.version.minor < 7 && Leap.version.dot < 4) {\n        console.warn(\"BoneHand default scene render requires LeapJS > 0.6.3. You're running have \" + Leap.version.full);\n      }\n      this.on('frameEnd', function(timestamp) {\n        if (scope.render) {\n          return scope.render(timestamp);\n        }\n      });\n    }\n    this.on('handLost', boneHandLost);\n    return {\n      hand: onHand\n    };\n  });\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}