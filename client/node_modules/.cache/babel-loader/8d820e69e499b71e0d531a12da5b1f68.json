{"ast":null,"code":"var _jsxFileName = \"/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/src/components/Cursor.js\";\nimport React, { Component } from 'react';\nimport './Cursor.css';\nimport Leap from 'leapjs';\nimport 'leapjs-plugins';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Cursor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isGrabbing: false,\n      isPointing: false,\n      isCircular: false,\n      swipeObject: {\n        isSwipe: false,\n        isRight: false\n      },\n      position: {\n        x: 0,\n        y: 0\n      }\n    };\n    this.grabThreshold = 0.8;\n    this.flatThreshold = 0.3;\n  }\n\n  componentDidMount() {\n    this.leapController = Leap.loop({\n      enableGestures: true\n    }, frame => this.onLeapFrame(frame));\n    this.leapController.use('screenPosition', {\n      scale: 0.6,\n      positioning: 'absolute'\n    });\n    this.leapController.connect();\n  }\n\n  componentDidUpdate() {}\n\n  onLeapFrame(frame) {\n    if (frame.hands.length > 0) {\n      const hand = frame.hands[0];\n      const handPosition = hand.screenPosition();\n      this.setState({\n        position: {\n          x: handPosition[0] + 200,\n          y: handPosition[1] + 500\n        }\n      });\n\n      if (hand.grabStrength > this.grabThreshold) {\n        if (!this.state.isGrabbing) {\n          this.setState({\n            isGrabbing: true\n          });\n        }\n\n        this.props.onHandGrabUpdate(true);\n      } else if (hand.grabStrength < this.flatThreshold) {\n        if (this.state.isGrabbing) {\n          this.setState({\n            isGrabbing: false\n          });\n        }\n\n        this.props.onHandGrabUpdate(false);\n      }\n\n      const isPointing = this.onlyIndexFingerExtended(hand);\n      this.setState({\n        isPointing: isPointing\n      });\n      this.props.onPointUpdate(isPointing, this.state.position);\n      const gestures = frame.data.gestures;\n      const isCircular = this.circularGesture(hand, gestures);\n      this.setState({\n        isCircular: isCircular\n      });\n      this.props.onCircularUpdate(isCircular);\n      const isSwipe = this.swipeGesture(hand, gestures);\n      const isRight = this.swipeIsRight(gestures);\n      const swipeObject = {\n        isSwipe: isSwipe,\n        isRight: isRight\n      };\n      this.setState({\n        swipeObject: swipeObject\n      });\n      this.props.onSwipeUpdate(swipeObject);\n    }\n  }\n\n  onlyIndexFingerExtended(hand) {\n    return hand.indexFinger.extended && !hand.ringFinger.extended && !hand.pinky.extended && !hand.thumb.extended && !hand.middleFinger.extended;\n  }\n\n  allFingersExtended(hand) {\n    return true;\n    return hand.indexFinger.extended && hand.ringFinger.extended && hand.pinky.extended && hand.middleFinger.extended;\n  }\n\n  circularGesture(hand, gestures) {\n    const circleGesture = gestures.filter(gesture => gesture.type === 'circle');\n    return hand.pinky.extended && circleGesture.length === 1 && circleGesture.duration > 700;\n  }\n\n  swipeGesture(hand, gestures) {\n    const swipeGesture = gestures.filter(gesture => gesture.type === 'swipe' && gesture.state === 'stop');\n    return swipeGesture.length > 0;\n  }\n\n  swipeIsRight(gestures) {\n    const swipeGesture = gestures.filter(gesture => gesture.type === 'swipe' && gesture.state === 'stop');\n\n    if (swipeGesture.length > 0) {\n      const stop = swipeGesture[0];\n\n      if (stop.position[0] < 0 || stop.position[0] < 0) {\n        return true;\n      }\n\n      return false;\n    }\n\n    return false;\n  }\n\n  render() {\n    var className = 'Cursor-cursor';\n\n    if (this.state.isGrabbing) {\n      className += ' Cursor-cursorGrab';\n    } else if (this.state.isPointing) {\n      className += ' Cursor-cursorPoint';\n    } else {\n      className += ' Cursor-cursorNormal';\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: className,\n      style: {\n        left: `${this.state.position.x}px`,\n        top: `${this.state.position.y}px`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/src/components/Cursor.js"],"names":["React","Component","Leap","Cursor","constructor","props","state","isGrabbing","isPointing","isCircular","swipeObject","isSwipe","isRight","position","x","y","grabThreshold","flatThreshold","componentDidMount","leapController","loop","enableGestures","frame","onLeapFrame","use","scale","positioning","connect","componentDidUpdate","hands","length","hand","handPosition","screenPosition","setState","grabStrength","onHandGrabUpdate","onlyIndexFingerExtended","onPointUpdate","gestures","data","circularGesture","onCircularUpdate","swipeGesture","swipeIsRight","onSwipeUpdate","indexFinger","extended","ringFinger","pinky","thumb","middleFinger","allFingersExtended","circleGesture","filter","gesture","type","duration","stop","render","className","left","top"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Cursor.css';\n\nimport Leap from 'leapjs';\nimport 'leapjs-plugins'\n\nexport default class Cursor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isGrabbing: false,\n            isPointing: false,\n            isCircular: false,\n            swipeObject: {\n                isSwipe: false,\n                isRight: false,\n            },\n            position: {\n                x: 0,\n                y: 0,\n            },\n        };\n        this.grabThreshold = 0.8;\n        this.flatThreshold = 0.3;\n    }\n    componentDidMount() {\n        this.leapController = Leap.loop({enableGestures: true}, (frame) => this.onLeapFrame(frame));\n        this.leapController.use('screenPosition', {scale: 0.6, positioning: 'absolute'});\n        this.leapController.connect();\n    }\n    componentDidUpdate() {\n\n    }\n    onLeapFrame(frame) {\n        if (frame.hands.length > 0) {\n            const hand = frame.hands[0];\n            const handPosition = hand.screenPosition();\n            this.setState({position: {x: handPosition[0] + 200, y: handPosition[1] + 500}});\n            if (hand.grabStrength > this.grabThreshold) {\n                if (!this.state.isGrabbing) {\n                    this.setState({\n                        isGrabbing: true,\n                    });\n                }\n                this.props.onHandGrabUpdate(true);\n            } else if (hand.grabStrength < this.flatThreshold) {\n                if (this.state.isGrabbing) {\n                    this.setState({\n                        isGrabbing: false,\n                    });\n                }\n                this.props.onHandGrabUpdate(false);\n            }\n            const isPointing = this.onlyIndexFingerExtended(hand);\n            this.setState({\n                isPointing: isPointing,\n            });\n            this.props.onPointUpdate(isPointing, this.state.position);\n\n            const gestures = frame.data.gestures;\n            const isCircular = this.circularGesture(hand, gestures);\n            this.setState({\n                isCircular: isCircular,\n            });\n            this.props.onCircularUpdate(isCircular);\n\n            const isSwipe = this.swipeGesture(hand, gestures);\n            const isRight = this.swipeIsRight(gestures);\n            const swipeObject = {\n                isSwipe: isSwipe,\n                isRight: isRight,\n            };\n            this.setState({\n                swipeObject: swipeObject,\n            });\n            this.props.onSwipeUpdate(swipeObject);\n        }\n    }\n    onlyIndexFingerExtended(hand) {\n        return (hand.indexFinger.extended && !hand.ringFinger.extended && !hand.pinky.extended && !hand.thumb.extended && !hand.middleFinger.extended);\n    }\n    allFingersExtended(hand) {\n        return true;\n        return (hand.indexFinger.extended && hand.ringFinger.extended && hand.pinky.extended && hand.middleFinger.extended);\n    }\n    circularGesture(hand, gestures) {\n        const circleGesture = gestures.filter(gesture => gesture.type === 'circle');\n        return hand.pinky.extended && circleGesture.length === 1 && circleGesture.duration > 700;\n    }\n    swipeGesture(hand, gestures) {\n        const swipeGesture = gestures.filter(gesture => gesture.type === 'swipe' && gesture.state === 'stop');\n        return swipeGesture.length > 0;\n    }\n    swipeIsRight(gestures) {\n        const swipeGesture = gestures.filter(gesture => gesture.type === 'swipe' && gesture.state === 'stop');\n        if (swipeGesture.length > 0) {\n            const stop = swipeGesture[0];\n            if (stop.position[0] < 0 || stop.position[0] < 0) {\n                return true;\n            }\n            return false;\n        }\n        return false;\n    }\n    render() {\n        var className = 'Cursor-cursor';\n        if (this.state.isGrabbing) {\n            className += ' Cursor-cursorGrab';\n        } else if (this.state.isPointing) {\n            className += ' Cursor-cursorPoint';\n        } else {\n            className += ' Cursor-cursorNormal';\n        }\n        return (\n            <div className={className} style={{left: `${this.state.position.x}px`, top: `${this.state.position.y}px`}}/>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}