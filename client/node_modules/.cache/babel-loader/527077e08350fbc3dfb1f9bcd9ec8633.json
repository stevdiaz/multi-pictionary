{"ast":null,"code":"var Pointable = require('./pointable'),\n    Bone = require('./bone'),\n    Dialog = require('./dialog');\n/**\n* Constructs a Finger object.\n*\n* An uninitialized finger is considered invalid.\n* Get valid Finger objects from a Frame or a Hand object.\n*\n* @class Finger\n* @memberof Leap\n* @classdesc\n* The Finger class reports the physical characteristics of a finger.\n*\n* Both fingers are classified as Pointable objects. Use the\n* Pointable.tool property to determine whether a Pointable object represents a\n* tool or finger. The Leap classifies a detected entity as a tool when it is\n* thinner, straighter, and longer than a typical finger.\n*\n* Note that Finger objects can be invalid, which means that they do not\n* contain valid tracking data and do not correspond to a physical entity.\n* Invalid Finger objects can be the result of asking for a Finger object\n* using an ID from an earlier frame when no Finger objects with that ID\n* exist in the current frame. A Finger object created from the Finger\n* constructor is also invalid. Test for validity with the Pointable.valid\n* property.\n*/\n\n\nvar Finger = module.exports = function (data) {\n  Pointable.call(this, data); // use pointable as super-constructor\n\n  /**\n  * The position of the distal interphalangeal joint of the finger.\n  * This joint is closest to the tip.\n  * \n  * The distal interphalangeal joint is located between the most extreme segment\n  * of the finger (the distal phalanx) and the middle segment (the medial\n  * phalanx).\n  *\n  * @member dipPosition\n  * @type {number[]}\n  * @memberof Leap.Finger.prototype\n  */\n\n  this.dipPosition = data.dipPosition;\n  /**\n  * The position of the proximal interphalangeal joint of the finger. This joint is the middle\n  * joint of a finger.\n  *\n  * The proximal interphalangeal joint is located between the two finger segments\n  * closest to the hand (the proximal and the medial phalanges). On a thumb,\n  * which lacks an medial phalanx, this joint index identifies the knuckle joint\n  * between the proximal phalanx and the metacarpal bone.\n  *\n  * @member pipPosition\n  * @type {number[]}\n  * @memberof Leap.Finger.prototype\n  */\n\n  this.pipPosition = data.pipPosition;\n  /**\n  * The position of the metacarpopophalangeal joint, or knuckle, of the finger.\n  *\n  * The metacarpopophalangeal joint is located at the base of a finger between\n  * the metacarpal bone and the first phalanx. The common name for this joint is\n  * the knuckle.\n  *\n  * On a thumb, which has one less phalanx than a finger, this joint index\n  * identifies the thumb joint near the base of the hand, between the carpal\n  * and metacarpal bones.\n  *\n  * @member mcpPosition\n  * @type {number[]}\n  * @memberof Leap.Finger.prototype\n  */\n\n  this.mcpPosition = data.mcpPosition;\n  /**\n   * The position of the Carpometacarpal joint\n   *\n   * This is at the distal end of the wrist, and has no common name.\n   *\n   */\n\n  this.carpPosition = data.carpPosition;\n  /**\n  * Whether or not this finger is in an extended posture.\n  *\n  * A finger is considered extended if it is extended straight from the hand as if\n  * pointing. A finger is not extended when it is bent down and curled towards the \n  * palm.\n  * @member extended\n  * @type {Boolean}\n  * @memberof Leap.Finger.prototype\n  */\n\n  this.extended = data.extended;\n  /**\n  * An integer code for the name of this finger.\n  * \n  * * 0 -- thumb\n  * * 1 -- index finger\n  * * 2 -- middle finger\n  * * 3 -- ring finger\n  * * 4 -- pinky\n  *\n  * @member type\n  * @type {number}\n  * @memberof Leap.Finger.prototype\n  */\n\n  this.type = data.type;\n  this.finger = true;\n  /**\n  * The joint positions of this finger as an array in the order base to tip.\n  *\n  * @member positions\n  * @type {array[]}\n  * @memberof Leap.Finger.prototype\n  */\n\n  this.positions = [this.carpPosition, this.mcpPosition, this.pipPosition, this.dipPosition, this.tipPosition];\n\n  if (data.bases) {\n    this.addBones(data);\n  } else {\n    Dialog.warnBones();\n  }\n};\n\nObject.assign(Finger.prototype, Pointable.prototype);\n\nFinger.prototype.addBones = function (data) {\n  /**\n  * Four bones per finger, from wrist outwards:\n  * metacarpal, proximal, medial, and distal.\n  *\n  * See http://en.wikipedia.org/wiki/Interphalangeal_articulations_of_hand\n  */\n  this.metacarpal = new Bone(this, {\n    type: 0,\n    width: this.width,\n    prevJoint: this.carpPosition,\n    nextJoint: this.mcpPosition,\n    basis: data.bases[0]\n  });\n  this.proximal = new Bone(this, {\n    type: 1,\n    width: this.width,\n    prevJoint: this.mcpPosition,\n    nextJoint: this.pipPosition,\n    basis: data.bases[1]\n  });\n  this.medial = new Bone(this, {\n    type: 2,\n    width: this.width,\n    prevJoint: this.pipPosition,\n    nextJoint: this.dipPosition,\n    basis: data.bases[2]\n  });\n  /**\n   * Note that the `distal.nextJoint` position is slightly different from the `finger.tipPosition`.\n   * The former is at the very end of the bone, where the latter is the center of a sphere positioned at\n   * the tip of the finger.  The btipPosition \"bone tip position\" is a few mm closer to the wrist than\n   * the tipPosition.\n   * @type {Bone}\n   */\n\n  this.distal = new Bone(this, {\n    type: 3,\n    width: this.width,\n    prevJoint: this.dipPosition,\n    nextJoint: data.btipPosition,\n    basis: data.bases[3]\n  });\n  this.bones = [this.metacarpal, this.proximal, this.medial, this.distal];\n};\n\nFinger.prototype.toString = function () {\n  return \"Finger [ id:\" + this.id + \" \" + this.length + \"mmx | width:\" + this.width + \"mm | direction:\" + this.direction + ' ]';\n};\n\nFinger.Invalid = {\n  valid: false\n};","map":{"version":3,"sources":["/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/node_modules/leapjs/lib/finger.js"],"names":["Pointable","require","Bone","Dialog","Finger","module","exports","data","call","dipPosition","pipPosition","mcpPosition","carpPosition","extended","type","finger","positions","tipPosition","bases","addBones","warnBones","Object","assign","prototype","metacarpal","width","prevJoint","nextJoint","basis","proximal","medial","distal","btipPosition","bones","toString","id","length","direction","Invalid","valid"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;AAAA,IACIC,IAAI,GAAGD,OAAO,CAAC,QAAD,CADlB;AAAA,IAEIE,MAAM,GAAGF,OAAO,CAAC,UAAD,CAFpB;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIG,MAAM,GAAGC,MAAM,CAACC,OAAP,GAAiB,UAASC,IAAT,EAAe;AAC3CP,EAAAA,SAAS,CAACQ,IAAV,CAAe,IAAf,EAAqBD,IAArB,EAD2C,CACf;;AAE5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKE,WAAL,GAAmBF,IAAI,CAACE,WAAxB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,WAAL,GAAmBH,IAAI,CAACG,WAAxB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,WAAL,GAAmBJ,IAAI,CAACI,WAAxB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,OAAKC,YAAL,GAAoBL,IAAI,CAACK,YAAzB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,QAAL,GAAgBN,IAAI,CAACM,QAArB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,IAAL,GAAYP,IAAI,CAACO,IAAjB;AAEA,OAAKC,MAAL,GAAc,IAAd;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,SAAL,GAAiB,CAAC,KAAKJ,YAAN,EAAoB,KAAKD,WAAzB,EAAsC,KAAKD,WAA3C,EAAwD,KAAKD,WAA7D,EAA0E,KAAKQ,WAA/E,CAAjB;;AAEA,MAAIV,IAAI,CAACW,KAAT,EAAe;AACb,SAAKC,QAAL,CAAcZ,IAAd;AACD,GAFD,MAEO;AACLJ,IAAAA,MAAM,CAACiB,SAAP;AACD;AAEF,CArGD;;AAuGAC,MAAM,CAACC,MAAP,CAAclB,MAAM,CAACmB,SAArB,EAAgCvB,SAAS,CAACuB,SAA1C;;AAGAnB,MAAM,CAACmB,SAAP,CAAiBJ,QAAjB,GAA4B,UAASZ,IAAT,EAAc;AACxC;AACF;AACA;AACA;AACA;AACA;AACE,OAAKiB,UAAL,GAAoB,IAAItB,IAAJ,CAAS,IAAT,EAAe;AACjCY,IAAAA,IAAI,EAAE,CAD2B;AAEjCW,IAAAA,KAAK,EAAE,KAAKA,KAFqB;AAGjCC,IAAAA,SAAS,EAAE,KAAKd,YAHiB;AAIjCe,IAAAA,SAAS,EAAE,KAAKhB,WAJiB;AAKjCiB,IAAAA,KAAK,EAAErB,IAAI,CAACW,KAAL,CAAW,CAAX;AAL0B,GAAf,CAApB;AAQA,OAAKW,QAAL,GAAoB,IAAI3B,IAAJ,CAAS,IAAT,EAAe;AACjCY,IAAAA,IAAI,EAAE,CAD2B;AAEjCW,IAAAA,KAAK,EAAE,KAAKA,KAFqB;AAGjCC,IAAAA,SAAS,EAAE,KAAKf,WAHiB;AAIjCgB,IAAAA,SAAS,EAAE,KAAKjB,WAJiB;AAKjCkB,IAAAA,KAAK,EAAErB,IAAI,CAACW,KAAL,CAAW,CAAX;AAL0B,GAAf,CAApB;AAQA,OAAKY,MAAL,GAAc,IAAI5B,IAAJ,CAAS,IAAT,EAAe;AAC3BY,IAAAA,IAAI,EAAE,CADqB;AAE3BW,IAAAA,KAAK,EAAE,KAAKA,KAFe;AAG3BC,IAAAA,SAAS,EAAE,KAAKhB,WAHW;AAI3BiB,IAAAA,SAAS,EAAE,KAAKlB,WAJW;AAK3BmB,IAAAA,KAAK,EAAErB,IAAI,CAACW,KAAL,CAAW,CAAX;AALoB,GAAf,CAAd;AAQA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKa,MAAL,GAAoB,IAAI7B,IAAJ,CAAS,IAAT,EAAe;AACjCY,IAAAA,IAAI,EAAE,CAD2B;AAEjCW,IAAAA,KAAK,EAAE,KAAKA,KAFqB;AAGjCC,IAAAA,SAAS,EAAE,KAAKjB,WAHiB;AAIjCkB,IAAAA,SAAS,EAAEpB,IAAI,CAACyB,YAJiB;AAKjCJ,IAAAA,KAAK,EAAErB,IAAI,CAACW,KAAL,CAAW,CAAX;AAL0B,GAAf,CAApB;AAQA,OAAKe,KAAL,GAAa,CAAC,KAAKT,UAAN,EAAkB,KAAKK,QAAvB,EAAiC,KAAKC,MAAtC,EAA8C,KAAKC,MAAnD,CAAb;AACD,CA/CD;;AAiDA3B,MAAM,CAACmB,SAAP,CAAiBW,QAAjB,GAA4B,YAAW;AACnC,SAAO,iBAAiB,KAAKC,EAAtB,GAA2B,GAA3B,GAAiC,KAAKC,MAAtC,GAA+C,cAA/C,GAAgE,KAAKX,KAArE,GAA6E,iBAA7E,GAAiG,KAAKY,SAAtG,GAAkH,IAAzH;AACH,CAFD;;AAIAjC,MAAM,CAACkC,OAAP,GAAiB;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAAjB","sourcesContent":["var Pointable = require('./pointable')\n  , Bone = require('./bone')\n  , Dialog = require('./dialog');\n\n/**\n* Constructs a Finger object.\n*\n* An uninitialized finger is considered invalid.\n* Get valid Finger objects from a Frame or a Hand object.\n*\n* @class Finger\n* @memberof Leap\n* @classdesc\n* The Finger class reports the physical characteristics of a finger.\n*\n* Both fingers are classified as Pointable objects. Use the\n* Pointable.tool property to determine whether a Pointable object represents a\n* tool or finger. The Leap classifies a detected entity as a tool when it is\n* thinner, straighter, and longer than a typical finger.\n*\n* Note that Finger objects can be invalid, which means that they do not\n* contain valid tracking data and do not correspond to a physical entity.\n* Invalid Finger objects can be the result of asking for a Finger object\n* using an ID from an earlier frame when no Finger objects with that ID\n* exist in the current frame. A Finger object created from the Finger\n* constructor is also invalid. Test for validity with the Pointable.valid\n* property.\n*/\nvar Finger = module.exports = function(data) {\n  Pointable.call(this, data); // use pointable as super-constructor\n  \n  /**\n  * The position of the distal interphalangeal joint of the finger.\n  * This joint is closest to the tip.\n  * \n  * The distal interphalangeal joint is located between the most extreme segment\n  * of the finger (the distal phalanx) and the middle segment (the medial\n  * phalanx).\n  *\n  * @member dipPosition\n  * @type {number[]}\n  * @memberof Leap.Finger.prototype\n  */  \n  this.dipPosition = data.dipPosition;\n\n  /**\n  * The position of the proximal interphalangeal joint of the finger. This joint is the middle\n  * joint of a finger.\n  *\n  * The proximal interphalangeal joint is located between the two finger segments\n  * closest to the hand (the proximal and the medial phalanges). On a thumb,\n  * which lacks an medial phalanx, this joint index identifies the knuckle joint\n  * between the proximal phalanx and the metacarpal bone.\n  *\n  * @member pipPosition\n  * @type {number[]}\n  * @memberof Leap.Finger.prototype\n  */  \n  this.pipPosition = data.pipPosition;\n\n  /**\n  * The position of the metacarpopophalangeal joint, or knuckle, of the finger.\n  *\n  * The metacarpopophalangeal joint is located at the base of a finger between\n  * the metacarpal bone and the first phalanx. The common name for this joint is\n  * the knuckle.\n  *\n  * On a thumb, which has one less phalanx than a finger, this joint index\n  * identifies the thumb joint near the base of the hand, between the carpal\n  * and metacarpal bones.\n  *\n  * @member mcpPosition\n  * @type {number[]}\n  * @memberof Leap.Finger.prototype\n  */  \n  this.mcpPosition = data.mcpPosition;\n\n  /**\n   * The position of the Carpometacarpal joint\n   *\n   * This is at the distal end of the wrist, and has no common name.\n   *\n   */\n  this.carpPosition = data.carpPosition;\n\n  /**\n  * Whether or not this finger is in an extended posture.\n  *\n  * A finger is considered extended if it is extended straight from the hand as if\n  * pointing. A finger is not extended when it is bent down and curled towards the \n  * palm.\n  * @member extended\n  * @type {Boolean}\n  * @memberof Leap.Finger.prototype\n  */\n  this.extended = data.extended;\n\n  /**\n  * An integer code for the name of this finger.\n  * \n  * * 0 -- thumb\n  * * 1 -- index finger\n  * * 2 -- middle finger\n  * * 3 -- ring finger\n  * * 4 -- pinky\n  *\n  * @member type\n  * @type {number}\n  * @memberof Leap.Finger.prototype\n  */\n  this.type = data.type;\n\n  this.finger = true;\n  \n  /**\n  * The joint positions of this finger as an array in the order base to tip.\n  *\n  * @member positions\n  * @type {array[]}\n  * @memberof Leap.Finger.prototype\n  */\n  this.positions = [this.carpPosition, this.mcpPosition, this.pipPosition, this.dipPosition, this.tipPosition];\n\n  if (data.bases){\n    this.addBones(data);\n  } else {\n    Dialog.warnBones();\n  }\n\n};\n\nObject.assign(Finger.prototype, Pointable.prototype);\n\n\nFinger.prototype.addBones = function(data){\n  /**\n  * Four bones per finger, from wrist outwards:\n  * metacarpal, proximal, medial, and distal.\n  *\n  * See http://en.wikipedia.org/wiki/Interphalangeal_articulations_of_hand\n  */\n  this.metacarpal   = new Bone(this, {\n    type: 0,\n    width: this.width,\n    prevJoint: this.carpPosition,\n    nextJoint: this.mcpPosition,\n    basis: data.bases[0]\n  });\n\n  this.proximal     = new Bone(this, {\n    type: 1,\n    width: this.width,\n    prevJoint: this.mcpPosition,\n    nextJoint: this.pipPosition,\n    basis: data.bases[1]\n  });\n\n  this.medial = new Bone(this, {\n    type: 2,\n    width: this.width,\n    prevJoint: this.pipPosition,\n    nextJoint: this.dipPosition,\n    basis: data.bases[2]\n  });\n\n  /**\n   * Note that the `distal.nextJoint` position is slightly different from the `finger.tipPosition`.\n   * The former is at the very end of the bone, where the latter is the center of a sphere positioned at\n   * the tip of the finger.  The btipPosition \"bone tip position\" is a few mm closer to the wrist than\n   * the tipPosition.\n   * @type {Bone}\n   */\n  this.distal       = new Bone(this, {\n    type: 3,\n    width: this.width,\n    prevJoint: this.dipPosition,\n    nextJoint: data.btipPosition,\n    basis: data.bases[3]\n  });\n\n  this.bones = [this.metacarpal, this.proximal, this.medial, this.distal];\n};\n\nFinger.prototype.toString = function() {\n    return \"Finger [ id:\" + this.id + \" \" + this.length + \"mmx | width:\" + this.width + \"mm | direction:\" + this.direction + ' ]';\n};\n\nFinger.Invalid = { valid: false };\n"]},"metadata":{},"sourceType":"script"}