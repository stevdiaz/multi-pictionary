{"ast":null,"code":"var glMatrix = require(\"gl-matrix\"),\n    vec3 = glMatrix.vec3;\n/**\n * Constructs a Pointable object.\n *\n * An uninitialized pointable is considered invalid.\n * Get valid Pointable objects from a Frame or a Hand object.\n *\n * @class Pointable\n * @memberof Leap\n * @classdesc\n * The Pointable class reports the physical characteristics of a detected\n * finger or tool.\n *\n * Both fingers and tools are classified as Pointable objects. Use the\n * Pointable.tool property to determine whether a Pointable object represents a\n * tool or finger. The Leap classifies a detected entity as a tool when it is\n * thinner, straighter, and longer than a typical finger.\n *\n * Note that Pointable objects can be invalid, which means that they do not\n * contain valid tracking data and do not correspond to a physical entity.\n * Invalid Pointable objects can be the result of asking for a Pointable object\n * using an ID from an earlier frame when no Pointable objects with that ID\n * exist in the current frame. A Pointable object created from the Pointable\n * constructor is also invalid. Test for validity with the Pointable.valid\n * property.\n */\n\n\nvar Pointable = module.exports = function (data) {\n  /**\n   * Indicates whether this is a valid Pointable object.\n   *\n   * @member valid\n   * @type {Boolean}\n   * @memberof Leap.Pointable.prototype\n   */\n  this.valid = true;\n  /**\n   * A unique ID assigned to this Pointable object, whose value remains the\n   * same across consecutive frames while the tracked finger or tool remains\n   * visible. If tracking is lost (for example, when a finger is occluded by\n   * another finger or when it is withdrawn from the Leap field of view), the\n   * Leap may assign a new ID when it detects the entity in a future frame.\n   *\n   * Use the ID value with the pointable() functions defined for the\n   * {@link Frame} and {@link Frame.Hand} classes to find this\n   * Pointable object in future frames.\n   *\n   * @member id\n   * @type {String}\n   * @memberof Leap.Pointable.prototype\n   */\n\n  this.id = data.id;\n  this.handId = data.handId;\n  /**\n   * The estimated length of the finger or tool in millimeters.\n   *\n   * The reported length is the visible length of the finger or tool from the\n   * hand to tip. If the length isn't known, then a value of 0 is returned.\n   *\n   * @member length\n   * @type {number}\n   * @memberof Leap.Pointable.prototype\n   */\n\n  this.length = data.length;\n  /**\n   * Whether or not the Pointable is believed to be a tool.\n   * Tools are generally longer, thinner, and straighter than fingers.\n   *\n   * If tool is false, then this Pointable must be a finger.\n   *\n   * @member tool\n   * @type {Boolean}\n   * @memberof Leap.Pointable.prototype\n   */\n\n  this.tool = data.tool;\n  /**\n   * The estimated width of the tool in millimeters.\n   *\n   * The reported width is the average width of the visible portion of the\n   * tool from the hand to the tip. If the width isn't known,\n   * then a value of 0 is returned.\n   *\n   * Pointable objects representing fingers do not have a width property.\n   *\n   * @member width\n   * @type {number}\n   * @memberof Leap.Pointable.prototype\n   */\n\n  this.width = data.width;\n  /**\n   * The direction in which this finger or tool is pointing.\n   *\n   * The direction is expressed as a unit vector pointing in the same\n   * direction as the tip.\n   *\n   * ![Finger](images/Leap_Finger_Model.png)\n   * @member direction\n   * @type {number[]}\n   * @memberof Leap.Pointable.prototype\n   */\n\n  this.direction = data.direction;\n  /**\n   * The tip position in millimeters from the Leap origin.\n   * Stabilized\n   *\n   * @member stabilizedTipPosition\n   * @type {number[]}\n   * @memberof Leap.Pointable.prototype\n   */\n\n  this.stabilizedTipPosition = data.stabilizedTipPosition;\n  /**\n   * The tip position in millimeters from the Leap origin.\n   *\n   * @member tipPosition\n   * @type {number[]}\n   * @memberof Leap.Pointable.prototype\n   */\n\n  this.tipPosition = data.tipPosition;\n  /**\n   * The rate of change of the tip position in millimeters/second.\n   *\n   * @member tipVelocity\n   * @type {number[]}\n   * @memberof Leap.Pointable.prototype\n   */\n\n  this.tipVelocity = data.tipVelocity;\n  /**\n   * The current touch zone of this Pointable object.\n   *\n   * The Leap Motion software computes the touch zone based on a floating touch\n   * plane that adapts to the user's finger movement and hand posture. The Leap\n   * Motion software interprets purposeful movements toward this plane as potential touch\n   * points. When a Pointable moves close to the adaptive touch plane, it enters the\n   * \"hovering\" zone. When a Pointable reaches or passes through the plane, it enters\n   * the \"touching\" zone.\n   *\n   * The possible states include:\n   *\n   * * \"none\" -- The Pointable is outside the hovering zone.\n   * * \"hovering\" -- The Pointable is close to, but not touching the touch plane.\n   * * \"touching\" -- The Pointable has penetrated the touch plane.\n   *\n   * The touchDistance value provides a normalized indication of the distance to\n   * the touch plane when the Pointable is in the hovering or touching zones.\n   *\n   * @member touchZone\n   * @type {String}\n   * @memberof Leap.Pointable.prototype\n   */\n\n  this.touchZone = data.touchZone;\n  /**\n   * A value proportional to the distance between this Pointable object and the\n   * adaptive touch plane.\n   *\n   * ![Touch Distance](images/Leap_Touch_Plane.png)\n   *\n   * The touch distance is a value in the range [-1, 1]. The value 1.0 indicates the\n   * Pointable is at the far edge of the hovering zone. The value 0 indicates the\n   * Pointable is just entering the touching zone. A value of -1.0 indicates the\n   * Pointable is firmly within the touching zone. Values in between are\n   * proportional to the distance from the plane. Thus, the touchDistance of 0.5\n   * indicates that the Pointable is halfway into the hovering zone.\n   *\n   * You can use the touchDistance value to modulate visual feedback given to the\n   * user as their fingers close in on a touch target, such as a button.\n   *\n   * @member touchDistance\n   * @type {number}\n   * @memberof Leap.Pointable.prototype\n   */\n\n  this.touchDistance = data.touchDistance;\n  /**\n   * How long the pointable has been visible in seconds.\n   *\n   * @member timeVisible\n   * @type {number}\n   * @memberof Leap.Pointable.prototype\n   */\n\n  this.timeVisible = data.timeVisible;\n};\n/**\n * A string containing a brief, human readable description of the Pointable\n * object.\n *\n * @method toString\n * @memberof Leap.Pointable.prototype\n * @returns {String} A description of the Pointable object as a string.\n */\n\n\nPointable.prototype.toString = function () {\n  return \"Pointable [ id:\" + this.id + \" \" + this.length + \"mmx | width:\" + this.width + \"mm | direction:\" + this.direction + ' ]';\n};\n/**\n * Returns the hand which the pointable is attached to.\n */\n\n\nPointable.prototype.hand = function () {\n  return this.frame.hand(this.handId);\n};\n/**\n * An invalid Pointable object.\n *\n * You can use this Pointable instance in comparisons testing\n * whether a given Pointable instance is valid or invalid. (You can also use the\n * Pointable.valid property.)\n\n * @static\n * @type {Leap.Pointable}\n * @name Invalid\n * @memberof Leap.Pointable\n */\n\n\nPointable.Invalid = {\n  valid: false\n};","map":{"version":3,"sources":["/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/node_modules/leapjs/lib/pointable.js"],"names":["glMatrix","require","vec3","Pointable","module","exports","data","valid","id","handId","length","tool","width","direction","stabilizedTipPosition","tipPosition","tipVelocity","touchZone","touchDistance","timeVisible","prototype","toString","hand","frame","Invalid"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAtB;AAAA,IACIC,IAAI,GAAGF,QAAQ,CAACE,IADpB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIC,SAAS,GAAGC,MAAM,CAACC,OAAP,GAAiB,UAASC,IAAT,EAAe;AAC9C;AACF;AACA;AACA;AACA;AACA;AACA;AACE,OAAKC,KAAL,GAAa,IAAb;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,EAAL,GAAUF,IAAI,CAACE,EAAf;AACA,OAAKC,MAAL,GAAcH,IAAI,CAACG,MAAnB;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,MAAL,GAAcJ,IAAI,CAACI,MAAnB;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,IAAL,GAAYL,IAAI,CAACK,IAAjB;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,KAAL,GAAaN,IAAI,CAACM,KAAlB;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,SAAL,GAAiBP,IAAI,CAACO,SAAtB;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,qBAAL,GAA6BR,IAAI,CAACQ,qBAAlC;AACA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,WAAL,GAAmBT,IAAI,CAACS,WAAxB;AACA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,WAAL,GAAmBV,IAAI,CAACU,WAAxB;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,SAAL,GAAiBX,IAAI,CAACW,SAAtB;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,aAAL,GAAqBZ,IAAI,CAACY,aAA1B;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,OAAKC,WAAL,GAAmBb,IAAI,CAACa,WAAxB;AACD,CAzJD;AA2JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAhB,SAAS,CAACiB,SAAV,CAAoBC,QAApB,GAA+B,YAAW;AACxC,SAAO,oBAAoB,KAAKb,EAAzB,GAA8B,GAA9B,GAAoC,KAAKE,MAAzC,GAAkD,cAAlD,GAAmE,KAAKE,KAAxE,GAAgF,iBAAhF,GAAoG,KAAKC,SAAzG,GAAqH,IAA5H;AACD,CAFD;AAIA;AACA;AACA;;;AACAV,SAAS,CAACiB,SAAV,CAAoBE,IAApB,GAA2B,YAAU;AACnC,SAAO,KAAKC,KAAL,CAAWD,IAAX,CAAgB,KAAKb,MAArB,CAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAN,SAAS,CAACqB,OAAV,GAAoB;AAAEjB,EAAAA,KAAK,EAAE;AAAT,CAApB","sourcesContent":["var glMatrix = require(\"gl-matrix\")\n  , vec3 = glMatrix.vec3;\n\n/**\n * Constructs a Pointable object.\n *\n * An uninitialized pointable is considered invalid.\n * Get valid Pointable objects from a Frame or a Hand object.\n *\n * @class Pointable\n * @memberof Leap\n * @classdesc\n * The Pointable class reports the physical characteristics of a detected\n * finger or tool.\n *\n * Both fingers and tools are classified as Pointable objects. Use the\n * Pointable.tool property to determine whether a Pointable object represents a\n * tool or finger. The Leap classifies a detected entity as a tool when it is\n * thinner, straighter, and longer than a typical finger.\n *\n * Note that Pointable objects can be invalid, which means that they do not\n * contain valid tracking data and do not correspond to a physical entity.\n * Invalid Pointable objects can be the result of asking for a Pointable object\n * using an ID from an earlier frame when no Pointable objects with that ID\n * exist in the current frame. A Pointable object created from the Pointable\n * constructor is also invalid. Test for validity with the Pointable.valid\n * property.\n */\nvar Pointable = module.exports = function(data) {\n  /**\n   * Indicates whether this is a valid Pointable object.\n   *\n   * @member valid\n   * @type {Boolean}\n   * @memberof Leap.Pointable.prototype\n   */\n  this.valid = true;\n  /**\n   * A unique ID assigned to this Pointable object, whose value remains the\n   * same across consecutive frames while the tracked finger or tool remains\n   * visible. If tracking is lost (for example, when a finger is occluded by\n   * another finger or when it is withdrawn from the Leap field of view), the\n   * Leap may assign a new ID when it detects the entity in a future frame.\n   *\n   * Use the ID value with the pointable() functions defined for the\n   * {@link Frame} and {@link Frame.Hand} classes to find this\n   * Pointable object in future frames.\n   *\n   * @member id\n   * @type {String}\n   * @memberof Leap.Pointable.prototype\n   */\n  this.id = data.id;\n  this.handId = data.handId;\n  /**\n   * The estimated length of the finger or tool in millimeters.\n   *\n   * The reported length is the visible length of the finger or tool from the\n   * hand to tip. If the length isn't known, then a value of 0 is returned.\n   *\n   * @member length\n   * @type {number}\n   * @memberof Leap.Pointable.prototype\n   */\n  this.length = data.length;\n  /**\n   * Whether or not the Pointable is believed to be a tool.\n   * Tools are generally longer, thinner, and straighter than fingers.\n   *\n   * If tool is false, then this Pointable must be a finger.\n   *\n   * @member tool\n   * @type {Boolean}\n   * @memberof Leap.Pointable.prototype\n   */\n  this.tool = data.tool;\n  /**\n   * The estimated width of the tool in millimeters.\n   *\n   * The reported width is the average width of the visible portion of the\n   * tool from the hand to the tip. If the width isn't known,\n   * then a value of 0 is returned.\n   *\n   * Pointable objects representing fingers do not have a width property.\n   *\n   * @member width\n   * @type {number}\n   * @memberof Leap.Pointable.prototype\n   */\n  this.width = data.width;\n  /**\n   * The direction in which this finger or tool is pointing.\n   *\n   * The direction is expressed as a unit vector pointing in the same\n   * direction as the tip.\n   *\n   * ![Finger](images/Leap_Finger_Model.png)\n   * @member direction\n   * @type {number[]}\n   * @memberof Leap.Pointable.prototype\n   */\n  this.direction = data.direction;\n  /**\n   * The tip position in millimeters from the Leap origin.\n   * Stabilized\n   *\n   * @member stabilizedTipPosition\n   * @type {number[]}\n   * @memberof Leap.Pointable.prototype\n   */\n  this.stabilizedTipPosition = data.stabilizedTipPosition;\n  /**\n   * The tip position in millimeters from the Leap origin.\n   *\n   * @member tipPosition\n   * @type {number[]}\n   * @memberof Leap.Pointable.prototype\n   */\n  this.tipPosition = data.tipPosition;\n  /**\n   * The rate of change of the tip position in millimeters/second.\n   *\n   * @member tipVelocity\n   * @type {number[]}\n   * @memberof Leap.Pointable.prototype\n   */\n  this.tipVelocity = data.tipVelocity;\n  /**\n   * The current touch zone of this Pointable object.\n   *\n   * The Leap Motion software computes the touch zone based on a floating touch\n   * plane that adapts to the user's finger movement and hand posture. The Leap\n   * Motion software interprets purposeful movements toward this plane as potential touch\n   * points. When a Pointable moves close to the adaptive touch plane, it enters the\n   * \"hovering\" zone. When a Pointable reaches or passes through the plane, it enters\n   * the \"touching\" zone.\n   *\n   * The possible states include:\n   *\n   * * \"none\" -- The Pointable is outside the hovering zone.\n   * * \"hovering\" -- The Pointable is close to, but not touching the touch plane.\n   * * \"touching\" -- The Pointable has penetrated the touch plane.\n   *\n   * The touchDistance value provides a normalized indication of the distance to\n   * the touch plane when the Pointable is in the hovering or touching zones.\n   *\n   * @member touchZone\n   * @type {String}\n   * @memberof Leap.Pointable.prototype\n   */\n  this.touchZone = data.touchZone;\n  /**\n   * A value proportional to the distance between this Pointable object and the\n   * adaptive touch plane.\n   *\n   * ![Touch Distance](images/Leap_Touch_Plane.png)\n   *\n   * The touch distance is a value in the range [-1, 1]. The value 1.0 indicates the\n   * Pointable is at the far edge of the hovering zone. The value 0 indicates the\n   * Pointable is just entering the touching zone. A value of -1.0 indicates the\n   * Pointable is firmly within the touching zone. Values in between are\n   * proportional to the distance from the plane. Thus, the touchDistance of 0.5\n   * indicates that the Pointable is halfway into the hovering zone.\n   *\n   * You can use the touchDistance value to modulate visual feedback given to the\n   * user as their fingers close in on a touch target, such as a button.\n   *\n   * @member touchDistance\n   * @type {number}\n   * @memberof Leap.Pointable.prototype\n   */\n  this.touchDistance = data.touchDistance;\n\n  /**\n   * How long the pointable has been visible in seconds.\n   *\n   * @member timeVisible\n   * @type {number}\n   * @memberof Leap.Pointable.prototype\n   */\n  this.timeVisible = data.timeVisible;\n}\n\n/**\n * A string containing a brief, human readable description of the Pointable\n * object.\n *\n * @method toString\n * @memberof Leap.Pointable.prototype\n * @returns {String} A description of the Pointable object as a string.\n */\nPointable.prototype.toString = function() {\n  return \"Pointable [ id:\" + this.id + \" \" + this.length + \"mmx | width:\" + this.width + \"mm | direction:\" + this.direction + ' ]';\n}\n\n/**\n * Returns the hand which the pointable is attached to.\n */\nPointable.prototype.hand = function(){\n  return this.frame.hand(this.handId);\n}\n\n/**\n * An invalid Pointable object.\n *\n * You can use this Pointable instance in comparisons testing\n * whether a given Pointable instance is valid or invalid. (You can also use the\n * Pointable.valid property.)\n\n * @static\n * @type {Leap.Pointable}\n * @name Invalid\n * @memberof Leap.Pointable\n */\nPointable.Invalid = { valid: false };\n"]},"metadata":{},"sourceType":"script"}