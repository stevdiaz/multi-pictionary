{"ast":null,"code":"var _jsxFileName = \"/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/src/components/Canvas.js\";\nimport React, { Component } from 'react';\nimport './Canvas.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Canvas extends React.Component {\n  constructor(props) {\n    super(props);\n    let ref = /*#__PURE__*/React.createRef();\n    this.state = {\n      isDrawing: false,\n      prevPos: {\n        x: 0,\n        y: 0\n      },\n      line: [],\n      ref: ref\n    };\n    this.canvasWidth = 1200;\n    this.canvasHeight = 800;\n  }\n\n  componentDidMount() {\n    this.state.ref.current.width = this.canvasWidth;\n    this.state.ref.current.height = this.canvasHeight;\n    const ctx = this.state.ref.current.getContext('2d');\n    ctx.lineJoin = 'round';\n    ctx.lineCap = 'round';\n    ctx.lineWidth = 5;\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!this.state.isDrawing && this.props.isIndexPoint && !prevProps.isIndexPoint) {\n      console.log('start draw!');\n      this.onStartDraw(this.props.handPos);\n    } else if (this.state.isDrawing && this.props.handPos !== prevProps.handPos) {\n      console.log('moving finger');\n      this.onMoveFinger(this.props.handPos);\n    } else if (this.state.isDrawing && !this.props.isIndexPoint && prevProps.isIndexPoint) {\n      console.log('end draw event');\n      this.endDrawEvent();\n    }\n  }\n\n  onStartDraw(posEvent) {\n    const {\n      x,\n      y\n    } = posEvent;\n    const offsetData = {\n      x,\n      y\n    };\n    this.setState({\n      isDrawing: true,\n      prevPos: offsetData\n    });\n  }\n\n  onMoveFinger(posEvent) {\n    if (this.state.isDrawing) {\n      const {\n        x,\n        y\n      } = posEvent;\n      const offsetData = {\n        x,\n        y\n      };\n      const positionData = {\n        start: { ...this.state.prevPos\n        },\n        stop: { ...offsetData\n        }\n      };\n      this.setState(prevState => ({\n        line: prevState.line.concat(positionData)\n      }), () => this.paint(this.state.prevPos, offsetData));\n    }\n  }\n\n  endDrawEvent() {\n    this.setState({\n      isDrawing: false\n    });\n  }\n\n  paint(prevPos, currPos) {\n    const {\n      x,\n      y\n    } = currPos;\n    const {\n      x: prevX,\n      y: prevY\n    } = prevPos;\n    const ctx = this.state.ref.current.getContext('2d');\n    ctx.beginPath();\n    ctx.strokeStyle = 'black';\n    ctx.moveTo(prevX, prevY);\n    ctx.lineTo(x, y);\n    ctx.stroke();\n    this.setState({\n      prevPos: {\n        x,\n        y\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Canvas-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Canvas-instructions\",\n        children: \"Draw Below\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Canvas-canvas\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          id: \"Canvas\",\n          ref: this.state.ref,\n          style: {\n            background: 'var(--offwhite)'\n          },\n          onMouseDown: evt => this.onMouseDown(evt),\n          onMouseLeave: () => this.endPaintEvent(),\n          onMouseUp: () => this.endPaintEvent(),\n          onMouseMove: evt => this.onMouseMove(evt)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/src/components/Canvas.js"],"names":["React","Component","Canvas","constructor","props","ref","createRef","state","isDrawing","prevPos","x","y","line","canvasWidth","canvasHeight","componentDidMount","current","width","height","ctx","getContext","lineJoin","lineCap","lineWidth","componentDidUpdate","prevProps","isIndexPoint","console","log","onStartDraw","handPos","onMoveFinger","endDrawEvent","posEvent","offsetData","setState","positionData","start","stop","prevState","concat","paint","currPos","prevX","prevY","beginPath","strokeStyle","moveTo","lineTo","stroke","render","background","evt","onMouseDown","endPaintEvent","onMouseMove"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Canvas.css';\n\nexport default class Canvas extends React.Component {\n    constructor(props) {\n        super(props);\n        let ref = React.createRef();\n        this.state = {\n            isDrawing: false,\n            prevPos: {\n                x: 0,\n                y: 0,\n            },\n            line: [],\n            ref: ref,\n        };\n        this.canvasWidth = 1200;\n        this.canvasHeight = 800;\n    }\n    componentDidMount() {\n        this.state.ref.current.width = this.canvasWidth;\n        this.state.ref.current.height = this.canvasHeight;\n        const ctx = this.state.ref.current.getContext('2d');\n        ctx.lineJoin = 'round';\n        ctx.lineCap = 'round';\n        ctx.lineWidth = 5; \n    }\n    componentDidUpdate(prevProps) {\n        if (!this.state.isDrawing && this.props.isIndexPoint && !prevProps.isIndexPoint) {\n            console.log('start draw!');\n            this.onStartDraw(this.props.handPos);\n        } else if (this.state.isDrawing && this.props.handPos !== prevProps.handPos) {\n            console.log('moving finger');\n            this.onMoveFinger(this.props.handPos);\n        } else if (this.state.isDrawing && !this.props.isIndexPoint && prevProps.isIndexPoint) {\n            console.log('end draw event');\n            this.endDrawEvent();\n        }\n    }\n    onStartDraw(posEvent) {\n        const { x, y } = posEvent;\n        const offsetData = {x, y};\n        this.setState({\n            isDrawing: true,\n            prevPos: offsetData,\n        });\n    }\n    onMoveFinger(posEvent) {\n        if (this.state.isDrawing) {\n            const { x, y } = posEvent;\n            const offsetData = { x, y };\n            const positionData = {\n                start: { ...this.state.prevPos },\n                stop: { ...offsetData },\n            };\n            this.setState(prevState => ({\n                line: prevState.line.concat(positionData),\n            }), () => this.paint(this.state.prevPos, offsetData));\n        }\n    }\n    endDrawEvent() {\n        this.setState({\n            isDrawing: false,\n        });\n    }\n    paint(prevPos, currPos) {\n        const { x, y } = currPos;\n        const { x: prevX, y: prevY } = prevPos;\n\n        const ctx = this.state.ref.current.getContext('2d');\n        ctx.beginPath();\n        ctx.strokeStyle = 'black';\n        ctx.moveTo(prevX, prevY);\n        ctx.lineTo(x, y);\n        ctx.stroke();\n        this.setState({\n            prevPos: {\n                x,\n                y\n            },\n        });\n    }\n    render() {\n        return (\n            <div className='Canvas-container'>\n                <div className='Canvas-instructions'>\n                    Draw Below\n                </div>\n                <div className='Canvas-canvas'>\n                    <canvas\n                        id='Canvas'\n                        ref={this.state.ref}\n                        style={{ background: 'var(--offwhite)' }}\n                        onMouseDown={(evt) => this.onMouseDown(evt)}\n                        onMouseLeave={() => this.endPaintEvent()}\n                        onMouseUp={() => this.endPaintEvent()}\n                        onMouseMove={(evt) => this.onMouseMove(evt)}\n                    />\n                </div>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}