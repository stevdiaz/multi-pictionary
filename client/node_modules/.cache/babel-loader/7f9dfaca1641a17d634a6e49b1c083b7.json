{"ast":null,"code":"//CoffeeScript generated from main/transform/leap.transform.coffee\n(function () {\n  Leap.plugin('transform', function (scope) {\n    var noop, transformDirections, transformMat4Implicit0, transformPositions, transformWithMatrices, _directionTransform;\n\n    if (scope == null) {\n      scope = {};\n    }\n\n    noop = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n    _directionTransform = new THREE.Matrix4();\n\n    if (scope.vr === true) {\n      this.setOptimizeHMD(true);\n      scope.quaternion = new THREE.Quaternion().setFromRotationMatrix(new THREE.Matrix4().set(-1, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 1));\n      scope.scale = 0.001;\n      scope.position = new THREE.Vector3(0, 0, -0.08);\n    }\n\n    if (scope.vr === 'desktop') {\n      scope.scale = 0.001;\n    }\n\n    scope.getTransform = function (hand) {\n      var matrix;\n\n      if (scope.matrix) {\n        matrix = typeof scope.matrix === 'function' ? scope.matrix(hand) : scope.matrix;\n\n        if (window['THREE'] && matrix instanceof THREE.Matrix4) {\n          return matrix.elements;\n        } else {\n          return matrix;\n        }\n      } else if (scope.position || scope.quaternion || scope.scale) {\n        _directionTransform.set.apply(_directionTransform, noop);\n\n        if (scope.quaternion) {\n          _directionTransform.makeRotationFromQuaternion(typeof scope.quaternion === 'function' ? scope.quaternion(hand) : scope.quaternion);\n        }\n\n        if (scope.position) {\n          _directionTransform.setPosition(typeof scope.position === 'function' ? scope.position(hand) : scope.position);\n        }\n\n        return _directionTransform.elements;\n      } else {\n        return noop;\n      }\n    };\n\n    scope.getScale = function (hand) {\n      if (!isNaN(scope.scale)) {\n        scope.scale = new THREE.Vector3(scope.scale, scope.scale, scope.scale);\n      }\n\n      if (typeof scope.scale === 'function') {\n        return scope.scale(hand);\n      } else {\n        return scope.scale;\n      }\n    };\n\n    transformPositions = function (matrix, vec3s) {\n      var vec3, _i, _len, _results;\n\n      _results = [];\n\n      for (_i = 0, _len = vec3s.length; _i < _len; _i++) {\n        vec3 = vec3s[_i];\n\n        if (vec3) {\n          _results.push(Leap.vec3.transformMat4(vec3, vec3, matrix));\n        } else {\n          _results.push(void 0);\n        }\n      }\n\n      return _results;\n    };\n\n    transformMat4Implicit0 = function (out, a, m) {\n      var x, y, z;\n      x = a[0];\n      y = a[1];\n      z = a[2];\n      out[0] = m[0] * x + m[4] * y + m[8] * z;\n      out[1] = m[1] * x + m[5] * y + m[9] * z;\n      out[2] = m[2] * x + m[6] * y + m[10] * z;\n      return out;\n    };\n\n    transformDirections = function (matrix, vec3s) {\n      var vec3, _i, _len, _results;\n\n      _results = [];\n\n      for (_i = 0, _len = vec3s.length; _i < _len; _i++) {\n        vec3 = vec3s[_i];\n\n        if (vec3) {\n          _results.push(transformMat4Implicit0(vec3, vec3, matrix));\n        } else {\n          _results.push(void 0);\n        }\n      }\n\n      return _results;\n    };\n\n    transformWithMatrices = function (hand, transform, scale) {\n      var finger, scalarScale, _i, _j, _len, _len1, _ref, _ref1;\n\n      transformDirections(transform, [hand.direction, hand.palmNormal, hand.palmVelocity, hand.arm.basis[0], hand.arm.basis[1], hand.arm.basis[2]]);\n      _ref = hand.fingers;\n\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        finger = _ref[_i];\n        transformDirections(transform, [finger.direction, finger.metacarpal.basis[0], finger.metacarpal.basis[1], finger.metacarpal.basis[2], finger.proximal.basis[0], finger.proximal.basis[1], finger.proximal.basis[2], finger.medial.basis[0], finger.medial.basis[1], finger.medial.basis[2], finger.distal.basis[0], finger.distal.basis[1], finger.distal.basis[2]]);\n      }\n\n      Leap.glMatrix.mat4.scale(transform, transform, scale);\n      transformPositions(transform, [hand.palmPosition, hand.stabilizedPalmPosition, hand.sphereCenter, hand.arm.nextJoint, hand.arm.prevJoint]);\n      _ref1 = hand.fingers;\n\n      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n        finger = _ref1[_j];\n        transformPositions(transform, [finger.carpPosition, finger.mcpPosition, finger.pipPosition, finger.dipPosition, finger.distal.nextJoint, finger.tipPosition]);\n      }\n\n      scalarScale = (scale[0] + scale[1] + scale[2]) / 3;\n      return hand.arm.width *= scalarScale;\n    };\n\n    return {\n      frame: function (frame) {\n        var finger, hand, len, _i, _j, _len, _len1, _ref, _ref1, _results;\n\n        if (!frame.valid || frame.data.transformed) {\n          return;\n        }\n\n        frame.data.transformed = true;\n        _ref = frame.hands;\n        _results = [];\n\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          hand = _ref[_i];\n          transformWithMatrices(hand, scope.getTransform(hand), (scope.getScale(hand) || new THREE.Vector3(1, 1, 1)).toArray());\n\n          if (scope.effectiveParent) {\n            transformWithMatrices(hand, scope.effectiveParent.matrixWorld.elements, scope.effectiveParent.scale.toArray());\n          }\n\n          len = null;\n          _ref1 = hand.fingers;\n\n          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n            finger = _ref1[_j];\n            len = Leap.vec3.create();\n            Leap.vec3.sub(len, finger.mcpPosition, finger.carpPosition);\n            finger.metacarpal.length = Leap.vec3.length(len);\n            Leap.vec3.sub(len, finger.pipPosition, finger.mcpPosition);\n            finger.proximal.length = Leap.vec3.length(len);\n            Leap.vec3.sub(len, finger.dipPosition, finger.pipPosition);\n            finger.medial.length = Leap.vec3.length(len);\n            Leap.vec3.sub(len, finger.tipPosition, finger.dipPosition);\n            finger.distal.length = Leap.vec3.length(len);\n          }\n\n          Leap.vec3.sub(len, hand.arm.prevJoint, hand.arm.nextJoint);\n\n          _results.push(hand.arm.length = Leap.vec3.length(len));\n        }\n\n        return _results;\n      }\n    };\n  });\n}).call(this);","map":{"version":3,"sources":["/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/node_modules/leapjs-plugins/main/transform/leap.transform.js"],"names":["Leap","plugin","scope","noop","transformDirections","transformMat4Implicit0","transformPositions","transformWithMatrices","_directionTransform","THREE","Matrix4","vr","setOptimizeHMD","quaternion","Quaternion","setFromRotationMatrix","set","scale","position","Vector3","getTransform","hand","matrix","window","elements","apply","makeRotationFromQuaternion","setPosition","getScale","isNaN","vec3s","vec3","_i","_len","_results","length","push","transformMat4","out","a","m","x","y","z","transform","finger","scalarScale","_j","_len1","_ref","_ref1","direction","palmNormal","palmVelocity","arm","basis","fingers","metacarpal","proximal","medial","distal","glMatrix","mat4","palmPosition","stabilizedPalmPosition","sphereCenter","nextJoint","prevJoint","carpPosition","mcpPosition","pipPosition","dipPosition","tipPosition","width","frame","len","valid","data","transformed","hands","toArray","effectiveParent","matrixWorld","create","sub","call"],"mappings":"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","sourcesContent":["//CoffeeScript generated from main/transform/leap.transform.coffee\n(function() {\n  Leap.plugin('transform', function(scope) {\n    var noop, transformDirections, transformMat4Implicit0, transformPositions, transformWithMatrices, _directionTransform;\n    if (scope == null) {\n      scope = {};\n    }\n    noop = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n    _directionTransform = new THREE.Matrix4;\n    if (scope.vr === true) {\n      this.setOptimizeHMD(true);\n      scope.quaternion = (new THREE.Quaternion).setFromRotationMatrix((new THREE.Matrix4).set(-1, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 1));\n      scope.scale = 0.001;\n      scope.position = new THREE.Vector3(0, 0, -0.08);\n    }\n    if (scope.vr === 'desktop') {\n      scope.scale = 0.001;\n    }\n    scope.getTransform = function(hand) {\n      var matrix;\n      if (scope.matrix) {\n        matrix = typeof scope.matrix === 'function' ? scope.matrix(hand) : scope.matrix;\n        if (window['THREE'] && matrix instanceof THREE.Matrix4) {\n          return matrix.elements;\n        } else {\n          return matrix;\n        }\n      } else if (scope.position || scope.quaternion || scope.scale) {\n        _directionTransform.set.apply(_directionTransform, noop);\n        if (scope.quaternion) {\n          _directionTransform.makeRotationFromQuaternion(typeof scope.quaternion === 'function' ? scope.quaternion(hand) : scope.quaternion);\n        }\n        if (scope.position) {\n          _directionTransform.setPosition(typeof scope.position === 'function' ? scope.position(hand) : scope.position);\n        }\n        return _directionTransform.elements;\n      } else {\n        return noop;\n      }\n    };\n    scope.getScale = function(hand) {\n      if (!isNaN(scope.scale)) {\n        scope.scale = new THREE.Vector3(scope.scale, scope.scale, scope.scale);\n      }\n      if (typeof scope.scale === 'function') {\n        return scope.scale(hand);\n      } else {\n        return scope.scale;\n      }\n    };\n    transformPositions = function(matrix, vec3s) {\n      var vec3, _i, _len, _results;\n      _results = [];\n      for (_i = 0, _len = vec3s.length; _i < _len; _i++) {\n        vec3 = vec3s[_i];\n        if (vec3) {\n          _results.push(Leap.vec3.transformMat4(vec3, vec3, matrix));\n        } else {\n          _results.push(void 0);\n        }\n      }\n      return _results;\n    };\n    transformMat4Implicit0 = function(out, a, m) {\n      var x, y, z;\n      x = a[0];\n      y = a[1];\n      z = a[2];\n      out[0] = m[0] * x + m[4] * y + m[8] * z;\n      out[1] = m[1] * x + m[5] * y + m[9] * z;\n      out[2] = m[2] * x + m[6] * y + m[10] * z;\n      return out;\n    };\n    transformDirections = function(matrix, vec3s) {\n      var vec3, _i, _len, _results;\n      _results = [];\n      for (_i = 0, _len = vec3s.length; _i < _len; _i++) {\n        vec3 = vec3s[_i];\n        if (vec3) {\n          _results.push(transformMat4Implicit0(vec3, vec3, matrix));\n        } else {\n          _results.push(void 0);\n        }\n      }\n      return _results;\n    };\n    transformWithMatrices = function(hand, transform, scale) {\n      var finger, scalarScale, _i, _j, _len, _len1, _ref, _ref1;\n      transformDirections(transform, [hand.direction, hand.palmNormal, hand.palmVelocity, hand.arm.basis[0], hand.arm.basis[1], hand.arm.basis[2]]);\n      _ref = hand.fingers;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        finger = _ref[_i];\n        transformDirections(transform, [finger.direction, finger.metacarpal.basis[0], finger.metacarpal.basis[1], finger.metacarpal.basis[2], finger.proximal.basis[0], finger.proximal.basis[1], finger.proximal.basis[2], finger.medial.basis[0], finger.medial.basis[1], finger.medial.basis[2], finger.distal.basis[0], finger.distal.basis[1], finger.distal.basis[2]]);\n      }\n      Leap.glMatrix.mat4.scale(transform, transform, scale);\n      transformPositions(transform, [hand.palmPosition, hand.stabilizedPalmPosition, hand.sphereCenter, hand.arm.nextJoint, hand.arm.prevJoint]);\n      _ref1 = hand.fingers;\n      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n        finger = _ref1[_j];\n        transformPositions(transform, [finger.carpPosition, finger.mcpPosition, finger.pipPosition, finger.dipPosition, finger.distal.nextJoint, finger.tipPosition]);\n      }\n      scalarScale = (scale[0] + scale[1] + scale[2]) / 3;\n      return hand.arm.width *= scalarScale;\n    };\n    return {\n      frame: function(frame) {\n        var finger, hand, len, _i, _j, _len, _len1, _ref, _ref1, _results;\n        if (!frame.valid || frame.data.transformed) {\n          return;\n        }\n        frame.data.transformed = true;\n        _ref = frame.hands;\n        _results = [];\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          hand = _ref[_i];\n          transformWithMatrices(hand, scope.getTransform(hand), (scope.getScale(hand) || new THREE.Vector3(1, 1, 1)).toArray());\n          if (scope.effectiveParent) {\n            transformWithMatrices(hand, scope.effectiveParent.matrixWorld.elements, scope.effectiveParent.scale.toArray());\n          }\n          len = null;\n          _ref1 = hand.fingers;\n          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n            finger = _ref1[_j];\n            len = Leap.vec3.create();\n            Leap.vec3.sub(len, finger.mcpPosition, finger.carpPosition);\n            finger.metacarpal.length = Leap.vec3.length(len);\n            Leap.vec3.sub(len, finger.pipPosition, finger.mcpPosition);\n            finger.proximal.length = Leap.vec3.length(len);\n            Leap.vec3.sub(len, finger.dipPosition, finger.pipPosition);\n            finger.medial.length = Leap.vec3.length(len);\n            Leap.vec3.sub(len, finger.tipPosition, finger.dipPosition);\n            finger.distal.length = Leap.vec3.length(len);\n          }\n          Leap.vec3.sub(len, hand.arm.prevJoint, hand.arm.nextJoint);\n          _results.push(hand.arm.length = Leap.vec3.length(len));\n        }\n        return _results;\n      }\n    };\n  });\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}