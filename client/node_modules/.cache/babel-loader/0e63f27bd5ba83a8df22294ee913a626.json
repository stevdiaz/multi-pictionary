{"ast":null,"code":"var _jsxFileName = \"/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/src/components/Canvas.js\";\nimport React, { Component } from 'react';\nimport './Canvas.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Canvas extends React.Component {\n  constructor(props) {\n    super(props);\n    let ref = /*#__PURE__*/React.createRef();\n    this.state = {\n      isDrawing: false,\n      prevPos: {\n        x: 0,\n        y: 0\n      },\n      line: [],\n      strokes: [],\n      ref: ref\n    };\n    this.canvasWidth = 1200;\n    this.canvasHeight = 800;\n  }\n\n  componentDidMount() {\n    this.state.ref.current.width = this.canvasWidth;\n    this.state.ref.current.height = this.canvasHeight;\n    const ctx = this.getCtx();\n    ctx.lineJoin = 'round';\n    ctx.lineCap = 'round';\n    ctx.lineWidth = 5;\n  }\n\n  componentDidUpdate(prevProps) {\n    const transformedHandPos = this.transform(this.props.handPos);\n\n    if (!this.state.isDrawing && this.props.isIndexPoint && !prevProps.isIndexPoint) {\n      this.onStartDraw(transformedHandPos);\n    } else if (this.state.isDrawing && this.props.isIndexPoint && prevProps.isIndexPoint && this.props.handPos !== prevProps.handPos) {\n      this.onMoveFinger(transformedHandPos);\n    } else if (this.state.isDrawing && !this.props.isIndexPoint && prevProps.isIndexPoint) {\n      this.endDrawEvent();\n    } else if (!this.state.isDrawing && this.props.isCircular && !prevProps.isCircular) {\n      this.undo();\n    }\n  }\n\n  transform(handPos) {\n    return {\n      x: handPos.x - 100,\n      y: handPos.y - 100\n    };\n  }\n\n  onStartDraw(posEvent) {\n    const {\n      x,\n      y\n    } = posEvent;\n    const offsetData = {\n      x,\n      y\n    };\n    this.setState(prevState => ({\n      isDrawing: true,\n      prevPos: offsetData,\n      strokes: prevState.strokes.concat([offsetData])\n    }));\n  }\n\n  onMoveFinger(posEvent) {\n    if (this.state.isDrawing) {\n      const {\n        x,\n        y\n      } = posEvent;\n      const offsetData = {\n        x,\n        y\n      };\n      const positionData = {\n        start: { ...this.state.prevPos\n        },\n        stop: { ...offsetData\n        }\n      };\n      let strokes = [...this.state.strokes];\n      const lastIndex = strokes.length - 1;\n      let lastStroke = [...strokes[lastIndex]];\n      lastStroke.push(offsetData);\n      strokes[lastIndex] = lastStroke;\n      this.setState(prevState => ({\n        line: prevState.line.concat(positionData),\n        strokes: strokes\n      }), () => this.paint(this.state.prevPos, offsetData));\n    }\n  }\n\n  endDrawEvent() {\n    this.setState({\n      isDrawing: false\n    });\n  }\n\n  paint(prevPos, currPos) {\n    const {\n      x,\n      y\n    } = currPos;\n    const {\n      x: prevX,\n      y: prevY\n    } = prevPos;\n    const ctx = this.getCtx();\n    ctx.beginPath();\n    ctx.strokeStyle = 'black';\n    ctx.moveTo(prevX, prevY);\n    ctx.lineTo(x, y);\n    ctx.stroke();\n    this.setState({\n      prevPos: {\n        x,\n        y\n      }\n    });\n  }\n\n  clear() {\n    const ctx = this.getCtx();\n    ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n  }\n\n  undo() {\n    this.clear();\n    this.state.strokes.pop();\n    this.state.strokes.forEach(stroke => {\n      for (let i = 1; i < stroke.length; i++) {\n        const prevPos = stroke[i - 1];\n        const currPos = stroke[i];\n        this.paint(prevPos, currPos);\n      }\n    });\n  }\n\n  getCtx() {\n    return this.state.ref.current.getContext('2d');\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Canvas-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Canvas-instructions\",\n        children: \"Draw Below\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Canvas-canvas\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          id: \"Canvas\",\n          ref: this.state.ref,\n          style: {\n            background: 'var(--offwhite)'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/src/components/Canvas.js"],"names":["React","Component","Canvas","constructor","props","ref","createRef","state","isDrawing","prevPos","x","y","line","strokes","canvasWidth","canvasHeight","componentDidMount","current","width","height","ctx","getCtx","lineJoin","lineCap","lineWidth","componentDidUpdate","prevProps","transformedHandPos","transform","handPos","isIndexPoint","onStartDraw","onMoveFinger","endDrawEvent","isCircular","undo","posEvent","offsetData","setState","prevState","concat","positionData","start","stop","lastIndex","length","lastStroke","push","paint","currPos","prevX","prevY","beginPath","strokeStyle","moveTo","lineTo","stroke","clear","clearRect","pop","forEach","i","getContext","render","background"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Canvas.css';\n\nexport default class Canvas extends React.Component {\n    constructor(props) {\n        super(props);\n        let ref = React.createRef();\n        this.state = {\n            isDrawing: false,\n            prevPos: {\n                x: 0,\n                y: 0,\n            },\n            line: [],\n            strokes: [],\n            ref: ref,\n        };\n        this.canvasWidth = 1200;\n        this.canvasHeight = 800;\n    }\n    componentDidMount() {\n        this.state.ref.current.width = this.canvasWidth;\n        this.state.ref.current.height = this.canvasHeight;\n        const ctx = this.getCtx();\n        ctx.lineJoin = 'round';\n        ctx.lineCap = 'round';\n        ctx.lineWidth = 5; \n    }\n    componentDidUpdate(prevProps) {\n        const transformedHandPos = this.transform(this.props.handPos);\n        if (!this.state.isDrawing && this.props.isIndexPoint && !prevProps.isIndexPoint) {\n            this.onStartDraw(transformedHandPos);\n        } else if (this.state.isDrawing && this.props.isIndexPoint && prevProps.isIndexPoint && \n            this.props.handPos !== prevProps.handPos) {\n            this.onMoveFinger(transformedHandPos);\n        } else if (this.state.isDrawing && !this.props.isIndexPoint && prevProps.isIndexPoint) {\n            this.endDrawEvent();\n        } else if (!this.state.isDrawing && this.props.isCircular && !prevProps.isCircular) {\n            this.undo();\n        }\n    }\n    transform(handPos) {\n        return {\n            x: handPos.x - 100,\n            y: handPos.y - 100,\n        };\n    }\n    onStartDraw(posEvent) {\n        const { x, y } = posEvent;\n        const offsetData = {x, y};\n        this.setState(prevState => ({\n            isDrawing: true,\n            prevPos: offsetData,\n            strokes: prevState.strokes.concat([offsetData]),\n        }));\n    }\n    onMoveFinger(posEvent) {\n        if (this.state.isDrawing) {\n            const { x, y } = posEvent;\n            const offsetData = { x, y };\n            const positionData = {\n                start: { ...this.state.prevPos },\n                stop: { ...offsetData },\n            };\n            let strokes = [...this.state.strokes];\n            const lastIndex = strokes.length - 1;\n            let lastStroke = [...strokes[lastIndex]];\n            lastStroke.push(offsetData);\n            strokes[lastIndex] = lastStroke;\n            this.setState(prevState => ({\n                line: prevState.line.concat(positionData),\n                strokes: strokes\n            }), () => this.paint(this.state.prevPos, offsetData));\n        }\n    }\n    endDrawEvent() {\n        this.setState({\n            isDrawing: false,\n        });\n    }\n    paint(prevPos, currPos) {\n        const { x, y } = currPos;\n        const { x: prevX, y: prevY } = prevPos;\n\n        const ctx = this.getCtx();\n        ctx.beginPath();\n        ctx.strokeStyle = 'black';\n        ctx.moveTo(prevX, prevY);\n        ctx.lineTo(x, y);\n        ctx.stroke();\n        this.setState({\n            prevPos: {\n                x,\n                y\n            },\n        });\n    }\n    clear() {\n        const ctx = this.getCtx();\n        ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    }\n    undo() {\n        this.clear();\n        this.state.strokes.pop();\n        this.state.strokes.forEach(stroke => {\n            for (let i = 1; i < stroke.length; i++) {\n                const prevPos = stroke[i-1];\n                const currPos = stroke[i];\n                this.paint(prevPos, currPos);\n            }\n        });\n    }\n    getCtx() {\n        return this.state.ref.current.getContext('2d');\n    }\n    render() {\n        return (\n            <div className='Canvas-container'>\n                <div className='Canvas-instructions'>\n                    Draw Below\n                </div>\n                <div className='Canvas-canvas'>\n                    <canvas\n                        id='Canvas'\n                        ref={this.state.ref}\n                        style={{ background: 'var(--offwhite)' }}\n                    />\n                </div>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}