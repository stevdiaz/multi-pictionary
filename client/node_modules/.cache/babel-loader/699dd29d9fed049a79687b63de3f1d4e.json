{"ast":null,"code":"var _jsxFileName = \"/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/Canvas.js\";\nimport React, { Component } from 'react';\nimport './Canvas.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Canvas extends React.Component {\n  constructor(props) {\n    super(props);\n    let ref = /*#__PURE__*/React.createRef();\n    this.state = {\n      isDrawing: false,\n      prevPos: {\n        x: 0,\n        y: 0\n      },\n      line: [],\n      strokes: [],\n      // strokes[i] is stroke object, which contains color, thickness, and position fields\n      ref: ref\n    };\n    this.canvasWidth = 1200;\n    this.canvasHeight = 800;\n  }\n\n  componentDidMount() {\n    this.state.ref.current.width = this.canvasWidth;\n    this.state.ref.current.height = this.canvasHeight;\n    const ctx = this.getCtx();\n    ctx.lineJoin = 'round';\n    ctx.lineCap = 'round';\n    ctx.lineWidth = this.props.selectedThickness;\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.isDrawer) {\n      const transformedHandPos = this.transform(this.props.handPos);\n\n      if (!this.state.isDrawing && this.props.isIndexPoint && !prevProps.isIndexPoint) {\n        this.onStartDraw(transformedHandPos);\n        this.props.onStartDraw();\n      } else if (this.state.isDrawing && this.props.isIndexPoint && prevProps.isIndexPoint && this.props.handPos !== prevProps.handPos) {\n        this.onMoveFinger(transformedHandPos);\n      } else if (this.state.isDrawing && !this.props.isIndexPoint && prevProps.isIndexPoint) {\n        this.onEndDraw();\n        this.props.onEndDraw();\n      } else if (this.props.undoId > prevProps.undoId) {\n        this.undo();\n        this.props.onUndo();\n      } else if (this.props.clearId > prevProps.clearId) {\n        this.clear({\n          forUndo: false\n        });\n        this.props.onClear();\n      }\n    }\n  }\n\n  transform(handPos) {\n    return {\n      x: handPos.x - 340,\n      y: handPos.y - 100\n    };\n  }\n\n  onStartDraw(posEvent) {\n    const {\n      x,\n      y\n    } = posEvent;\n    const offsetData = {\n      x,\n      y\n    };\n    const newStrokeObj = {\n      color: this.props.selectedColor,\n      thickness: this.props.selectedThickness,\n      positions: [offsetData]\n    };\n    this.setState(prevState => ({\n      isDrawing: true,\n      prevPos: offsetData,\n      strokes: prevState.strokes.concat(newStrokeObj)\n    }));\n  }\n\n  onMoveFinger(posEvent) {\n    if (this.state.isDrawing) {\n      const {\n        x,\n        y\n      } = posEvent;\n      const offsetData = {\n        x,\n        y\n      };\n      const positionData = {\n        start: { ...this.state.prevPos\n        },\n        stop: { ...offsetData\n        }\n      };\n      let strokes = [...this.state.strokes];\n      const lastIndex = strokes.length - 1;\n      let lastStrokeObject = { ...strokes[lastIndex]\n      };\n      let positions = [...lastStrokeObject.positions];\n      positions.push(offsetData);\n      lastStrokeObject.positions = positions;\n      strokes[lastIndex] = lastStrokeObject;\n      this.setState(prevState => ({\n        line: prevState.line.concat(positionData),\n        strokes: strokes\n      }), () => this.paint(this.state.prevPos, offsetData, this.props.selectedColor, this.props.selectedThickness));\n    }\n  }\n\n  onEndDraw() {\n    this.setState({\n      isDrawing: false\n    });\n  }\n\n  paint(prevPos, currPos, color, thickness) {\n    const {\n      x,\n      y\n    } = currPos;\n    const {\n      x: prevX,\n      y: prevY\n    } = prevPos;\n    const ctx = this.getCtx();\n    ctx.beginPath();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = thickness;\n    ctx.moveTo(prevX, prevY);\n    ctx.lineTo(x, y);\n    ctx.stroke();\n    this.setState({\n      prevPos: {\n        x,\n        y\n      }\n    });\n  }\n\n  clear({\n    forUndo\n  }) {\n    console.log('clear');\n    const ctx = this.getCtx();\n    ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n    if (!forUndo) {\n      this.setState({\n        strokes: []\n      });\n    }\n  }\n\n  undo() {\n    console.log('undo');\n    this.clear({\n      forUndo: true\n    });\n    let strokes = [...this.state.strokes];\n    strokes.pop();\n    this.setState({\n      strokes: strokes\n    }, () => {\n      this.state.strokes.forEach(stroke => {\n        for (let i = 1; i < stroke.positions.length; i++) {\n          const prevPos = stroke.positions[i - 1];\n          const currPos = stroke.positions[i];\n          this.paint(prevPos, currPos, stroke.color, stroke.thickness);\n        }\n      });\n    });\n  }\n\n  getCtx() {\n    return this.state.ref.current.getContext('2d');\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Canvas-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Canvas-canvas\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          id: \"Canvas\",\n          ref: this.state.ref,\n          style: {\n            background: 'var(--offwhite)'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/Canvas.js"],"names":["React","Component","Canvas","constructor","props","ref","createRef","state","isDrawing","prevPos","x","y","line","strokes","canvasWidth","canvasHeight","componentDidMount","current","width","height","ctx","getCtx","lineJoin","lineCap","lineWidth","selectedThickness","componentDidUpdate","prevProps","isDrawer","transformedHandPos","transform","handPos","isIndexPoint","onStartDraw","onMoveFinger","onEndDraw","undoId","undo","onUndo","clearId","clear","forUndo","onClear","posEvent","offsetData","newStrokeObj","color","selectedColor","thickness","positions","setState","prevState","concat","positionData","start","stop","lastIndex","length","lastStrokeObject","push","paint","currPos","prevX","prevY","beginPath","strokeStyle","moveTo","lineTo","stroke","console","log","clearRect","pop","forEach","i","getContext","render","background"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,cAAP;;AAEA,eAAe,MAAMC,MAAN,SAAqBF,KAAK,CAACC,SAA3B,CAAqC;AAChDE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,QAAIC,GAAG,gBAAGL,KAAK,CAACM,SAAN,EAAV;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAE,KADF;AAETC,MAAAA,OAAO,EAAE;AACLC,QAAAA,CAAC,EAAE,CADE;AAELC,QAAAA,CAAC,EAAE;AAFE,OAFA;AAMTC,MAAAA,IAAI,EAAE,EANG;AAOTC,MAAAA,OAAO,EAAE,EAPA;AAOI;AACbR,MAAAA,GAAG,EAAEA;AARI,KAAb;AAUA,SAAKS,WAAL,GAAmB,IAAnB;AACA,SAAKC,YAAL,GAAoB,GAApB;AACH;;AACDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKT,KAAL,CAAWF,GAAX,CAAeY,OAAf,CAAuBC,KAAvB,GAA+B,KAAKJ,WAApC;AACA,SAAKP,KAAL,CAAWF,GAAX,CAAeY,OAAf,CAAuBE,MAAvB,GAAgC,KAAKJ,YAArC;AACA,UAAMK,GAAG,GAAG,KAAKC,MAAL,EAAZ;AACAD,IAAAA,GAAG,CAACE,QAAJ,GAAe,OAAf;AACAF,IAAAA,GAAG,CAACG,OAAJ,GAAc,OAAd;AACAH,IAAAA,GAAG,CAACI,SAAJ,GAAgB,KAAKpB,KAAL,CAAWqB,iBAA3B;AACH;;AACDC,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC1B,QAAI,KAAKvB,KAAL,CAAWwB,QAAf,EAAyB;AACrB,YAAMC,kBAAkB,GAAG,KAAKC,SAAL,CAAe,KAAK1B,KAAL,CAAW2B,OAA1B,CAA3B;;AACA,UAAI,CAAC,KAAKxB,KAAL,CAAWC,SAAZ,IAAyB,KAAKJ,KAAL,CAAW4B,YAApC,IAAoD,CAACL,SAAS,CAACK,YAAnE,EAAiF;AAC7E,aAAKC,WAAL,CAAiBJ,kBAAjB;AACA,aAAKzB,KAAL,CAAW6B,WAAX;AACH,OAHD,MAGO,IAAI,KAAK1B,KAAL,CAAWC,SAAX,IAAwB,KAAKJ,KAAL,CAAW4B,YAAnC,IAAmDL,SAAS,CAACK,YAA7D,IACP,KAAK5B,KAAL,CAAW2B,OAAX,KAAuBJ,SAAS,CAACI,OAD9B,EACuC;AAC1C,aAAKG,YAAL,CAAkBL,kBAAlB;AACH,OAHM,MAGA,IAAI,KAAKtB,KAAL,CAAWC,SAAX,IAAwB,CAAC,KAAKJ,KAAL,CAAW4B,YAApC,IAAoDL,SAAS,CAACK,YAAlE,EAAgF;AACnF,aAAKG,SAAL;AACA,aAAK/B,KAAL,CAAW+B,SAAX;AACH,OAHM,MAGA,IAAI,KAAK/B,KAAL,CAAWgC,MAAX,GAAoBT,SAAS,CAACS,MAAlC,EAA0C;AAC7C,aAAKC,IAAL;AACA,aAAKjC,KAAL,CAAWkC,MAAX;AACH,OAHM,MAGA,IAAI,KAAKlC,KAAL,CAAWmC,OAAX,GAAqBZ,SAAS,CAACY,OAAnC,EAA4C;AAC/C,aAAKC,KAAL,CAAW;AAACC,UAAAA,OAAO,EAAE;AAAV,SAAX;AACA,aAAKrC,KAAL,CAAWsC,OAAX;AACH;AACJ;AACJ;;AACDZ,EAAAA,SAAS,CAACC,OAAD,EAAU;AACf,WAAO;AACHrB,MAAAA,CAAC,EAAEqB,OAAO,CAACrB,CAAR,GAAY,GADZ;AAEHC,MAAAA,CAAC,EAAEoB,OAAO,CAACpB,CAAR,GAAY;AAFZ,KAAP;AAIH;;AACDsB,EAAAA,WAAW,CAACU,QAAD,EAAW;AAClB,UAAM;AAAEjC,MAAAA,CAAF;AAAKC,MAAAA;AAAL,QAAWgC,QAAjB;AACA,UAAMC,UAAU,GAAG;AAAClC,MAAAA,CAAD;AAAIC,MAAAA;AAAJ,KAAnB;AACA,UAAMkC,YAAY,GAAG;AACjBC,MAAAA,KAAK,EAAE,KAAK1C,KAAL,CAAW2C,aADD;AAEjBC,MAAAA,SAAS,EAAE,KAAK5C,KAAL,CAAWqB,iBAFL;AAGjBwB,MAAAA,SAAS,EAAE,CAACL,UAAD;AAHM,KAArB;AAKA,SAAKM,QAAL,CAAeC,SAAD,KAAgB;AAC1B3C,MAAAA,SAAS,EAAE,IADe;AAE1BC,MAAAA,OAAO,EAAEmC,UAFiB;AAG1B/B,MAAAA,OAAO,EAAEsC,SAAS,CAACtC,OAAV,CAAkBuC,MAAlB,CAAyBP,YAAzB;AAHiB,KAAhB,CAAd;AAKH;;AACDX,EAAAA,YAAY,CAACS,QAAD,EAAW;AACnB,QAAI,KAAKpC,KAAL,CAAWC,SAAf,EAA0B;AACtB,YAAM;AAAEE,QAAAA,CAAF;AAAKC,QAAAA;AAAL,UAAWgC,QAAjB;AACA,YAAMC,UAAU,GAAG;AAAElC,QAAAA,CAAF;AAAKC,QAAAA;AAAL,OAAnB;AACA,YAAM0C,YAAY,GAAG;AACjBC,QAAAA,KAAK,EAAE,EAAE,GAAG,KAAK/C,KAAL,CAAWE;AAAhB,SADU;AAEjB8C,QAAAA,IAAI,EAAE,EAAE,GAAGX;AAAL;AAFW,OAArB;AAIA,UAAI/B,OAAO,GAAG,CAAC,GAAG,KAAKN,KAAL,CAAWM,OAAf,CAAd;AACA,YAAM2C,SAAS,GAAG3C,OAAO,CAAC4C,MAAR,GAAiB,CAAnC;AACA,UAAIC,gBAAgB,GAAG,EAAC,GAAG7C,OAAO,CAAC2C,SAAD;AAAX,OAAvB;AACA,UAAIP,SAAS,GAAG,CAAC,GAAGS,gBAAgB,CAACT,SAArB,CAAhB;AACAA,MAAAA,SAAS,CAACU,IAAV,CAAef,UAAf;AACAc,MAAAA,gBAAgB,CAACT,SAAjB,GAA6BA,SAA7B;AACApC,MAAAA,OAAO,CAAC2C,SAAD,CAAP,GAAqBE,gBAArB;AACA,WAAKR,QAAL,CAAcC,SAAS,KAAK;AACxBvC,QAAAA,IAAI,EAAEuC,SAAS,CAACvC,IAAV,CAAewC,MAAf,CAAsBC,YAAtB,CADkB;AAExBxC,QAAAA,OAAO,EAAEA;AAFe,OAAL,CAAvB,EAGI,MAAM,KAAK+C,KAAL,CAAW,KAAKrD,KAAL,CAAWE,OAAtB,EAA+BmC,UAA/B,EAA2C,KAAKxC,KAAL,CAAW2C,aAAtD,EAAqE,KAAK3C,KAAL,CAAWqB,iBAAhF,CAHV;AAIH;AACJ;;AACDU,EAAAA,SAAS,GAAG;AACR,SAAKe,QAAL,CAAc;AACV1C,MAAAA,SAAS,EAAE;AADD,KAAd;AAGH;;AACDoD,EAAAA,KAAK,CAACnD,OAAD,EAAUoD,OAAV,EAAmBf,KAAnB,EAA0BE,SAA1B,EAAqC;AACtC,UAAM;AAAEtC,MAAAA,CAAF;AAAKC,MAAAA;AAAL,QAAWkD,OAAjB;AACA,UAAM;AAAEnD,MAAAA,CAAC,EAAEoD,KAAL;AAAYnD,MAAAA,CAAC,EAAEoD;AAAf,QAAyBtD,OAA/B;AAEA,UAAMW,GAAG,GAAG,KAAKC,MAAL,EAAZ;AACAD,IAAAA,GAAG,CAAC4C,SAAJ;AACA5C,IAAAA,GAAG,CAAC6C,WAAJ,GAAkBnB,KAAlB;AACA1B,IAAAA,GAAG,CAACI,SAAJ,GAAgBwB,SAAhB;AACA5B,IAAAA,GAAG,CAAC8C,MAAJ,CAAWJ,KAAX,EAAkBC,KAAlB;AACA3C,IAAAA,GAAG,CAAC+C,MAAJ,CAAWzD,CAAX,EAAcC,CAAd;AACAS,IAAAA,GAAG,CAACgD,MAAJ;AACA,SAAKlB,QAAL,CAAc;AACVzC,MAAAA,OAAO,EAAE;AACLC,QAAAA,CADK;AAELC,QAAAA;AAFK;AADC,KAAd;AAMH;;AACD6B,EAAAA,KAAK,CAAC;AAACC,IAAAA;AAAD,GAAD,EAAY;AACb4B,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,UAAMlD,GAAG,GAAG,KAAKC,MAAL,EAAZ;AACAD,IAAAA,GAAG,CAACmD,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoB,KAAKzD,WAAzB,EAAsC,KAAKC,YAA3C;;AACA,QAAI,CAAC0B,OAAL,EAAc;AACV,WAAKS,QAAL,CAAc;AACVrC,QAAAA,OAAO,EAAE;AADC,OAAd;AAGH;AACJ;;AACDwB,EAAAA,IAAI,GAAG;AACHgC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,SAAK9B,KAAL,CAAW;AAACC,MAAAA,OAAO,EAAE;AAAV,KAAX;AACA,QAAI5B,OAAO,GAAG,CAAC,GAAG,KAAKN,KAAL,CAAWM,OAAf,CAAd;AACAA,IAAAA,OAAO,CAAC2D,GAAR;AACA,SAAKtB,QAAL,CAAc;AACVrC,MAAAA,OAAO,EAAEA;AADC,KAAd,EAEG,MAAM;AACL,WAAKN,KAAL,CAAWM,OAAX,CAAmB4D,OAAnB,CAA2BL,MAAM,IAAI;AACjC,aAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,MAAM,CAACnB,SAAP,CAAiBQ,MAArC,EAA6CiB,CAAC,EAA9C,EAAkD;AAC9C,gBAAMjE,OAAO,GAAG2D,MAAM,CAACnB,SAAP,CAAiByB,CAAC,GAAC,CAAnB,CAAhB;AACA,gBAAMb,OAAO,GAAGO,MAAM,CAACnB,SAAP,CAAiByB,CAAjB,CAAhB;AACA,eAAKd,KAAL,CAAWnD,OAAX,EAAoBoD,OAApB,EAA6BO,MAAM,CAACtB,KAApC,EAA2CsB,MAAM,CAACpB,SAAlD;AACH;AACJ,OAND;AAOH,KAVD;AAWH;;AACD3B,EAAAA,MAAM,GAAG;AACL,WAAO,KAAKd,KAAL,CAAWF,GAAX,CAAeY,OAAf,CAAuB0D,UAAvB,CAAkC,IAAlC,CAAP;AACH;;AACDC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,+BACI;AACI,UAAA,EAAE,EAAC,QADP;AAEI,UAAA,GAAG,EAAE,KAAKrE,KAAL,CAAWF,GAFpB;AAGI,UAAA,KAAK,EAAE;AAAEwE,YAAAA,UAAU,EAAE;AAAd;AAHX;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAWH;;AAxJ+C","sourcesContent":["import React, { Component } from 'react';\nimport './Canvas.css';\n\nexport default class Canvas extends React.Component {\n    constructor(props) {\n        super(props);\n        let ref = React.createRef();\n        this.state = {\n            isDrawing: false,\n            prevPos: {\n                x: 0,\n                y: 0,\n            },\n            line: [],\n            strokes: [], // strokes[i] is stroke object, which contains color, thickness, and position fields\n            ref: ref,\n        };\n        this.canvasWidth = 1200;\n        this.canvasHeight = 800;\n    }\n    componentDidMount() {\n        this.state.ref.current.width = this.canvasWidth;\n        this.state.ref.current.height = this.canvasHeight;\n        const ctx = this.getCtx();\n        ctx.lineJoin = 'round';\n        ctx.lineCap = 'round';\n        ctx.lineWidth = this.props.selectedThickness; \n    }\n    componentDidUpdate(prevProps) {\n        if (this.props.isDrawer) {\n            const transformedHandPos = this.transform(this.props.handPos);\n            if (!this.state.isDrawing && this.props.isIndexPoint && !prevProps.isIndexPoint) {\n                this.onStartDraw(transformedHandPos);\n                this.props.onStartDraw();\n            } else if (this.state.isDrawing && this.props.isIndexPoint && prevProps.isIndexPoint && \n                this.props.handPos !== prevProps.handPos) {\n                this.onMoveFinger(transformedHandPos);\n            } else if (this.state.isDrawing && !this.props.isIndexPoint && prevProps.isIndexPoint) {\n                this.onEndDraw();\n                this.props.onEndDraw();\n            } else if (this.props.undoId > prevProps.undoId) {\n                this.undo();\n                this.props.onUndo();\n            } else if (this.props.clearId > prevProps.clearId) {\n                this.clear({forUndo: false});\n                this.props.onClear();\n            }\n        }\n    }\n    transform(handPos) {\n        return {\n            x: handPos.x - 340,\n            y: handPos.y - 100,\n        };\n    }\n    onStartDraw(posEvent) {\n        const { x, y } = posEvent;\n        const offsetData = {x, y};\n        const newStrokeObj = {\n            color: this.props.selectedColor,\n            thickness: this.props.selectedThickness,\n            positions: [offsetData],\n        };\n        this.setState((prevState) => ({\n            isDrawing: true,\n            prevPos: offsetData,\n            strokes: prevState.strokes.concat(newStrokeObj),\n        }));\n    }\n    onMoveFinger(posEvent) {\n        if (this.state.isDrawing) {\n            const { x, y } = posEvent;\n            const offsetData = { x, y };\n            const positionData = {\n                start: { ...this.state.prevPos },\n                stop: { ...offsetData },\n            };\n            let strokes = [...this.state.strokes];\n            const lastIndex = strokes.length - 1;\n            let lastStrokeObject = {...strokes[lastIndex]};\n            let positions = [...lastStrokeObject.positions];  \n            positions.push(offsetData);\n            lastStrokeObject.positions = positions;\n            strokes[lastIndex] = lastStrokeObject;\n            this.setState(prevState => ({\n                line: prevState.line.concat(positionData),\n                strokes: strokes\n            }), () => this.paint(this.state.prevPos, offsetData, this.props.selectedColor, this.props.selectedThickness));\n        }\n    }\n    onEndDraw() {\n        this.setState({\n            isDrawing: false,\n        });\n    }\n    paint(prevPos, currPos, color, thickness) {\n        const { x, y } = currPos;\n        const { x: prevX, y: prevY } = prevPos;\n\n        const ctx = this.getCtx();\n        ctx.beginPath();\n        ctx.strokeStyle = color;\n        ctx.lineWidth = thickness; \n        ctx.moveTo(prevX, prevY);\n        ctx.lineTo(x, y);\n        ctx.stroke();\n        this.setState({\n            prevPos: {\n                x,\n                y\n            },\n        });\n    }\n    clear({forUndo}) {\n        console.log('clear');\n        const ctx = this.getCtx();\n        ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n        if (!forUndo) {\n            this.setState({\n                strokes: [],\n            });\n        }\n    }\n    undo() {\n        console.log('undo');\n        this.clear({forUndo: true});\n        let strokes = [...this.state.strokes];\n        strokes.pop();\n        this.setState({\n            strokes: strokes,\n        }, () => {\n            this.state.strokes.forEach(stroke => {\n                for (let i = 1; i < stroke.positions.length; i++) {\n                    const prevPos = stroke.positions[i-1];\n                    const currPos = stroke.positions[i];\n                    this.paint(prevPos, currPos, stroke.color, stroke.thickness);\n                }\n            });\n        });\n    }\n    getCtx() {\n        return this.state.ref.current.getContext('2d');\n    }\n    render() {\n        return (\n            <div className='Canvas-container'>\n                <div className='Canvas-canvas'>\n                    <canvas\n                        id='Canvas'\n                        ref={this.state.ref}\n                        style={{ background: 'var(--offwhite)' }}\n                    />\n                </div>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}