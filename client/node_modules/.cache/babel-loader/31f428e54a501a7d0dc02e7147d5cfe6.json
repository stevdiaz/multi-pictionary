{"ast":null,"code":"var Frame = require('./frame'),\n    EventEmitter = require('events').EventEmitter;\n\nvar Event = function (data) {\n  this.type = data.type;\n  this.state = data.state;\n};\n\nexports.chooseProtocol = function (header) {\n  var protocol;\n\n  switch (header.version) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n      protocol = JSONProtocol(header);\n\n      protocol.sendBackground = function (connection, state) {\n        connection.send(protocol.encode({\n          background: state\n        }));\n      };\n\n      protocol.sendFocused = function (connection, state) {\n        connection.send(protocol.encode({\n          focused: state\n        }));\n      };\n\n      protocol.sendOptimizeHMD = function (connection, state) {\n        connection.send(protocol.encode({\n          optimizeHMD: state\n        }));\n      };\n\n      break;\n\n    default:\n      throw \"unrecognized version\";\n  }\n\n  return protocol;\n};\n\nvar JSONProtocol = exports.JSONProtocol = function (header) {\n  var protocol = function (frameData) {\n    if (frameData.event) {\n      return new Event(frameData.event);\n    } else {\n      protocol.emit('beforeFrameCreated', frameData);\n      var frame = new Frame(frameData);\n      protocol.emit('afterFrameCreated', frame, frameData);\n      return frame;\n    }\n  };\n\n  protocol.encode = function (message) {\n    return JSON.stringify(message);\n  };\n\n  protocol.version = header.version;\n  protocol.serviceVersion = header.serviceVersion;\n  protocol.versionLong = 'Version ' + header.version;\n  protocol.type = 'protocol';\n  Object.assign(protocol, EventEmitter.prototype);\n  return protocol;\n};","map":{"version":3,"sources":["/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/node_modules/leapjs/lib/protocol.js"],"names":["Frame","require","EventEmitter","Event","data","type","state","exports","chooseProtocol","header","protocol","version","JSONProtocol","sendBackground","connection","send","encode","background","sendFocused","focused","sendOptimizeHMD","optimizeHMD","frameData","event","emit","frame","message","JSON","stringify","serviceVersion","versionLong","Object","assign","prototype"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAAnB;AAAA,IACIC,YAAY,GAAGD,OAAO,CAAC,QAAD,CAAP,CAAkBC,YADrC;;AAGA,IAAIC,KAAK,GAAG,UAASC,IAAT,EAAe;AACzB,OAAKC,IAAL,GAAYD,IAAI,CAACC,IAAjB;AACA,OAAKC,KAAL,GAAaF,IAAI,CAACE,KAAlB;AACD,CAHD;;AAKAC,OAAO,CAACC,cAAR,GAAyB,UAASC,MAAT,EAAiB;AACxC,MAAIC,QAAJ;;AACA,UAAOD,MAAM,CAACE,OAAd;AACE,SAAK,CAAL;AACA,SAAK,CAAL;AACA,SAAK,CAAL;AACA,SAAK,CAAL;AACA,SAAK,CAAL;AACA,SAAK,CAAL;AACED,MAAAA,QAAQ,GAAGE,YAAY,CAACH,MAAD,CAAvB;;AACAC,MAAAA,QAAQ,CAACG,cAAT,GAA0B,UAASC,UAAT,EAAqBR,KAArB,EAA4B;AACpDQ,QAAAA,UAAU,CAACC,IAAX,CAAgBL,QAAQ,CAACM,MAAT,CAAgB;AAACC,UAAAA,UAAU,EAAEX;AAAb,SAAhB,CAAhB;AACD,OAFD;;AAGAI,MAAAA,QAAQ,CAACQ,WAAT,GAAuB,UAASJ,UAAT,EAAqBR,KAArB,EAA4B;AACjDQ,QAAAA,UAAU,CAACC,IAAX,CAAgBL,QAAQ,CAACM,MAAT,CAAgB;AAACG,UAAAA,OAAO,EAAEb;AAAV,SAAhB,CAAhB;AACD,OAFD;;AAGAI,MAAAA,QAAQ,CAACU,eAAT,GAA2B,UAASN,UAAT,EAAqBR,KAArB,EAA4B;AACrDQ,QAAAA,UAAU,CAACC,IAAX,CAAgBL,QAAQ,CAACM,MAAT,CAAgB;AAACK,UAAAA,WAAW,EAAEf;AAAd,SAAhB,CAAhB;AACD,OAFD;;AAGA;;AACF;AACE,YAAM,sBAAN;AAnBJ;;AAqBA,SAAOI,QAAP;AACD,CAxBD;;AA0BA,IAAIE,YAAY,GAAGL,OAAO,CAACK,YAAR,GAAuB,UAASH,MAAT,EAAiB;AAEzD,MAAIC,QAAQ,GAAG,UAASY,SAAT,EAAoB;AAEjC,QAAIA,SAAS,CAACC,KAAd,EAAqB;AAEnB,aAAO,IAAIpB,KAAJ,CAAUmB,SAAS,CAACC,KAApB,CAAP;AAED,KAJD,MAIO;AAELb,MAAAA,QAAQ,CAACc,IAAT,CAAc,oBAAd,EAAoCF,SAApC;AAEA,UAAIG,KAAK,GAAG,IAAIzB,KAAJ,CAAUsB,SAAV,CAAZ;AAEAZ,MAAAA,QAAQ,CAACc,IAAT,CAAc,mBAAd,EAAmCC,KAAnC,EAA0CH,SAA1C;AAEA,aAAOG,KAAP;AAED;AAEF,GAlBD;;AAoBAf,EAAAA,QAAQ,CAACM,MAAT,GAAkB,UAASU,OAAT,EAAkB;AAClC,WAAOC,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAP;AACD,GAFD;;AAGAhB,EAAAA,QAAQ,CAACC,OAAT,GAAmBF,MAAM,CAACE,OAA1B;AACAD,EAAAA,QAAQ,CAACmB,cAAT,GAA0BpB,MAAM,CAACoB,cAAjC;AACAnB,EAAAA,QAAQ,CAACoB,WAAT,GAAuB,aAAarB,MAAM,CAACE,OAA3C;AACAD,EAAAA,QAAQ,CAACL,IAAT,GAAgB,UAAhB;AAEA0B,EAAAA,MAAM,CAACC,MAAP,CAActB,QAAd,EAAwBR,YAAY,CAAC+B,SAArC;AAEA,SAAOvB,QAAP;AACD,CAjCD","sourcesContent":["var Frame = require('./frame')\n  , EventEmitter = require('events').EventEmitter;\n\nvar Event = function(data) {\n  this.type = data.type;\n  this.state = data.state;\n};\n\nexports.chooseProtocol = function(header) {\n  var protocol;\n  switch(header.version) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n      protocol = JSONProtocol(header);\n      protocol.sendBackground = function(connection, state) {\n        connection.send(protocol.encode({background: state}));\n      }\n      protocol.sendFocused = function(connection, state) {\n        connection.send(protocol.encode({focused: state}));\n      }\n      protocol.sendOptimizeHMD = function(connection, state) {\n        connection.send(protocol.encode({optimizeHMD: state}));\n      }\n      break;\n    default:\n      throw \"unrecognized version\";\n  }\n  return protocol;\n}\n\nvar JSONProtocol = exports.JSONProtocol = function(header) {\n\n  var protocol = function(frameData) {\n\n    if (frameData.event) {\n\n      return new Event(frameData.event);\n\n    } else {\n\n      protocol.emit('beforeFrameCreated', frameData);\n\n      var frame = new Frame(frameData);\n\n      protocol.emit('afterFrameCreated', frame, frameData);\n\n      return frame;\n\n    }\n\n  };\n\n  protocol.encode = function(message) {\n    return JSON.stringify(message);\n  };\n  protocol.version = header.version;\n  protocol.serviceVersion = header.serviceVersion;\n  protocol.versionLong = 'Version ' + header.version;\n  protocol.type = 'protocol';\n\n  Object.assign(protocol, EventEmitter.prototype);\n\n  return protocol;\n};\n\n\n"]},"metadata":{},"sourceType":"script"}