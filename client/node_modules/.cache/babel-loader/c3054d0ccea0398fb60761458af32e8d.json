{"ast":null,"code":"// const DEBUGSPEECH = false;\n// // debounce function taken from online implementation at https://www.educative.io/edpresso/how-to-use-the-debounce-function-in-javascript\n// function debounce(func, wait, immediate) {\n//     var timeout;\n//     return function executedFunction() {\n//       var context = this;\n//       var args = arguments;\n//       var later = function() {\n//         timeout = null;\n//         if (!immediate) func.apply(context, args);\n//       };\n//       var callNow = immediate && !timeout;\n//       clearTimeout(timeout);\n//       timeout = setTimeout(later, wait);\n//       if (callNow) func.apply(context, args);\n//     };\n// };\n// export const setupSpeech = (processSpeechCallBack) => {\n//     /*****************************************************************/\n//     /******** SPEECH RECOGNITION SETUP YOU CAN IGNORE ****************/\n//     /*****************************************************************/\n//     var debouncedProcessSpeech = debounce(processSpeechCallBack, 500);\n//     var recognition = new webkitSpeechRecognition();\n//     recognition.continuous = true;\n//     recognition.interimResults = true;\n//     recognition.onresult = function(event) {\n//         // Build the interim transcript, so we can process speech faster\n//         var transcript = '';\n//         var hasFinal = false;\n//         for (var i = event.resultIndex; i < event.results.length; ++i) {\n//             if (event.results[i].isFinal)\n//             hasFinal = true;\n//             else\n//             transcript += event.results[i][0].transcript;\n//         }\n//         if (DEBUGSPEECH) {\n//             if (hasFinal)\n//             otherFeedback.setContent(\"SPEECH DEBUG: ready\");\n//             else\n//             otherFeedback.setContent(\"SPEECH DEBUG: \" + transcript);\n//         }\n//         var processed = debouncedProcessSpeech(transcript);\n//         // If we reacted to speech, kill recognition and restart\n//         if (processed) {\n//             recognition.stop();\n//         }\n//     };\n//     // Restart recognition if it has stopped\n//     recognition.onend = function(event) {\n//     setTimeout(function() {\n//         if (DEBUGSPEECH)\n//         otherFeedback.setContent(\"SPEECH DEBUG: ready\");\n//         recognition.start();\n//     }, 1000);\n//     };\n//     recognition.start();\n//     /*****************************************************************/\n//     /******** END OF SPEECH RECOG SETUP ******************************/\n//     /*****************************************************************/\n// }","map":{"version":3,"sources":["/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/src/helpers/speechHelper.js"],"names":[],"mappings":"AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// const DEBUGSPEECH = false;\n\n// // debounce function taken from online implementation at https://www.educative.io/edpresso/how-to-use-the-debounce-function-in-javascript\n// function debounce(func, wait, immediate) {\n//     var timeout;\n  \n//     return function executedFunction() {\n//       var context = this;\n//       var args = arguments;\n          \n//       var later = function() {\n//         timeout = null;\n//         if (!immediate) func.apply(context, args);\n//       };\n  \n//       var callNow = immediate && !timeout;\n      \n//       clearTimeout(timeout);\n  \n//       timeout = setTimeout(later, wait);\n      \n//       if (callNow) func.apply(context, args);\n//     };\n// };\n\n// export const setupSpeech = (processSpeechCallBack) => {\n//     /*****************************************************************/\n//     /******** SPEECH RECOGNITION SETUP YOU CAN IGNORE ****************/\n//     /*****************************************************************/\n//     var debouncedProcessSpeech = debounce(processSpeechCallBack, 500);\n\n//     var recognition = new webkitSpeechRecognition();\n//     recognition.continuous = true;\n//     recognition.interimResults = true;\n//     recognition.onresult = function(event) {\n//         // Build the interim transcript, so we can process speech faster\n//         var transcript = '';\n//         var hasFinal = false;\n//         for (var i = event.resultIndex; i < event.results.length; ++i) {\n//             if (event.results[i].isFinal)\n//             hasFinal = true;\n//             else\n//             transcript += event.results[i][0].transcript;\n//         }\n\n//         if (DEBUGSPEECH) {\n//             if (hasFinal)\n//             otherFeedback.setContent(\"SPEECH DEBUG: ready\");\n//             else\n//             otherFeedback.setContent(\"SPEECH DEBUG: \" + transcript);\n//         }\n\n//         var processed = debouncedProcessSpeech(transcript);\n\n//         // If we reacted to speech, kill recognition and restart\n//         if (processed) {\n//             recognition.stop();\n//         }\n//     };\n//     // Restart recognition if it has stopped\n//     recognition.onend = function(event) {\n//     setTimeout(function() {\n//         if (DEBUGSPEECH)\n//         otherFeedback.setContent(\"SPEECH DEBUG: ready\");\n//         recognition.start();\n//     }, 1000);\n//     };\n//     recognition.start();\n//     /*****************************************************************/\n//     /******** END OF SPEECH RECOG SETUP ******************************/\n//     /*****************************************************************/\n// }"]},"metadata":{},"sourceType":"module"}