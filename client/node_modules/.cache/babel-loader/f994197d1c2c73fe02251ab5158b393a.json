{"ast":null,"code":"/**\n * Leap is the global namespace of the Leap API.\n * @namespace Leap\n */\nmodule.exports = {\n  Controller: require(\"./controller\"),\n  Frame: require(\"./frame\"),\n  Hand: require(\"./hand\"),\n  Pointable: require(\"./pointable\"),\n  Finger: require(\"./finger\"),\n  InteractionBox: require(\"./interaction_box\"),\n  CircularBuffer: require(\"./circular_buffer\"),\n  UI: require(\"./ui\"),\n  JSONProtocol: require(\"./protocol\").JSONProtocol,\n  glMatrix: require(\"gl-matrix\"),\n  mat3: require(\"gl-matrix\").mat3,\n  vec3: require(\"gl-matrix\").vec3,\n  loopController: undefined,\n  version: require('./version.js'),\n\n  /**\n   * Expose utility libraries for convenience\n   * Use carefully - they may be subject to upgrade or removal in different versions of LeapJS.\n   */\n  EventEmitter: require('events').EventEmitter,\n\n  /**\n   * The Leap.loop() function passes a frame of Leap data to your\n   * callback function and then calls window.requestAnimationFrame() after\n   * executing your callback function.\n   *\n   * Leap.loop() sets up the Leap controller and WebSocket connection for you.\n   * You do not need to create your own controller when using this method.\n   *\n   * Your callback function is called on an interval determined by the client\n   * browser. Typically, this is on an interval of 60 frames/second. The most\n   * recent frame of Leap data is passed to your callback function. If the Leap\n   * is producing frames at a slower rate than the browser frame rate, the same\n   * frame of Leap data can be passed to your function in successive animation\n   * updates.\n   *\n   * As an alternative, you can create your own Controller object and use a\n   * {@link Controller#onFrame onFrame} callback to process the data at\n   * the frame rate of the Leap device. See {@link Controller} for an\n   * example.\n   *\n   * @method Leap.loop\n   * @param {function} callback A function called when the browser is ready to\n   * draw to the screen. The most recent {@link Frame} object is passed to\n   * your callback function.\n   *\n   * ```javascript\n   *    Leap.loop( function( frame ) {\n   *        // ... your code here\n   *    })\n   * ```\n   */\n  loop: function (opts, callback) {\n    if (opts && callback === undefined && {}.toString.call(opts) === '[object Function]') {\n      callback = opts;\n      opts = {};\n    }\n\n    if (this.loopController) {\n      if (opts) {\n        this.loopController.setupFrameEvents(opts);\n      }\n    } else {\n      this.loopController = new this.Controller(opts);\n    }\n\n    this.loopController.loop(callback);\n    return this.loopController;\n  },\n\n  /*\n   * Convenience method for Leap.Controller.plugin\n   */\n  plugin: function (name, options) {\n    this.Controller.plugin(name, options);\n  }\n};","map":{"version":3,"sources":["/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/node_modules/leapjs/lib/index.js"],"names":["module","exports","Controller","require","Frame","Hand","Pointable","Finger","InteractionBox","CircularBuffer","UI","JSONProtocol","glMatrix","mat3","vec3","loopController","undefined","version","EventEmitter","loop","opts","callback","toString","call","setupFrameEvents","plugin","name","options"],"mappings":"AAAA;AACA;AACA;AACA;AACAA,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,UAAU,EAAEC,OAAO,CAAC,cAAD,CADJ;AAEfC,EAAAA,KAAK,EAAED,OAAO,CAAC,SAAD,CAFC;AAGfE,EAAAA,IAAI,EAAEF,OAAO,CAAC,QAAD,CAHE;AAIfG,EAAAA,SAAS,EAAEH,OAAO,CAAC,aAAD,CAJH;AAKfI,EAAAA,MAAM,EAAEJ,OAAO,CAAC,UAAD,CALA;AAMfK,EAAAA,cAAc,EAAEL,OAAO,CAAC,mBAAD,CANR;AAOfM,EAAAA,cAAc,EAAEN,OAAO,CAAC,mBAAD,CAPR;AAQfO,EAAAA,EAAE,EAAEP,OAAO,CAAC,MAAD,CARI;AASfQ,EAAAA,YAAY,EAAER,OAAO,CAAC,YAAD,CAAP,CAAsBQ,YATrB;AAUfC,EAAAA,QAAQ,EAAET,OAAO,CAAC,WAAD,CAVF;AAWfU,EAAAA,IAAI,EAAEV,OAAO,CAAC,WAAD,CAAP,CAAqBU,IAXZ;AAYfC,EAAAA,IAAI,EAAEX,OAAO,CAAC,WAAD,CAAP,CAAqBW,IAZZ;AAafC,EAAAA,cAAc,EAAEC,SAbD;AAcfC,EAAAA,OAAO,EAAEd,OAAO,CAAC,cAAD,CAdD;;AAgBf;AACF;AACA;AACA;AACEe,EAAAA,YAAY,EAAEf,OAAO,CAAC,QAAD,CAAP,CAAkBe,YApBjB;;AAsBf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,IAAI,EAAE,UAASC,IAAT,EAAeC,QAAf,EAAyB;AAC7B,QAAID,IAAI,IAAIC,QAAQ,KAAKL,SAArB,IAAsC,EAAD,CAAKM,QAAL,CAAcC,IAAd,CAAmBH,IAAnB,MAA6B,mBAAtE,EAA8F;AAC5FC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AAED,QAAI,KAAKL,cAAT,EAAyB;AACvB,UAAIK,IAAJ,EAAS;AACP,aAAKL,cAAL,CAAoBS,gBAApB,CAAqCJ,IAArC;AACD;AACF,KAJD,MAIK;AACH,WAAKL,cAAL,GAAsB,IAAI,KAAKb,UAAT,CAAoBkB,IAApB,CAAtB;AACD;;AAED,SAAKL,cAAL,CAAoBI,IAApB,CAAyBE,QAAzB;AACA,WAAO,KAAKN,cAAZ;AACD,GArEc;;AAuEf;AACF;AACA;AACEU,EAAAA,MAAM,EAAE,UAASC,IAAT,EAAeC,OAAf,EAAuB;AAC7B,SAAKzB,UAAL,CAAgBuB,MAAhB,CAAuBC,IAAvB,EAA6BC,OAA7B;AACD;AA5Ec,CAAjB","sourcesContent":["/**\n * Leap is the global namespace of the Leap API.\n * @namespace Leap\n */\nmodule.exports = {\n  Controller: require(\"./controller\"),\n  Frame: require(\"./frame\"),\n  Hand: require(\"./hand\"),\n  Pointable: require(\"./pointable\"),\n  Finger: require(\"./finger\"),\n  InteractionBox: require(\"./interaction_box\"),\n  CircularBuffer: require(\"./circular_buffer\"),\n  UI: require(\"./ui\"),\n  JSONProtocol: require(\"./protocol\").JSONProtocol,\n  glMatrix: require(\"gl-matrix\"),\n  mat3: require(\"gl-matrix\").mat3,\n  vec3: require(\"gl-matrix\").vec3,\n  loopController: undefined,\n  version: require('./version.js'),\n\n  /**\n   * Expose utility libraries for convenience\n   * Use carefully - they may be subject to upgrade or removal in different versions of LeapJS.\n   */\n  EventEmitter: require('events').EventEmitter,\n\n  /**\n   * The Leap.loop() function passes a frame of Leap data to your\n   * callback function and then calls window.requestAnimationFrame() after\n   * executing your callback function.\n   *\n   * Leap.loop() sets up the Leap controller and WebSocket connection for you.\n   * You do not need to create your own controller when using this method.\n   *\n   * Your callback function is called on an interval determined by the client\n   * browser. Typically, this is on an interval of 60 frames/second. The most\n   * recent frame of Leap data is passed to your callback function. If the Leap\n   * is producing frames at a slower rate than the browser frame rate, the same\n   * frame of Leap data can be passed to your function in successive animation\n   * updates.\n   *\n   * As an alternative, you can create your own Controller object and use a\n   * {@link Controller#onFrame onFrame} callback to process the data at\n   * the frame rate of the Leap device. See {@link Controller} for an\n   * example.\n   *\n   * @method Leap.loop\n   * @param {function} callback A function called when the browser is ready to\n   * draw to the screen. The most recent {@link Frame} object is passed to\n   * your callback function.\n   *\n   * ```javascript\n   *    Leap.loop( function( frame ) {\n   *        // ... your code here\n   *    })\n   * ```\n   */\n  loop: function(opts, callback) {\n    if (opts && callback === undefined &&  ( ({}).toString.call(opts) === '[object Function]' ) ) {\n      callback = opts;\n      opts = {};\n    }\n\n    if (this.loopController) {\n      if (opts){\n        this.loopController.setupFrameEvents(opts);\n      }\n    }else{\n      this.loopController = new this.Controller(opts);\n    }\n\n    this.loopController.loop(callback);\n    return this.loopController;\n  },\n\n  /*\n   * Convenience method for Leap.Controller.plugin\n   */\n  plugin: function(name, options){\n    this.Controller.plugin(name, options)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}