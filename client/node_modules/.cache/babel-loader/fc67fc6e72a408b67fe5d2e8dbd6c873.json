{"ast":null,"code":"var _jsxFileName = \"/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/src/components/Canvas.js\";\nimport React, { Component } from 'react';\nimport './Canvas.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Canvas extends React.Component {\n  constructor(props) {\n    super(props);\n    let ref = /*#__PURE__*/React.createRef();\n    this.state = {\n      isDrawing: false,\n      prevPos: {\n        x: 0,\n        y: 0\n      },\n      line: [],\n      strokes: [],\n      // strokes[i] is data for stroke i, which is a list where 0 index is color and the rest are offsetData\n      ref: ref\n    };\n    this.canvasWidth = 1200;\n    this.canvasHeight = 800;\n  }\n\n  componentDidMount() {\n    this.state.ref.current.width = this.canvasWidth;\n    this.state.ref.current.height = this.canvasHeight;\n    const ctx = this.getCtx();\n    ctx.lineJoin = 'round';\n    ctx.lineCap = 'round';\n    ctx.lineWidth = 5;\n  }\n\n  componentDidUpdate(prevProps) {\n    const transformedHandPos = this.transform(this.props.handPos);\n\n    if (!this.state.isDrawing && this.props.isIndexPoint && !prevProps.isIndexPoint) {\n      this.onStartDraw(transformedHandPos);\n      this.props.onStartDraw();\n    } else if (this.state.isDrawing && this.props.isIndexPoint && prevProps.isIndexPoint && this.props.handPos !== prevProps.handPos) {\n      this.onMoveFinger(transformedHandPos);\n    } else if (this.state.isDrawing && !this.props.isIndexPoint && prevProps.isIndexPoint) {\n      this.onEndDraw();\n      this.props.onEndDraw();\n    } else if (this.props.undoId > prevProps.undoId) {\n      this.undo();\n    } else if (this.props.clearId > prevProps.clearId) {\n      this.clear();\n    }\n  }\n\n  transform(handPos) {\n    return {\n      x: handPos.x - 350,\n      y: handPos.y - 100\n    };\n  }\n\n  onStartDraw(posEvent) {\n    const {\n      x,\n      y\n    } = posEvent;\n    const offsetData = {\n      x,\n      y\n    };\n    let strokes = [...this.state.strokes];\n    strokes.push([this.props.selectedColor, offsetData]);\n    this.setState({\n      isDrawing: true,\n      prevPos: offsetData,\n      strokes: strokes\n    });\n  }\n\n  onMoveFinger(posEvent) {\n    if (this.state.isDrawing) {\n      const {\n        x,\n        y\n      } = posEvent;\n      const offsetData = {\n        x,\n        y\n      };\n      const positionData = {\n        start: { ...this.state.prevPos\n        },\n        stop: { ...offsetData\n        }\n      };\n      let strokes = [...this.state.strokes];\n      const lastIndex = strokes.length - 1;\n      let lastStroke = [...strokes[lastIndex]];\n      lastStroke.push(offsetData);\n      strokes[lastIndex] = lastStroke;\n      this.setState(prevState => ({\n        line: prevState.line.concat(positionData),\n        strokes: strokes\n      }), () => this.paint(this.state.prevPos, offsetData, this.props.selectedColor));\n    }\n  }\n\n  onEndDraw() {\n    this.setState({\n      isDrawing: false\n    });\n  }\n\n  paint(prevPos, currPos, color) {\n    console.log(color);\n    const {\n      x,\n      y\n    } = currPos;\n    const {\n      x: prevX,\n      y: prevY\n    } = prevPos;\n    const ctx = this.getCtx();\n    ctx.beginPath();\n    ctx.strokeStyle = color;\n    ctx.moveTo(prevX, prevY);\n    ctx.lineTo(x, y);\n    ctx.stroke();\n    this.setState({\n      prevPos: {\n        x,\n        y\n      }\n    });\n  }\n\n  clear() {\n    console.log('clearing at canvas');\n    const ctx = this.getCtx();\n    ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    this.setState({\n      strokes: []\n    });\n  }\n\n  undo() {\n    console.log('undoing at canvas');\n    this.clear();\n    let strokes = [...this.state.strokes];\n    strokes.pop();\n    this.setState({\n      strokes: strokes\n    }, () => {\n      this.state.strokes.forEach(stroke => {\n        const strokeColor = 'black';\n\n        for (let i = 2; i < stroke.length; i++) {\n          const prevPos = stroke[i - 1];\n          const currPos = stroke[i];\n          this.paint(prevPos, currPos, strokeColor);\n        }\n      });\n    });\n  }\n\n  getCtx() {\n    return this.state.ref.current.getContext('2d');\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Canvas-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Canvas-canvas\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          id: \"Canvas\",\n          ref: this.state.ref,\n          style: {\n            background: 'var(--offwhite)'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/src/components/Canvas.js"],"names":["React","Component","Canvas","constructor","props","ref","createRef","state","isDrawing","prevPos","x","y","line","strokes","canvasWidth","canvasHeight","componentDidMount","current","width","height","ctx","getCtx","lineJoin","lineCap","lineWidth","componentDidUpdate","prevProps","transformedHandPos","transform","handPos","isIndexPoint","onStartDraw","onMoveFinger","onEndDraw","undoId","undo","clearId","clear","posEvent","offsetData","push","selectedColor","setState","positionData","start","stop","lastIndex","length","lastStroke","prevState","concat","paint","currPos","color","console","log","prevX","prevY","beginPath","strokeStyle","moveTo","lineTo","stroke","clearRect","pop","forEach","strokeColor","i","getContext","render","background"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Canvas.css';\n\nexport default class Canvas extends React.Component {\n    constructor(props) {\n        super(props);\n        let ref = React.createRef();\n        this.state = {\n            isDrawing: false,\n            prevPos: {\n                x: 0,\n                y: 0,\n            },\n            line: [],\n            strokes: [], // strokes[i] is data for stroke i, which is a list where 0 index is color and the rest are offsetData\n            ref: ref,\n        };\n        this.canvasWidth = 1200;\n        this.canvasHeight = 800;\n    }\n    componentDidMount() {\n        this.state.ref.current.width = this.canvasWidth;\n        this.state.ref.current.height = this.canvasHeight;\n        const ctx = this.getCtx();\n        ctx.lineJoin = 'round';\n        ctx.lineCap = 'round';\n        ctx.lineWidth = 5; \n    }\n    componentDidUpdate(prevProps) {\n        const transformedHandPos = this.transform(this.props.handPos);\n        if (!this.state.isDrawing && this.props.isIndexPoint && !prevProps.isIndexPoint) {\n            this.onStartDraw(transformedHandPos);\n            this.props.onStartDraw();\n        } else if (this.state.isDrawing && this.props.isIndexPoint && prevProps.isIndexPoint && \n            this.props.handPos !== prevProps.handPos) {\n            this.onMoveFinger(transformedHandPos);\n        } else if (this.state.isDrawing && !this.props.isIndexPoint && prevProps.isIndexPoint) {\n            this.onEndDraw();\n            this.props.onEndDraw();\n        } else if (this.props.undoId > prevProps.undoId) {\n            this.undo();\n        } else if (this.props.clearId > prevProps.clearId) {\n            this.clear();\n        }\n    }\n    transform(handPos) {\n        return {\n            x: handPos.x - 350,\n            y: handPos.y - 100,\n        };\n    }\n    onStartDraw(posEvent) {\n        const { x, y } = posEvent;\n        const offsetData = {x, y};\n        let strokes = [...this.state.strokes];\n        strokes.push([this.props.selectedColor, offsetData]);\n        this.setState({\n            isDrawing: true,\n            prevPos: offsetData,\n            strokes: strokes,\n        });\n    }\n    onMoveFinger(posEvent) {\n        if (this.state.isDrawing) {\n            const { x, y } = posEvent;\n            const offsetData = { x, y };\n            const positionData = {\n                start: { ...this.state.prevPos },\n                stop: { ...offsetData },\n            };\n            let strokes = [...this.state.strokes];\n            const lastIndex = strokes.length - 1;\n            let lastStroke = [...strokes[lastIndex]];\n            lastStroke.push(offsetData);\n            strokes[lastIndex] = lastStroke;\n            this.setState(prevState => ({\n                line: prevState.line.concat(positionData),\n                strokes: strokes\n            }), () => this.paint(this.state.prevPos, offsetData, this.props.selectedColor));\n        }\n    }\n    onEndDraw() {\n        this.setState({\n            isDrawing: false,\n        });\n    }\n    paint(prevPos, currPos, color) {\n        console.log(color);\n        const { x, y } = currPos;\n        const { x: prevX, y: prevY } = prevPos;\n\n        const ctx = this.getCtx();\n        ctx.beginPath();\n        ctx.strokeStyle = color;\n        ctx.moveTo(prevX, prevY);\n        ctx.lineTo(x, y);\n        ctx.stroke();\n        this.setState({\n            prevPos: {\n                x,\n                y\n            },\n        });\n    }\n    clear() {\n        console.log('clearing at canvas');\n        const ctx = this.getCtx();\n        ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n        this.setState({\n            strokes: [],\n        });\n    }\n    undo() {\n        console.log('undoing at canvas');\n        this.clear();\n        let strokes = [...this.state.strokes];\n        strokes.pop();\n        this.setState({\n            strokes: strokes,\n        }, () => {\n            this.state.strokes.forEach(stroke => {\n                const strokeColor = 'black';\n                for (let i = 2; i < stroke.length; i++) {\n                    const prevPos = stroke[i-1];\n                    const currPos = stroke[i];\n                    this.paint(prevPos, currPos, strokeColor);\n                }\n            });\n        });\n    }\n    getCtx() {\n        return this.state.ref.current.getContext('2d');\n    }\n    render() {\n        return (\n            <div className='Canvas-container'>\n                <div className='Canvas-canvas'>\n                    <canvas\n                        id='Canvas'\n                        ref={this.state.ref}\n                        style={{ background: 'var(--offwhite)' }}\n                    />\n                </div>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}