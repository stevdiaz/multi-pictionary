{"ast":null,"code":"const DEBUGSPEECH = false;\nexport const setupSpeech = processSpeechCallBack => {\n  /*****************************************************************/\n\n  /******** SPEECH RECOGNITION SETUP YOU CAN IGNORE ****************/\n\n  /*****************************************************************/\n  var debouncedProcessSpeech = _.debounce(processSpeech, 500);\n\n  var recognition = new webkitSpeechRecognition();\n  recognition.continuous = true;\n  recognition.interimResults = true;\n\n  recognition.onresult = function (event) {\n    // Build the interim transcript, so we can process speech faster\n    var transcript = '';\n    var hasFinal = false;\n\n    for (var i = event.resultIndex; i < event.results.length; ++i) {\n      if (event.results[i].isFinal) hasFinal = true;else transcript += event.results[i][0].transcript;\n    }\n\n    if (DEBUGSPEECH) {\n      if (hasFinal) otherFeedback.setContent(\"SPEECH DEBUG: ready\");else otherFeedback.setContent(\"SPEECH DEBUG: \" + transcript);\n    }\n\n    var processed = debouncedProcessSpeech(transcript); // If we reacted to speech, kill recognition and restart\n\n    if (processed) {\n      recognition.stop();\n    }\n  }; // Restart recognition if it has stopped\n\n\n  recognition.onend = function (event) {\n    setTimeout(function () {\n      if (DEBUGSPEECH) otherFeedback.setContent(\"SPEECH DEBUG: ready\");\n      recognition.start();\n    }, 1000);\n  };\n\n  recognition.start();\n  /*****************************************************************/\n\n  /******** END OF SPEECH RECOG SETUP ******************************/\n\n  /*****************************************************************/\n};","map":{"version":3,"sources":["/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/src/helpers/speechHelper.js"],"names":["DEBUGSPEECH","setupSpeech","processSpeechCallBack","debouncedProcessSpeech","_","debounce","processSpeech","recognition","webkitSpeechRecognition","continuous","interimResults","onresult","event","transcript","hasFinal","i","resultIndex","results","length","isFinal","otherFeedback","setContent","processed","stop","onend","setTimeout","start"],"mappings":"AAAA,MAAMA,WAAW,GAAG,KAApB;AACA,OAAO,MAAMC,WAAW,GAAIC,qBAAD,IAA2B;AAClD;;AACA;;AACA;AACA,MAAIC,sBAAsB,GAAGC,CAAC,CAACC,QAAF,CAAWC,aAAX,EAA0B,GAA1B,CAA7B;;AAEA,MAAIC,WAAW,GAAG,IAAIC,uBAAJ,EAAlB;AACAD,EAAAA,WAAW,CAACE,UAAZ,GAAyB,IAAzB;AACAF,EAAAA,WAAW,CAACG,cAAZ,GAA6B,IAA7B;;AACAH,EAAAA,WAAW,CAACI,QAAZ,GAAuB,UAASC,KAAT,EAAgB;AACnC;AACA,QAAIC,UAAU,GAAG,EAAjB;AACA,QAAIC,QAAQ,GAAG,KAAf;;AACA,SAAK,IAAIC,CAAC,GAAGH,KAAK,CAACI,WAAnB,EAAgCD,CAAC,GAAGH,KAAK,CAACK,OAAN,CAAcC,MAAlD,EAA0D,EAAEH,CAA5D,EAA+D;AAC3D,UAAIH,KAAK,CAACK,OAAN,CAAcF,CAAd,EAAiBI,OAArB,EACAL,QAAQ,GAAG,IAAX,CADA,KAGAD,UAAU,IAAID,KAAK,CAACK,OAAN,CAAcF,CAAd,EAAiB,CAAjB,EAAoBF,UAAlC;AACH;;AAED,QAAIb,WAAJ,EAAiB;AACb,UAAIc,QAAJ,EACAM,aAAa,CAACC,UAAd,CAAyB,qBAAzB,EADA,KAGAD,aAAa,CAACC,UAAd,CAAyB,mBAAmBR,UAA5C;AACH;;AAED,QAAIS,SAAS,GAAGnB,sBAAsB,CAACU,UAAD,CAAtC,CAlBmC,CAoBnC;;AACA,QAAIS,SAAJ,EAAe;AACXf,MAAAA,WAAW,CAACgB,IAAZ;AACH;AACJ,GAxBD,CATkD,CAkClD;;;AACAhB,EAAAA,WAAW,CAACiB,KAAZ,GAAoB,UAASZ,KAAT,EAAgB;AACpCa,IAAAA,UAAU,CAAC,YAAW;AAClB,UAAIzB,WAAJ,EACAoB,aAAa,CAACC,UAAd,CAAyB,qBAAzB;AACAd,MAAAA,WAAW,CAACmB,KAAZ;AACH,KAJS,EAIP,IAJO,CAAV;AAKC,GAND;;AAOAnB,EAAAA,WAAW,CAACmB,KAAZ;AACA;;AACA;;AACA;AACH,CA9CM","sourcesContent":["const DEBUGSPEECH = false;\nexport const setupSpeech = (processSpeechCallBack) => {\n    /*****************************************************************/\n    /******** SPEECH RECOGNITION SETUP YOU CAN IGNORE ****************/\n    /*****************************************************************/\n    var debouncedProcessSpeech = _.debounce(processSpeech, 500);\n\n    var recognition = new webkitSpeechRecognition();\n    recognition.continuous = true;\n    recognition.interimResults = true;\n    recognition.onresult = function(event) {\n        // Build the interim transcript, so we can process speech faster\n        var transcript = '';\n        var hasFinal = false;\n        for (var i = event.resultIndex; i < event.results.length; ++i) {\n            if (event.results[i].isFinal)\n            hasFinal = true;\n            else\n            transcript += event.results[i][0].transcript;\n        }\n\n        if (DEBUGSPEECH) {\n            if (hasFinal)\n            otherFeedback.setContent(\"SPEECH DEBUG: ready\");\n            else\n            otherFeedback.setContent(\"SPEECH DEBUG: \" + transcript);\n        }\n\n        var processed = debouncedProcessSpeech(transcript);\n\n        // If we reacted to speech, kill recognition and restart\n        if (processed) {\n            recognition.stop();\n        }\n    };\n    // Restart recognition if it has stopped\n    recognition.onend = function(event) {\n    setTimeout(function() {\n        if (DEBUGSPEECH)\n        otherFeedback.setContent(\"SPEECH DEBUG: ready\");\n        recognition.start();\n    }, 1000);\n    };\n    recognition.start();\n    /*****************************************************************/\n    /******** END OF SPEECH RECOG SETUP ******************************/\n    /*****************************************************************/\n}"]},"metadata":{},"sourceType":"module"}