{"ast":null,"code":"var Pointable = require('./pointable'),\n    glMatrix = require(\"gl-matrix\"),\n    vec3 = glMatrix.vec3,\n    mat3 = glMatrix.mat3,\n    mat4 = glMatrix.mat4;\n\nvar Bone = module.exports = function (finger, data) {\n  this.finger = finger;\n  this._center = null, this._matrix = null;\n  /**\n  * An integer code for the name of this bone.\n  *\n  * * 0 -- metacarpal\n  * * 1 -- proximal\n  * * 2 -- medial\n  * * 3 -- distal\n  * * 4 -- arm\n  *\n  * @member type\n  * @type {number}\n  * @memberof Leap.Bone.prototype\n  */\n\n  this.type = data.type;\n  /**\n   * The position of the previous, or base joint of the bone closer to the wrist.\n   * @type {vector3}\n   */\n\n  this.prevJoint = data.prevJoint;\n  /**\n   * The position of the next joint, or the end of the bone closer to the finger tip.\n   * @type {vector3}\n   */\n\n  this.nextJoint = data.nextJoint;\n  /**\n   * The estimated width of the pointable in millimeters.\n   *\n   * The reported width is the average width of the visible portion of the\n   * pointable from the hand to the tip. If the width isn't known,\n   * then a value of 0 is returned.\n   *\n   * Bone objects representing fingers do not have a width property.\n   *\n   * @member width\n   * @type {number}\n   * @memberof Leap.Pointable.prototype\n   */\n\n  this.width = data.width;\n  var displacement = new Array(3);\n  vec3.sub(displacement, data.nextJoint, data.prevJoint);\n  this.length = vec3.length(displacement);\n  /**\n   *\n   * These fully-specify the orientation of the bone.\n   * See examples/threejs-bones.html for more info\n   * Three vec3s:\n   *  x (red): The rotation axis of the finger, pointing outwards.  (In general, away from the thumb )\n   *  y (green): The \"up\" vector, orienting the top of the finger\n   *  z (blue): The roll axis of the bone.\n   *\n   *  Most up vectors will be pointing the same direction, except for the thumb, which is more rightwards.\n   *\n   *  The thumb has one fewer bones than the fingers, but there are the same number of joints & joint-bases provided\n   *  the first two appear in the same position, but only the second (proximal) rotates.\n   *\n   *  Normalized.\n   */\n\n  this.basis = data.basis;\n};\n\nBone.prototype.left = function () {\n  if (this._left) return this._left;\n  this._left = mat3.determinant(this.basis[0].concat(this.basis[1]).concat(this.basis[2])) < 0;\n  return this._left;\n};\n/**\n * The Affine transformation matrix describing the orientation of the bone, in global Leap-space.\n * It contains a 3x3 rotation matrix (in the \"top left\"), and center coordinates in the fourth column.\n *\n * Unlike the basis, the right and left hands have the same coordinate system.\n *\n */\n\n\nBone.prototype.matrix = function () {\n  if (this._matrix) return this._matrix;\n  var b = this.basis,\n      t = this._matrix = mat4.create(); // open transform mat4 from rotation mat3\n\n  t[0] = b[0][0], t[1] = b[0][1], t[2] = b[0][2];\n  t[4] = b[1][0], t[5] = b[1][1], t[6] = b[1][2];\n  t[8] = b[2][0], t[9] = b[2][1], t[10] = b[2][2];\n  t[3] = this.center()[0];\n  t[7] = this.center()[1];\n  t[11] = this.center()[2];\n\n  if (this.left()) {\n    // flip the basis to be right-handed\n    t[0] *= -1;\n    t[1] *= -1;\n    t[2] *= -1;\n  }\n\n  return this._matrix;\n};\n/**\n * Helper method to linearly interpolate between the two ends of the bone.\n *\n * when t = 0, the position of prevJoint will be returned\n * when t = 1, the position of nextJoint will be returned\n */\n\n\nBone.prototype.lerp = function (out, t) {\n  vec3.lerp(out, this.prevJoint, this.nextJoint, t);\n};\n/**\n *\n * The center position of the bone\n * Returns a vec3 array.\n *\n */\n\n\nBone.prototype.center = function () {\n  if (this._center) return this._center;\n  var center = vec3.create();\n  this.lerp(center, 0.5);\n  this._center = center;\n  return center;\n}; // The negative of the z-basis\n\n\nBone.prototype.direction = function () {\n  return [this.basis[2][0] * -1, this.basis[2][1] * -1, this.basis[2][2] * -1];\n};","map":{"version":3,"sources":["/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/node_modules/leapjs/lib/bone.js"],"names":["Pointable","require","glMatrix","vec3","mat3","mat4","Bone","module","exports","finger","data","_center","_matrix","type","prevJoint","nextJoint","width","displacement","Array","sub","length","basis","prototype","left","_left","determinant","concat","matrix","b","t","create","center","lerp","out","direction"],"mappings":"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","sourcesContent":["var Pointable = require('./pointable')\n  , glMatrix = require(\"gl-matrix\")\n  , vec3 = glMatrix.vec3\n  , mat3 = glMatrix.mat3\n  , mat4 = glMatrix.mat4;\n\n\nvar Bone = module.exports = function(finger, data) {\n  this.finger = finger;\n\n  this._center = null, this._matrix = null;\n\n  /**\n  * An integer code for the name of this bone.\n  *\n  * * 0 -- metacarpal\n  * * 1 -- proximal\n  * * 2 -- medial\n  * * 3 -- distal\n  * * 4 -- arm\n  *\n  * @member type\n  * @type {number}\n  * @memberof Leap.Bone.prototype\n  */\n  this.type = data.type;\n\n  /**\n   * The position of the previous, or base joint of the bone closer to the wrist.\n   * @type {vector3}\n   */\n  this.prevJoint = data.prevJoint;\n\n  /**\n   * The position of the next joint, or the end of the bone closer to the finger tip.\n   * @type {vector3}\n   */\n  this.nextJoint = data.nextJoint;\n\n  /**\n   * The estimated width of the pointable in millimeters.\n   *\n   * The reported width is the average width of the visible portion of the\n   * pointable from the hand to the tip. If the width isn't known,\n   * then a value of 0 is returned.\n   *\n   * Bone objects representing fingers do not have a width property.\n   *\n   * @member width\n   * @type {number}\n   * @memberof Leap.Pointable.prototype\n   */\n  this.width = data.width;\n\n  var displacement = new Array(3);\n  vec3.sub(displacement, data.nextJoint, data.prevJoint);\n\n  this.length = vec3.length(displacement);\n\n\n  /**\n   *\n   * These fully-specify the orientation of the bone.\n   * See examples/threejs-bones.html for more info\n   * Three vec3s:\n   *  x (red): The rotation axis of the finger, pointing outwards.  (In general, away from the thumb )\n   *  y (green): The \"up\" vector, orienting the top of the finger\n   *  z (blue): The roll axis of the bone.\n   *\n   *  Most up vectors will be pointing the same direction, except for the thumb, which is more rightwards.\n   *\n   *  The thumb has one fewer bones than the fingers, but there are the same number of joints & joint-bases provided\n   *  the first two appear in the same position, but only the second (proximal) rotates.\n   *\n   *  Normalized.\n   */\n  this.basis = data.basis;\n};\n\nBone.prototype.left = function(){\n\n  if (this._left) return this._left;\n\n  this._left =  mat3.determinant(this.basis[0].concat(this.basis[1]).concat(this.basis[2])) < 0;\n\n  return this._left;\n\n};\n\n\n/**\n * The Affine transformation matrix describing the orientation of the bone, in global Leap-space.\n * It contains a 3x3 rotation matrix (in the \"top left\"), and center coordinates in the fourth column.\n *\n * Unlike the basis, the right and left hands have the same coordinate system.\n *\n */\nBone.prototype.matrix = function(){\n\n  if (this._matrix) return this._matrix;\n\n  var b = this.basis,\n      t = this._matrix = mat4.create();\n\n  // open transform mat4 from rotation mat3\n  t[0] = b[0][0], t[1] = b[0][1], t[2]  = b[0][2];\n  t[4] = b[1][0], t[5] = b[1][1], t[6]  = b[1][2];\n  t[8] = b[2][0], t[9] = b[2][1], t[10] = b[2][2];\n\n  t[3] = this.center()[0];\n  t[7] = this.center()[1];\n  t[11] = this.center()[2];\n\n  if ( this.left() ) {\n    // flip the basis to be right-handed\n    t[0] *= -1;\n    t[1] *= -1;\n    t[2] *= -1;\n  }\n\n  return this._matrix;\n};\n\n/**\n * Helper method to linearly interpolate between the two ends of the bone.\n *\n * when t = 0, the position of prevJoint will be returned\n * when t = 1, the position of nextJoint will be returned\n */\nBone.prototype.lerp = function(out, t){\n\n  vec3.lerp(out, this.prevJoint, this.nextJoint, t);\n\n};\n\n/**\n *\n * The center position of the bone\n * Returns a vec3 array.\n *\n */\nBone.prototype.center = function(){\n\n  if (this._center) return this._center;\n\n  var center = vec3.create();\n  this.lerp(center, 0.5);\n  this._center = center;\n  return center;\n\n};\n\n// The negative of the z-basis\nBone.prototype.direction = function(){\n\n return [\n   this.basis[2][0] * -1,\n   this.basis[2][1] * -1,\n   this.basis[2][2] * -1\n ];\n\n};\n"]},"metadata":{},"sourceType":"script"}