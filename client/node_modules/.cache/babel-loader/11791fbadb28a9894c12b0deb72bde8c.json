{"ast":null,"code":"var _jsxFileName = \"/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/src/components/Cursor.js\";\nimport React, { Component } from 'react';\nimport './Cursor.css';\nimport Leap from 'leapjs';\nimport 'leapjs-plugins';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Cursor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isGrabbing: false,\n      isPointing: false,\n      isCircular: false,\n      position: {\n        x: 0,\n        y: 0\n      }\n    };\n    this.grabThreshold = 0.8;\n    this.flatThreshold = 0.3;\n    this.lastCircularDetection = 0;\n    this.miminumCircularSeparation = 700; //ms\n  }\n\n  componentDidMount() {\n    this.leapController = Leap.loop({\n      enableGestures: true\n    }, frame => this.onLeapFrame(frame));\n    this.leapController.use('screenPosition', {\n      scale: 0.6,\n      positioning: 'absolute'\n    });\n    this.leapController.connect();\n  }\n\n  componentDidUpdate() {}\n\n  onLeapFrame(frame) {\n    if (frame.hands.length > 0) {\n      const hand = frame.hands[0];\n      const handPosition = hand.screenPosition();\n      this.setState({\n        position: {\n          x: handPosition[0] + 200,\n          y: handPosition[1] + 300\n        }\n      });\n\n      if (hand.grabStrength > this.grabThreshold) {\n        if (!this.state.isGrabbing) {\n          this.setState({\n            isGrabbing: true\n          });\n        }\n\n        this.props.onHandGrabUpdate(true);\n      } else if (hand.grabStrength < this.flatThreshold) {\n        if (this.state.isGrabbing) {\n          this.setState({\n            isGrabbing: false\n          });\n        }\n\n        this.props.onHandGrabUpdate(false);\n      }\n\n      const isPointing = this.onlyIndexFingerExtended(hand); // update this whenever we stop pointing (so we can't undo right away)\n\n      if (this.state.isPointing && !isPointing) {\n        this.lastCircularDetection = Date.now();\n      }\n\n      this.setState({\n        isPointing: isPointing\n      });\n      this.props.onPointUpdate(isPointing, this.state.position);\n      const isCircular = this.circularGesture(hand, frame.data.gestures);\n\n      if (isCircular) {\n        console.log('is circular!!');\n      }\n\n      this.setState({\n        isCircular: isCircular\n      });\n      this.props.onCircularUpdate(isCircular);\n    }\n  }\n\n  onlyIndexFingerExtended(hand) {\n    return hand.indexFinger.extended && !hand.ringFinger.extended && !hand.pinky.extended && !hand.thumb.extended && !hand.middleFinger.extended;\n  }\n\n  allFingersExtended(hand) {\n    return hand.indexFinger.extended && hand.ringFinger.extended && hand.pinky.extended && hand.middleFinger.extended;\n  }\n\n  circularGesture(hand, gestures) {\n    const circleGesture = gestures.filter(gesture => gesture.type === 'circle');\n    const diffTimeMS = Math.abs(Date.now() - this.lastCircularDetection);\n    const isCircular = this.allFingersExtended(hand) && circleGesture.length == 1 && diffTimeMS > this.miminumCircularSeparation;\n\n    if (isCircular) {\n      this.lastCircularDetection = Date.now();\n      return true;\n    }\n\n    return false;\n  }\n\n  onLeapGesture(gesture) {\n    console.log(gesture.type);\n  }\n\n  render() {\n    var className = 'Cursor-cursor';\n\n    if (this.state.isGrabbing) {\n      className += ' Cursor-cursorGrab';\n    } else if (this.state.isPointing) {\n      className += ' Cursor-cursorPoint';\n    } else {\n      className += ' Cursor-cursorNormal';\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: className,\n      style: {\n        left: `${this.state.position.x}px`,\n        top: `${this.state.position.y}px`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/src/components/Cursor.js"],"names":["React","Component","Leap","Cursor","constructor","props","state","isGrabbing","isPointing","isCircular","position","x","y","grabThreshold","flatThreshold","lastCircularDetection","miminumCircularSeparation","componentDidMount","leapController","loop","enableGestures","frame","onLeapFrame","use","scale","positioning","connect","componentDidUpdate","hands","length","hand","handPosition","screenPosition","setState","grabStrength","onHandGrabUpdate","onlyIndexFingerExtended","Date","now","onPointUpdate","circularGesture","data","gestures","console","log","onCircularUpdate","indexFinger","extended","ringFinger","pinky","thumb","middleFinger","allFingersExtended","circleGesture","filter","gesture","type","diffTimeMS","Math","abs","onLeapGesture","render","className","left","top"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Cursor.css';\n\nimport Leap from 'leapjs';\nimport 'leapjs-plugins'\n\nexport default class Cursor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isGrabbing: false,\n            isPointing: false,\n            isCircular: false,\n            position: {\n                x: 0,\n                y: 0,\n            },\n        };\n        this.grabThreshold = 0.8;\n        this.flatThreshold = 0.3;\n        this.lastCircularDetection = 0;\n        this.miminumCircularSeparation = 700; //ms\n    }\n    componentDidMount() {\n        this.leapController = Leap.loop({enableGestures: true}, (frame) => this.onLeapFrame(frame));\n        this.leapController.use('screenPosition', {scale: 0.6, positioning: 'absolute'});\n        this.leapController.connect();\n    }\n    componentDidUpdate() {\n\n    }\n    onLeapFrame(frame) {\n        if (frame.hands.length > 0) {\n            const hand = frame.hands[0];\n            const handPosition = hand.screenPosition();\n            this.setState({position: {x: handPosition[0] + 200, y: handPosition[1] + 300}});\n            if (hand.grabStrength > this.grabThreshold) {\n                if (!this.state.isGrabbing) {\n                    this.setState({\n                        isGrabbing: true,\n                    });\n                }\n                this.props.onHandGrabUpdate(true);\n            } else if (hand.grabStrength < this.flatThreshold) {\n                if (this.state.isGrabbing) {\n                    this.setState({\n                        isGrabbing: false,\n                    });\n                }\n                this.props.onHandGrabUpdate(false);\n            }\n            const isPointing = this.onlyIndexFingerExtended(hand);\n            // update this whenever we stop pointing (so we can't undo right away)\n            if (this.state.isPointing && !isPointing) {\n                this.lastCircularDetection = Date.now();\n            }\n            this.setState({\n                isPointing: isPointing,\n            });\n            this.props.onPointUpdate(isPointing, this.state.position);\n\n            const isCircular = this.circularGesture(hand, frame.data.gestures);\n            if (isCircular) {\n                console.log('is circular!!');\n            }\n            this.setState({\n                isCircular: isCircular,\n            });\n            this.props.onCircularUpdate(isCircular);\n        }\n    }\n    onlyIndexFingerExtended(hand) {\n        return (hand.indexFinger.extended && !hand.ringFinger.extended && !hand.pinky.extended && !hand.thumb.extended && !hand.middleFinger.extended);\n    }\n    allFingersExtended(hand) {\n        return (hand.indexFinger.extended && hand.ringFinger.extended && hand.pinky.extended && hand.middleFinger.extended);\n    }\n    circularGesture(hand, gestures) {\n        const circleGesture = gestures.filter(gesture => gesture.type === 'circle');\n        const diffTimeMS = Math.abs(Date.now() - this.lastCircularDetection);\n        const isCircular = this.allFingersExtended(hand) && circleGesture.length == 1 && diffTimeMS > this.miminumCircularSeparation;\n        if (isCircular) {\n            this.lastCircularDetection = Date.now();\n            return true;\n        } \n        return false;\n    }\n    onLeapGesture(gesture) {\n        console.log(gesture.type);\n    }\n    render() {\n        var className = 'Cursor-cursor';\n        if (this.state.isGrabbing) {\n            className += ' Cursor-cursorGrab';\n        } else if (this.state.isPointing) {\n            className += ' Cursor-cursorPoint';\n        } else {\n            className += ' Cursor-cursorNormal';\n        }\n        return (\n            <div className={className} style={{left: `${this.state.position.x}px`, top: `${this.state.position.y}px`}}/>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}