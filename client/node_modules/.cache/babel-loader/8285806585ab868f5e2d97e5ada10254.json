{"ast":null,"code":"var _jsxFileName = \"/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/src/components/Canvas.js\";\nimport React, { Component } from 'react';\nimport './Canvas.css';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Canvas extends React.Component {\n  constructor(props) {\n    super(props);\n    let ref = /*#__PURE__*/React.createRef();\n    this.state = {\n      isDrawing: false,\n      prevPos: {\n        x: 0,\n        y: 0\n      },\n      line: [],\n      strokes: [],\n      ref: ref\n    };\n    this.canvasWidth = 1200;\n    this.canvasHeight = 800;\n  }\n\n  componentDidMount() {\n    this.state.ref.current.width = this.canvasWidth;\n    this.state.ref.current.height = this.canvasHeight;\n    const ctx = this.getCtx();\n    ctx.lineJoin = 'round';\n    ctx.lineCap = 'round';\n    ctx.lineWidth = 5;\n    const commands = this.getCommands();\n    const {\n      transcript\n    } = useSpeechRecognition({\n      commands\n    });\n    SpeechRecognition.startListening({\n      continuous: true\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const transformedHandPos = this.transform(this.props.handPos);\n\n    if (!this.state.isDrawing && this.props.isIndexPoint && !prevProps.isIndexPoint) {\n      this.onStartDraw(transformedHandPos);\n      this.props.onStartDraw();\n    } else if (this.state.isDrawing && this.props.isIndexPoint && prevProps.isIndexPoint && this.props.handPos !== prevProps.handPos) {\n      this.onMoveFinger(transformedHandPos);\n    } else if (this.state.isDrawing && !this.props.isIndexPoint && prevProps.isIndexPoint) {\n      this.onEndDraw();\n      this.props.onEndDraw();\n    }\n  }\n\n  getCommands() {\n    return [{\n      command: 'undo',\n      callback: () => this.undo()\n    }, {\n      command: 'clear',\n      callback: () => this.clear()\n    }];\n  }\n\n  transform(handPos) {\n    return {\n      x: handPos.x - 130,\n      y: handPos.y - 100\n    };\n  }\n\n  onStartDraw(posEvent) {\n    const {\n      x,\n      y\n    } = posEvent;\n    const offsetData = {\n      x,\n      y\n    };\n    let strokes = [...this.state.strokes];\n    strokes.push([]);\n    this.setState({\n      isDrawing: true,\n      prevPos: offsetData,\n      strokes: strokes\n    });\n  }\n\n  onMoveFinger(posEvent) {\n    if (this.state.isDrawing) {\n      const {\n        x,\n        y\n      } = posEvent;\n      const offsetData = {\n        x,\n        y\n      };\n      const positionData = {\n        start: { ...this.state.prevPos\n        },\n        stop: { ...offsetData\n        }\n      };\n      let strokes = [...this.state.strokes];\n      const lastIndex = strokes.length - 1;\n      let lastStroke = [...strokes[lastIndex]];\n      lastStroke.push(offsetData);\n      strokes[lastIndex] = lastStroke;\n      this.setState(prevState => ({\n        line: prevState.line.concat(positionData),\n        strokes: strokes\n      }), () => this.paint(this.state.prevPos, offsetData));\n    }\n  }\n\n  onEndDraw() {\n    this.setState({\n      isDrawing: false\n    });\n  }\n\n  paint(prevPos, currPos) {\n    const {\n      x,\n      y\n    } = currPos;\n    const {\n      x: prevX,\n      y: prevY\n    } = prevPos;\n    const ctx = this.getCtx();\n    ctx.beginPath();\n    ctx.strokeStyle = 'black';\n    ctx.moveTo(prevX, prevY);\n    ctx.lineTo(x, y);\n    ctx.stroke();\n    this.setState({\n      prevPos: {\n        x,\n        y\n      }\n    });\n  }\n\n  clear() {\n    console.log('clear!!');\n    const ctx = this.getCtx();\n    ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n  }\n\n  undo() {\n    console.log('undo!!');\n    this.clear();\n    this.state.strokes.pop();\n    this.state.strokes.forEach(stroke => {\n      for (let i = 1; i < stroke.length; i++) {\n        const prevPos = stroke[i - 1];\n        const currPos = stroke[i];\n        this.paint(prevPos, currPos);\n      }\n    });\n  }\n\n  getCtx() {\n    return this.state.ref.current.getContext('2d');\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Canvas-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Canvas-canvas\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          id: \"Canvas\",\n          ref: this.state.ref,\n          style: {\n            background: 'var(--offwhite)'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/src/components/Canvas.js"],"names":["React","Component","SpeechRecognition","useSpeechRecognition","Canvas","constructor","props","ref","createRef","state","isDrawing","prevPos","x","y","line","strokes","canvasWidth","canvasHeight","componentDidMount","current","width","height","ctx","getCtx","lineJoin","lineCap","lineWidth","commands","getCommands","transcript","startListening","continuous","componentDidUpdate","prevProps","transformedHandPos","transform","handPos","isIndexPoint","onStartDraw","onMoveFinger","onEndDraw","command","callback","undo","clear","posEvent","offsetData","push","setState","positionData","start","stop","lastIndex","length","lastStroke","prevState","concat","paint","currPos","prevX","prevY","beginPath","strokeStyle","moveTo","lineTo","stroke","console","log","clearRect","pop","forEach","i","getContext","render","background"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Canvas.css';\n\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\n\nexport default class Canvas extends React.Component {\n    constructor(props) {\n        super(props);\n        let ref = React.createRef();\n        this.state = {\n            isDrawing: false,\n            prevPos: {\n                x: 0,\n                y: 0,\n            },\n            line: [],\n            strokes: [],\n            ref: ref,\n        };\n        this.canvasWidth = 1200;\n        this.canvasHeight = 800;\n    }\n    componentDidMount() {\n        this.state.ref.current.width = this.canvasWidth;\n        this.state.ref.current.height = this.canvasHeight;\n        const ctx = this.getCtx();\n        ctx.lineJoin = 'round';\n        ctx.lineCap = 'round';\n        ctx.lineWidth = 5; \n\n        const commands = this.getCommands();\n        const { transcript } = useSpeechRecognition({ commands });\n        SpeechRecognition.startListening({continuous: true});\n    }\n    componentDidUpdate(prevProps) {\n        const transformedHandPos = this.transform(this.props.handPos);\n        if (!this.state.isDrawing && this.props.isIndexPoint && !prevProps.isIndexPoint) {\n            this.onStartDraw(transformedHandPos);\n            this.props.onStartDraw();\n        } else if (this.state.isDrawing && this.props.isIndexPoint && prevProps.isIndexPoint && \n            this.props.handPos !== prevProps.handPos) {\n            this.onMoveFinger(transformedHandPos);\n        } else if (this.state.isDrawing && !this.props.isIndexPoint && prevProps.isIndexPoint) {\n            this.onEndDraw();\n            this.props.onEndDraw();\n        } \n    }\n    getCommands() {\n        return [\n            {\n                command: 'undo',\n                callback: () => this.undo(),\n            },\n            {\n                command: 'clear',\n                callback: () => this.clear(),\n            }\n        ];\n    }\n    transform(handPos) {\n        return {\n            x: handPos.x - 130,\n            y: handPos.y - 100,\n        };\n    }\n    onStartDraw(posEvent) {\n        const { x, y } = posEvent;\n        const offsetData = {x, y};\n        let strokes = [...this.state.strokes];\n        strokes.push([]);\n        this.setState({\n            isDrawing: true,\n            prevPos: offsetData,\n            strokes: strokes,\n        });\n    }\n    onMoveFinger(posEvent) {\n        if (this.state.isDrawing) {\n            const { x, y } = posEvent;\n            const offsetData = { x, y };\n            const positionData = {\n                start: { ...this.state.prevPos },\n                stop: { ...offsetData },\n            };\n            let strokes = [...this.state.strokes];\n            const lastIndex = strokes.length - 1;\n            let lastStroke = [...strokes[lastIndex]];\n            lastStroke.push(offsetData);\n            strokes[lastIndex] = lastStroke;\n            this.setState(prevState => ({\n                line: prevState.line.concat(positionData),\n                strokes: strokes\n            }), () => this.paint(this.state.prevPos, offsetData));\n        }\n    }\n    onEndDraw() {\n        this.setState({\n            isDrawing: false,\n        });\n    }\n    paint(prevPos, currPos) {\n        const { x, y } = currPos;\n        const { x: prevX, y: prevY } = prevPos;\n\n        const ctx = this.getCtx();\n        ctx.beginPath();\n        ctx.strokeStyle = 'black';\n        ctx.moveTo(prevX, prevY);\n        ctx.lineTo(x, y);\n        ctx.stroke();\n        this.setState({\n            prevPos: {\n                x,\n                y\n            },\n        });\n    }\n    clear() {\n        console.log('clear!!');\n        const ctx = this.getCtx();\n        ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    }\n    undo() {\n        console.log('undo!!');\n        this.clear();\n        this.state.strokes.pop();\n        this.state.strokes.forEach(stroke => {\n            for (let i = 1; i < stroke.length; i++) {\n                const prevPos = stroke[i-1];\n                const currPos = stroke[i];\n                this.paint(prevPos, currPos);\n            }\n        });\n    }\n    getCtx() {\n        return this.state.ref.current.getContext('2d');\n    }\n    render() {\n        return (\n            <div className='Canvas-container'>\n                <div className='Canvas-canvas'>\n                    <canvas\n                        id='Canvas'\n                        ref={this.state.ref}\n                        style={{ background: 'var(--offwhite)' }}\n                    />\n                </div>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}