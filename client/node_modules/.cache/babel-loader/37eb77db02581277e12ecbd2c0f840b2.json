{"ast":null,"code":"var chooseProtocol = require('../protocol').chooseProtocol,\n    EventEmitter = require('events').EventEmitter;\n\nvar BaseConnection = module.exports = function (opts) {\n  this.opts = Object.assign({\n    host: '127.0.0.1',\n    scheme: this.getScheme(),\n    port: this.getPort(),\n    background: false,\n    optimizeHMD: false,\n    requestProtocolVersion: BaseConnection.defaultProtocolVersion\n  }, opts || {});\n  this.host = this.opts.host;\n  this.port = this.opts.port;\n  this.scheme = this.opts.scheme;\n  this.protocolVersionVerified = false;\n  this.background = null;\n  this.optimizeHMD = null;\n  this.on('ready', function () {\n    this.setBackground(this.opts.background);\n    this.setOptimizeHMD(this.opts.optimizeHMD);\n\n    if (this.opts.optimizeHMD) {\n      console.log(\"Optimized for head mounted display usage.\");\n    } else {\n      console.log(\"Optimized for desktop usage.\");\n    }\n  });\n}; // The latest available:\n\n\nBaseConnection.defaultProtocolVersion = 6;\n\nBaseConnection.prototype.getUrl = function () {\n  return this.scheme + \"//\" + this.host + \":\" + this.port + \"/v\" + this.opts.requestProtocolVersion + \".json\";\n};\n\nBaseConnection.prototype.getScheme = function () {\n  return 'ws:';\n};\n\nBaseConnection.prototype.getPort = function () {\n  return 6437;\n};\n\nBaseConnection.prototype.setBackground = function (state) {\n  this.opts.background = state;\n\n  if (this.protocol && this.protocol.sendBackground && this.background !== this.opts.background) {\n    this.background = this.opts.background;\n    this.protocol.sendBackground(this, this.opts.background);\n  }\n};\n\nBaseConnection.prototype.setOptimizeHMD = function (state) {\n  this.opts.optimizeHMD = state;\n\n  if (this.protocol && this.protocol.sendOptimizeHMD && this.optimizeHMD !== this.opts.optimizeHMD) {\n    this.optimizeHMD = this.opts.optimizeHMD;\n    this.protocol.sendOptimizeHMD(this, this.opts.optimizeHMD);\n  }\n};\n\nBaseConnection.prototype.handleOpen = function () {\n  if (!this.connected) {\n    this.connected = true;\n    this.emit('connect');\n  }\n};\n\nBaseConnection.prototype.handleClose = function (code, reason) {\n  if (!this.connected) return;\n  this.disconnect(); // 1001 - an active connection is closed\n  // 1006 - cannot connect\n\n  if (code === 1001 && this.opts.requestProtocolVersion > 1) {\n    if (this.protocolVersionVerified) {\n      this.protocolVersionVerified = false;\n    } else {\n      this.opts.requestProtocolVersion--;\n    }\n  }\n\n  this.startReconnection();\n};\n\nBaseConnection.prototype.startReconnection = function () {\n  var connection = this;\n\n  if (!this.reconnectionTimer) {\n    this.reconnectionTimer = setInterval(function () {\n      connection.reconnect();\n    }, 500);\n  }\n};\n\nBaseConnection.prototype.stopReconnection = function () {\n  this.reconnectionTimer = clearInterval(this.reconnectionTimer);\n}; // By default, disconnect will prevent auto-reconnection.\n// Pass in true to allow the reconnection loop not be interrupted continue\n\n\nBaseConnection.prototype.disconnect = function (allowReconnect) {\n  if (!allowReconnect) this.stopReconnection();\n  if (!this.socket) return;\n  this.socket.close();\n  delete this.socket;\n  delete this.protocol;\n  delete this.background; // This is not persisted when reconnecting to the web socket server\n\n  delete this.optimizeHMD;\n  delete this.focusedState;\n\n  if (this.connected) {\n    this.connected = false;\n    this.emit('disconnect');\n  }\n\n  return true;\n};\n\nBaseConnection.prototype.reconnect = function () {\n  if (this.connected) {\n    this.stopReconnection();\n  } else {\n    this.disconnect(true);\n    this.connect();\n  }\n};\n\nBaseConnection.prototype.handleData = function (data) {\n  var message = JSON.parse(data);\n  var messageEvent;\n\n  if (this.protocol === undefined) {\n    messageEvent = this.protocol = chooseProtocol(message);\n    this.protocolVersionVerified = true;\n    this.emit('ready');\n  } else {\n    messageEvent = this.protocol(message);\n  }\n\n  this.emit(messageEvent.type, messageEvent);\n};\n\nBaseConnection.prototype.connect = function () {\n  if (this.socket) return;\n  this.socket = this.setupSocket();\n  return true;\n};\n\nBaseConnection.prototype.send = function (data) {\n  this.socket.send(data);\n};\n\nBaseConnection.prototype.reportFocus = function (state) {\n  if (!this.connected || this.focusedState === state) return;\n  this.focusedState = state;\n  this.emit(this.focusedState ? 'focus' : 'blur');\n\n  if (this.protocol && this.protocol.sendFocused) {\n    this.protocol.sendFocused(this, this.focusedState);\n  }\n};\n\nObject.assign(BaseConnection.prototype, EventEmitter.prototype);","map":{"version":3,"sources":["/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/node_modules/leapjs/lib/connection/base.js"],"names":["chooseProtocol","require","EventEmitter","BaseConnection","module","exports","opts","Object","assign","host","scheme","getScheme","port","getPort","background","optimizeHMD","requestProtocolVersion","defaultProtocolVersion","protocolVersionVerified","on","setBackground","setOptimizeHMD","console","log","prototype","getUrl","state","protocol","sendBackground","sendOptimizeHMD","handleOpen","connected","emit","handleClose","code","reason","disconnect","startReconnection","connection","reconnectionTimer","setInterval","reconnect","stopReconnection","clearInterval","allowReconnect","socket","close","focusedState","connect","handleData","data","message","JSON","parse","messageEvent","undefined","type","setupSocket","send","reportFocus","sendFocused"],"mappings":"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","sourcesContent":["var chooseProtocol = require('../protocol').chooseProtocol\n  , EventEmitter = require('events').EventEmitter;\n\nvar BaseConnection = module.exports = function(opts) {\n  this.opts = Object.assign({\n    host : '127.0.0.1',\n    scheme: this.getScheme(),\n    port: this.getPort(),\n    background: false,\n    optimizeHMD: false,\n    requestProtocolVersion: BaseConnection.defaultProtocolVersion\n  }, opts || {});\n  this.host = this.opts.host;\n  this.port = this.opts.port;\n  this.scheme = this.opts.scheme;\n  this.protocolVersionVerified = false;\n  this.background = null;\n  this.optimizeHMD = null;\n  this.on('ready', function() {\n    this.setBackground(this.opts.background);\n    this.setOptimizeHMD(this.opts.optimizeHMD);\n\n    if (this.opts.optimizeHMD){\n      console.log(\"Optimized for head mounted display usage.\");\n    }else {\n      console.log(\"Optimized for desktop usage.\");\n    }\n\n  });\n};\n\n// The latest available:\nBaseConnection.defaultProtocolVersion = 6;\n\nBaseConnection.prototype.getUrl = function() {\n  return this.scheme + \"//\" + this.host + \":\" + this.port + \"/v\" + this.opts.requestProtocolVersion + \".json\";\n}\n\n\nBaseConnection.prototype.getScheme = function(){\n  return 'ws:'\n}\n\nBaseConnection.prototype.getPort = function(){\n  return 6437\n}\n\n\nBaseConnection.prototype.setBackground = function(state) {\n  this.opts.background = state;\n  if (this.protocol && this.protocol.sendBackground && this.background !== this.opts.background) {\n    this.background = this.opts.background;\n    this.protocol.sendBackground(this, this.opts.background);\n  }\n}\n\nBaseConnection.prototype.setOptimizeHMD = function(state) {\n  this.opts.optimizeHMD = state;\n  if (this.protocol && this.protocol.sendOptimizeHMD && this.optimizeHMD !== this.opts.optimizeHMD) {\n    this.optimizeHMD = this.opts.optimizeHMD;\n    this.protocol.sendOptimizeHMD(this, this.opts.optimizeHMD);\n  }\n}\n\nBaseConnection.prototype.handleOpen = function() {\n  if (!this.connected) {\n    this.connected = true;\n    this.emit('connect');\n  }\n}\n\nBaseConnection.prototype.handleClose = function(code, reason) {\n  if (!this.connected) return;\n  this.disconnect();\n\n  // 1001 - an active connection is closed\n  // 1006 - cannot connect\n  if (code === 1001 && this.opts.requestProtocolVersion > 1) {\n    if (this.protocolVersionVerified) {\n      this.protocolVersionVerified = false;\n    }else{\n      this.opts.requestProtocolVersion--;\n    }\n  }\n  this.startReconnection();\n}\n\nBaseConnection.prototype.startReconnection = function() {\n  var connection = this;\n  if(!this.reconnectionTimer){\n    (this.reconnectionTimer = setInterval(function() { connection.reconnect() }, 500));\n  }\n}\n\nBaseConnection.prototype.stopReconnection = function() {\n  this.reconnectionTimer = clearInterval(this.reconnectionTimer);\n}\n\n// By default, disconnect will prevent auto-reconnection.\n// Pass in true to allow the reconnection loop not be interrupted continue\nBaseConnection.prototype.disconnect = function(allowReconnect) {\n  if (!allowReconnect) this.stopReconnection();\n  if (!this.socket) return;\n  this.socket.close();\n  delete this.socket;\n  delete this.protocol;\n  delete this.background; // This is not persisted when reconnecting to the web socket server\n  delete this.optimizeHMD;\n  delete this.focusedState;\n  if (this.connected) {\n    this.connected = false;\n    this.emit('disconnect');\n  }\n  return true;\n}\n\nBaseConnection.prototype.reconnect = function() {\n  if (this.connected) {\n    this.stopReconnection();\n  } else {\n    this.disconnect(true);\n    this.connect();\n  }\n}\n\nBaseConnection.prototype.handleData = function(data) {\n  var message = JSON.parse(data);\n\n  var messageEvent;\n  if (this.protocol === undefined) {\n    messageEvent = this.protocol = chooseProtocol(message);\n    this.protocolVersionVerified = true;\n    this.emit('ready');\n  } else {\n    messageEvent = this.protocol(message);\n  }\n  this.emit(messageEvent.type, messageEvent);\n}\n\nBaseConnection.prototype.connect = function() {\n  if (this.socket) return;\n  this.socket = this.setupSocket();\n  return true;\n}\n\nBaseConnection.prototype.send = function(data) {\n  this.socket.send(data);\n}\n\nBaseConnection.prototype.reportFocus = function(state) {\n  if (!this.connected || this.focusedState === state) return;\n  this.focusedState = state;\n  this.emit(this.focusedState ? 'focus' : 'blur');\n  if (this.protocol && this.protocol.sendFocused) {\n    this.protocol.sendFocused(this, this.focusedState);\n  }\n}\n\nObject.assign(BaseConnection.prototype, EventEmitter.prototype);"]},"metadata":{},"sourceType":"script"}