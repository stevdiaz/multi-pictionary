{"ast":null,"code":"var glMatrix = require(\"gl-matrix\"),\n    vec3 = glMatrix.vec3;\n/**\n * Constructs a InteractionBox object.\n *\n * @class InteractionBox\n * @memberof Leap\n * @classdesc\n * The InteractionBox class represents a box-shaped region completely within\n * the field of view of the Leap Motion controller.\n *\n * The interaction box is an axis-aligned rectangular prism and provides\n * normalized coordinates for hands, fingers, and tools within this box.\n * The InteractionBox class can make it easier to map positions in the\n * Leap Motion coordinate system to 2D or 3D coordinate systems used\n * for application drawing.\n *\n * ![Interaction Box](images/Leap_InteractionBox.png)\n *\n * The InteractionBox region is defined by a center and dimensions along the x, y, and z axes.\n */\n\n\nvar InteractionBox = module.exports = function (data) {\n  /**\n   * Indicates whether this is a valid InteractionBox object.\n   *\n   * @member valid\n   * @type {Boolean}\n   * @memberof Leap.InteractionBox.prototype\n   */\n  this.valid = true;\n  /**\n   * The center of the InteractionBox in device coordinates (millimeters).\n   * This point is equidistant from all sides of the box.\n   *\n   * @member center\n   * @type {number[]}\n   * @memberof Leap.InteractionBox.prototype\n   */\n\n  this.center = data.center;\n  this.size = data.size;\n  /**\n   * The width of the InteractionBox in millimeters, measured along the x-axis.\n   *\n   * @member width\n   * @type {number}\n   * @memberof Leap.InteractionBox.prototype\n   */\n\n  this.width = data.size[0];\n  /**\n   * The height of the InteractionBox in millimeters, measured along the y-axis.\n   *\n   * @member height\n   * @type {number}\n   * @memberof Leap.InteractionBox.prototype\n   */\n\n  this.height = data.size[1];\n  /**\n   * The depth of the InteractionBox in millimeters, measured along the z-axis.\n   *\n   * @member depth\n   * @type {number}\n   * @memberof Leap.InteractionBox.prototype\n   */\n\n  this.depth = data.size[2];\n};\n/**\n * Converts a position defined by normalized InteractionBox coordinates\n * into device coordinates in millimeters.\n *\n * This function performs the inverse of normalizePoint().\n *\n * @method denormalizePoint\n * @memberof Leap.InteractionBox.prototype\n * @param {number[]} normalizedPosition The input position in InteractionBox coordinates.\n * @returns {number[]} The corresponding denormalized position in device coordinates.\n */\n\n\nInteractionBox.prototype.denormalizePoint = function (normalizedPosition) {\n  return vec3.fromValues((normalizedPosition[0] - 0.5) * this.size[0] + this.center[0], (normalizedPosition[1] - 0.5) * this.size[1] + this.center[1], (normalizedPosition[2] - 0.5) * this.size[2] + this.center[2]);\n};\n/**\n * Normalizes the coordinates of a point using the interaction box.\n *\n * Coordinates from the Leap Motion frame of reference (millimeters) are\n * converted to a range of [0..1] such that the minimum value of the\n * InteractionBox maps to 0 and the maximum value of the InteractionBox maps to 1.\n *\n * @method normalizePoint\n * @memberof Leap.InteractionBox.prototype\n * @param {number[]} position The input position in device coordinates.\n * @param {Boolean} clamp Whether or not to limit the output value to the range [0,1]\n * when the input position is outside the InteractionBox. Defaults to true.\n * @returns {number[]} The normalized position.\n */\n\n\nInteractionBox.prototype.normalizePoint = function (position, clamp) {\n  var vec = vec3.fromValues((position[0] - this.center[0]) / this.size[0] + 0.5, (position[1] - this.center[1]) / this.size[1] + 0.5, (position[2] - this.center[2]) / this.size[2] + 0.5);\n\n  if (clamp) {\n    vec[0] = Math.min(Math.max(vec[0], 0), 1);\n    vec[1] = Math.min(Math.max(vec[1], 0), 1);\n    vec[2] = Math.min(Math.max(vec[2], 0), 1);\n  }\n\n  return vec;\n};\n/**\n * Writes a brief, human readable description of the InteractionBox object.\n *\n * @method toString\n * @memberof Leap.InteractionBox.prototype\n * @returns {String} A description of the InteractionBox object as a string.\n */\n\n\nInteractionBox.prototype.toString = function () {\n  return \"InteractionBox [ width:\" + this.width + \" | height:\" + this.height + \" | depth:\" + this.depth + \" ]\";\n};\n/**\n * An invalid InteractionBox object.\n *\n * You can use this InteractionBox instance in comparisons testing\n * whether a given InteractionBox instance is valid or invalid. (You can also use the\n * InteractionBox.valid property.)\n *\n * @static\n * @type {Leap.InteractionBox}\n * @name Invalid\n * @memberof Leap.InteractionBox\n */\n\n\nInteractionBox.Invalid = {\n  valid: false\n};","map":{"version":3,"sources":["/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/node_modules/leapjs/lib/interaction_box.js"],"names":["glMatrix","require","vec3","InteractionBox","module","exports","data","valid","center","size","width","height","depth","prototype","denormalizePoint","normalizedPosition","fromValues","normalizePoint","position","clamp","vec","Math","min","max","toString","Invalid"],"mappings":"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","sourcesContent":["var glMatrix = require(\"gl-matrix\")\n  , vec3 = glMatrix.vec3;\n\n/**\n * Constructs a InteractionBox object.\n *\n * @class InteractionBox\n * @memberof Leap\n * @classdesc\n * The InteractionBox class represents a box-shaped region completely within\n * the field of view of the Leap Motion controller.\n *\n * The interaction box is an axis-aligned rectangular prism and provides\n * normalized coordinates for hands, fingers, and tools within this box.\n * The InteractionBox class can make it easier to map positions in the\n * Leap Motion coordinate system to 2D or 3D coordinate systems used\n * for application drawing.\n *\n * ![Interaction Box](images/Leap_InteractionBox.png)\n *\n * The InteractionBox region is defined by a center and dimensions along the x, y, and z axes.\n */\nvar InteractionBox = module.exports = function(data) {\n  /**\n   * Indicates whether this is a valid InteractionBox object.\n   *\n   * @member valid\n   * @type {Boolean}\n   * @memberof Leap.InteractionBox.prototype\n   */\n  this.valid = true;\n  /**\n   * The center of the InteractionBox in device coordinates (millimeters).\n   * This point is equidistant from all sides of the box.\n   *\n   * @member center\n   * @type {number[]}\n   * @memberof Leap.InteractionBox.prototype\n   */\n  this.center = data.center;\n\n  this.size = data.size;\n  /**\n   * The width of the InteractionBox in millimeters, measured along the x-axis.\n   *\n   * @member width\n   * @type {number}\n   * @memberof Leap.InteractionBox.prototype\n   */\n  this.width = data.size[0];\n  /**\n   * The height of the InteractionBox in millimeters, measured along the y-axis.\n   *\n   * @member height\n   * @type {number}\n   * @memberof Leap.InteractionBox.prototype\n   */\n  this.height = data.size[1];\n  /**\n   * The depth of the InteractionBox in millimeters, measured along the z-axis.\n   *\n   * @member depth\n   * @type {number}\n   * @memberof Leap.InteractionBox.prototype\n   */\n  this.depth = data.size[2];\n}\n\n/**\n * Converts a position defined by normalized InteractionBox coordinates\n * into device coordinates in millimeters.\n *\n * This function performs the inverse of normalizePoint().\n *\n * @method denormalizePoint\n * @memberof Leap.InteractionBox.prototype\n * @param {number[]} normalizedPosition The input position in InteractionBox coordinates.\n * @returns {number[]} The corresponding denormalized position in device coordinates.\n */\nInteractionBox.prototype.denormalizePoint = function(normalizedPosition) {\n  return vec3.fromValues(\n    (normalizedPosition[0] - 0.5) * this.size[0] + this.center[0],\n    (normalizedPosition[1] - 0.5) * this.size[1] + this.center[1],\n    (normalizedPosition[2] - 0.5) * this.size[2] + this.center[2]\n  );\n}\n\n/**\n * Normalizes the coordinates of a point using the interaction box.\n *\n * Coordinates from the Leap Motion frame of reference (millimeters) are\n * converted to a range of [0..1] such that the minimum value of the\n * InteractionBox maps to 0 and the maximum value of the InteractionBox maps to 1.\n *\n * @method normalizePoint\n * @memberof Leap.InteractionBox.prototype\n * @param {number[]} position The input position in device coordinates.\n * @param {Boolean} clamp Whether or not to limit the output value to the range [0,1]\n * when the input position is outside the InteractionBox. Defaults to true.\n * @returns {number[]} The normalized position.\n */\nInteractionBox.prototype.normalizePoint = function(position, clamp) {\n  var vec = vec3.fromValues(\n    ((position[0] - this.center[0]) / this.size[0]) + 0.5,\n    ((position[1] - this.center[1]) / this.size[1]) + 0.5,\n    ((position[2] - this.center[2]) / this.size[2]) + 0.5\n  );\n\n  if (clamp) {\n    vec[0] = Math.min(Math.max(vec[0], 0), 1);\n    vec[1] = Math.min(Math.max(vec[1], 0), 1);\n    vec[2] = Math.min(Math.max(vec[2], 0), 1);\n  }\n  return vec;\n}\n\n/**\n * Writes a brief, human readable description of the InteractionBox object.\n *\n * @method toString\n * @memberof Leap.InteractionBox.prototype\n * @returns {String} A description of the InteractionBox object as a string.\n */\nInteractionBox.prototype.toString = function() {\n  return \"InteractionBox [ width:\" + this.width + \" | height:\" + this.height + \" | depth:\" + this.depth + \" ]\";\n}\n\n/**\n * An invalid InteractionBox object.\n *\n * You can use this InteractionBox instance in comparisons testing\n * whether a given InteractionBox instance is valid or invalid. (You can also use the\n * InteractionBox.valid property.)\n *\n * @static\n * @type {Leap.InteractionBox}\n * @name Invalid\n * @memberof Leap.InteractionBox\n */\nInteractionBox.Invalid = { valid: false };\n"]},"metadata":{},"sourceType":"script"}