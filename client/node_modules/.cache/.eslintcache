[{"/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/index.js":"1","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/App.js":"2","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/reportWebVitals.js":"3","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/Cursor.js":"4","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/Canvas.js":"5","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/Entry.js":"6","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/Drawer.js":"7","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/ColorPalette.js":"8","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/DrawCard.js":"9","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/CanvasSpeechHandler.js":"10","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/ThickPalette.js":"11","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/SmallButton.js":"12","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/DrawHelper.js":"13","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/helpers/constants.js":"14","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/JoinCreate.js":"15","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/SmallText.js":"16","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/WaitingRoom.js":"17","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/Guesser.js":"18","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/GuesserSidePanel.js":"19","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/GuesserSidePanelSpeechHandler.js":"20","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/GuessHelper.js":"21"},{"size":500,"mtime":1619418528794,"results":"22","hashOfConfig":"23"},{"size":2971,"mtime":1620184919269,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":1619418528794,"results":"25","hashOfConfig":"23"},{"size":4222,"mtime":1619490560493,"results":"26","hashOfConfig":"23"},{"size":5748,"mtime":1620185180745,"results":"27","hashOfConfig":"23"},{"size":2385,"mtime":1620178760778,"results":"28","hashOfConfig":"23"},{"size":3375,"mtime":1620184734637,"results":"29","hashOfConfig":"23"},{"size":2402,"mtime":1620157695095,"results":"30","hashOfConfig":"23"},{"size":1628,"mtime":1620184698018,"results":"31","hashOfConfig":"23"},{"size":845,"mtime":1620182254893,"results":"32","hashOfConfig":"23"},{"size":2222,"mtime":1620162086377,"results":"33","hashOfConfig":"23"},{"size":1208,"mtime":1620178093687,"results":"34","hashOfConfig":"23"},{"size":1806,"mtime":1620165624407,"results":"35","hashOfConfig":"23"},{"size":1423,"mtime":1620184269639,"results":"36","hashOfConfig":"23"},{"size":3739,"mtime":1620178752891,"results":"37","hashOfConfig":"23"},{"size":901,"mtime":1620167608459,"results":"38","hashOfConfig":"23"},{"size":1987,"mtime":1620173947578,"results":"39","hashOfConfig":"23"},{"size":1672,"mtime":1620185845027,"results":"40","hashOfConfig":"23"},{"size":1700,"mtime":1620184501691,"results":"41","hashOfConfig":"23"},{"size":611,"mtime":1620185870329,"results":"42","hashOfConfig":"23"},{"size":943,"mtime":1620184309668,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1mb4u64",{"filePath":"47","messages":"48","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"46"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"46"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"46"},"/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/index.js",[],["103","104"],"/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/App.js",["105","106","107","108","109","110","111"],"import logo from './logo.svg';\nimport React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport './App.css';\n\nimport Cursor from './components/Cursor';\nimport Entry from './components/Entry';\nimport Canvas from './components/Canvas';\nimport Drawer from './components/Drawer';\nimport ColorPalette from './components/ColorPalette';\nimport JoinCreate from './components/JoinCreate';\nimport WaitingRoom from './components/WaitingRoom';\nimport Guesser from './components/Guesser';\nimport GuesserSidePanel from './components/GuesserSidePanel';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      didTransitionToDraw: false,\n      isIndexPoint: false,\n      handPos: {x: 0, y: 0},\n      isGrabbing: false,\n      isCircular: false,\n      swipeObject: {\n        isSwipe: false,\n        isRight: false,\n      },\n      isDrawer: false,\n    };\n    this.socket = socketIOClient();\n  }\n\n  componentDidMount() {\n  \n  }\n  componentDidUpdate() {\n\n  }\n  onPointUpdate(isIndexPoint, handPos) {\n    this.setState({\n      isIndexPoint: isIndexPoint,\n      handPos: handPos,\n    });\n  }\n  onHandGrabUpdate(isGrabbing) {\n    this.setState({\n      isGrabbing: isGrabbing,\n    });\n  }\n  onCircularUpdate(isCircular) {\n    this.setState({\n      isCircular: isCircular,\n    });\n  }\n  onSwipeUpdate(swipeObject) {\n    this.setState({\n      swipeObject: swipeObject,\n    });\n  }\n  onStartGame(isDrawer) {\n    this.setState({\n      didTransitionToDraw: true,\n      isDrawer: isDrawer,\n    });\n  }\n  render() {\n    let content = (<Entry handPos={this.state.handPos} \n                          isGrabbing={this.state.isGrabbing} \n                          socket={this.socket} \n                          onStartGame={(isDrawer) => this.onStartGame(isDrawer)}/>);\n\n    if (this.state.didTransitionToDraw) {\n      if (this.state.isDrawer) {\n        content = (<Drawer isIndexPoint={this.state.isIndexPoint} \n                            handPos={this.state.handPos} \n                            swipeObject={this.state.swipeObject}\n                            isGrabbing={this.state.isGrabbing} \n                            socket={this.socket} />);\n      } else {\n        content = (<Guesser isIndexPoint={this.state.isIndexPoint} \n                            handPos={this.state.handPos}\n                            swipeObject={this.state.swipeObject}\n                            isGrabbing={this.state.isGrabbing}\n                            socket={this.socket} />);\n      }\n    }\n    return (\n      <div>\n        <Cursor onHandGrabUpdate={(isGrabbing) => this.onHandGrabUpdate(isGrabbing)} \n                onPointUpdate={(isIndexPoint, handPos) => this.onPointUpdate(isIndexPoint, handPos)}\n                onCircularUpdate={(isCircular) => this.onCircularUpdate(isCircular)}\n                onSwipeUpdate={(swipeObject) => this.onSwipeUpdate(swipeObject)}/>\n        {content}\n      </div>\n    )\n  }\n}\n","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/reportWebVitals.js",[],"/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/Cursor.js",["112","113"],"import React, { Component } from 'react';\nimport './Cursor.css';\n\nimport Leap from 'leapjs';\nimport 'leapjs-plugins'\n\nexport default class Cursor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isGrabbing: false,\n            isPointing: false,\n            isCircular: false,\n            swipeObject: {\n                isSwipe: false,\n                isRight: false,\n            },\n            position: {\n                x: 0,\n                y: 0,\n            },\n        };\n        this.grabThreshold = 0.8;\n        this.flatThreshold = 0.7;\n    }\n    componentDidMount() {\n        this.leapController = Leap.loop({enableGestures: true}, (frame) => this.onLeapFrame(frame));\n        this.leapController.use('screenPosition', {scale: 0.8, positioning: 'absolute'});\n        this.leapController.connect();\n    }\n    componentDidUpdate() {\n\n    }\n    onLeapFrame(frame) {\n        if (frame.hands.length > 0) {\n            const hand = frame.hands[0];\n            const handPosition = hand.screenPosition();\n            this.setState({position: {x: handPosition[0] + 30, y: handPosition[1] + 600}});\n            if (hand.grabStrength > this.grabThreshold) {\n                if (!this.state.isGrabbing) {\n                    this.setState({\n                        isGrabbing: true,\n                    });\n                }\n                this.props.onHandGrabUpdate(true);\n            } else if (hand.grabStrength < this.flatThreshold) {\n                if (this.state.isGrabbing) {\n                    this.setState({\n                        isGrabbing: false,\n                    });\n                }\n                this.props.onHandGrabUpdate(false);\n            }\n            const isPointing = this.onlyIndexFingerExtended(hand);\n            this.setState({\n                isPointing: isPointing,\n            });\n            this.props.onPointUpdate(isPointing, this.state.position);\n\n            const gestures = frame.data.gestures;\n            const isCircular = this.circularGesture(hand, gestures);\n            this.setState({\n                isCircular: isCircular,\n            });\n            this.props.onCircularUpdate(isCircular);\n\n            const isSwipe = this.swipeGesture(hand, gestures);\n            const isRight = this.swipeIsRight(gestures);\n            const swipeObject = {\n                isSwipe: isSwipe,\n                isRight: isRight,\n            };\n            this.setState({\n                swipeObject: swipeObject,\n            });\n            this.props.onSwipeUpdate(swipeObject);\n        }\n    }\n    onlyIndexFingerExtended(hand) {\n        return (hand.indexFinger.extended && !hand.ringFinger.extended && !hand.pinky.extended && !hand.thumb.extended && !hand.middleFinger.extended);\n    }\n    allFingersExtended(hand) {\n        return true;\n        return (hand.indexFinger.extended && hand.ringFinger.extended && hand.pinky.extended && hand.middleFinger.extended);\n    }\n    circularGesture(hand, gestures) {\n        const circleGesture = gestures.filter(gesture => gesture.type === 'circle');\n        return hand.pinky.extended && circleGesture.length === 1 && circleGesture.duration > 700;\n    }\n    swipeGesture(hand, gestures) {\n        const swipeGesture = gestures.filter(gesture => gesture.type === 'swipe');\n        return swipeGesture.length > 0;\n    }\n    swipeIsRight(gestures) {\n        const swipeGesture = gestures.filter(gesture => gesture.type === 'swipe' && gesture.state === 'stop');\n        if (swipeGesture.length > 0) {\n            const stop = swipeGesture[0];\n            if (stop.position[0] < 0 || stop.position[0] < 0) {\n                return true;\n            }\n            return false;\n        }\n        return false;\n    }\n    render() {\n        var className = 'Cursor-cursor';\n        if (this.state.isGrabbing) {\n            className += ' Cursor-cursorGrab';\n        } else if (this.state.isPointing) {\n            className += ' Cursor-cursorPoint';\n        } else {\n            className += ' Cursor-cursorNormal';\n        }\n        return (\n            <div className={className} style={{left: `${this.state.position.x}px`, top: `${this.state.position.y}px`}}/>\n        )\n    }\n}","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/Canvas.js",["114","115","116"],"import React, { Component } from 'react';\nimport './Canvas.css';\n\nexport default class Canvas extends React.Component {\n    constructor(props) {\n        super(props);\n        let ref = React.createRef();\n        this.state = {\n            isDrawing: false,\n            prevPos: {\n                x: 0,\n                y: 0,\n            },\n            line: [],\n            strokes: [], // strokes[i] is stroke object, which contains color, thickness, and position fields\n            ref: ref,\n        };\n        this.canvasWidth = 1200;\n        this.canvasHeight = 800;\n    }\n    componentDidMount() {\n        this.state.ref.current.width = this.canvasWidth;\n        this.state.ref.current.height = this.canvasHeight;\n        const ctx = this.getCtx();\n        ctx.lineJoin = 'round';\n        ctx.lineCap = 'round';\n        ctx.lineWidth = this.props.selectedThickness;\n        if (!this.props.isDrawer) {\n            this.props.socket.on('draw', (...strokes) => {\n                this.clear({forUndo: false}, () => this.drawFromStrokes(strokes));\n            });\n        } \n    }\n    componentDidUpdate(prevProps) {\n        if (this.props.isDrawer) {\n            const transformedHandPos = this.transform(this.props.handPos);\n            const emitDraw = () => this.props.socket.emit('drawerDraw', ...this.state.strokes);\n            if (!this.state.isDrawing && this.props.isIndexPoint && !prevProps.isIndexPoint) {\n                this.onStartDraw(transformedHandPos);\n                this.props.onStartDraw();\n                // emitDraw();\n            } else if (this.state.isDrawing && this.props.isIndexPoint && prevProps.isIndexPoint && \n                this.props.handPos !== prevProps.handPos) {\n                this.onMoveFinger(transformedHandPos);\n                // emitDraw();\n            } else if (this.state.isDrawing && !this.props.isIndexPoint && prevProps.isIndexPoint) {\n                this.onEndDraw();\n                this.props.onEndDraw();\n                emitDraw();\n            } else if (this.props.undoId > prevProps.undoId) {\n                this.undo(emitDraw);\n                this.props.onUndo();\n            } else if (this.props.clearId > prevProps.clearId) {\n                this.clear({forUndo: false}, emitDraw);\n                this.props.onClear();\n            }\n        }\n    }\n    transform(handPos) {\n        return {\n            x: handPos.x - 340,\n            y: handPos.y - 100,\n        };\n    }\n    onStartDraw(posEvent) {\n        const { x, y } = posEvent;\n        const offsetData = {x, y};\n        const newStrokeObj = {\n            color: this.props.selectedColor,\n            thickness: this.props.selectedThickness,\n            positions: [offsetData],\n        };\n        this.setState((prevState) => ({\n            isDrawing: true,\n            prevPos: offsetData,\n            strokes: prevState.strokes.concat(newStrokeObj),\n        }));\n    }\n    onMoveFinger(posEvent) {\n        if (this.state.isDrawing) {\n            const { x, y } = posEvent;\n            const offsetData = { x, y };\n            const positionData = {\n                start: { ...this.state.prevPos },\n                stop: { ...offsetData },\n            };\n            let strokes = [...this.state.strokes];\n            const lastIndex = strokes.length - 1;\n            let lastStrokeObject = {...strokes[lastIndex]};\n            let positions = [...lastStrokeObject.positions];  \n            positions.push(offsetData);\n            lastStrokeObject.positions = positions;\n            strokes[lastIndex] = lastStrokeObject;\n            this.setState(prevState => ({\n                line: prevState.line.concat(positionData),\n                strokes: strokes\n            }), () => this.paint(this.state.prevPos, offsetData, this.props.selectedColor, this.props.selectedThickness));\n        }\n    }\n    onEndDraw() {\n        this.setState({\n            isDrawing: false,\n        });\n    }\n    paint(prevPos, currPos, color, thickness) {\n        const { x, y } = currPos;\n        const { x: prevX, y: prevY } = prevPos;\n\n        const ctx = this.getCtx();\n        ctx.beginPath();\n        ctx.strokeStyle = color;\n        ctx.lineWidth = thickness; \n        ctx.moveTo(prevX, prevY);\n        ctx.lineTo(x, y);\n        ctx.stroke();\n        this.setState({\n            prevPos: {\n                x,\n                y\n            },\n        });\n    }\n    clear({forUndo}, callback) {\n        const ctx = this.getCtx();\n        ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n        if (!forUndo) {\n            this.setState({\n                strokes: [],\n            }, () => callback());\n        }\n    }\n    undo(callback) {\n        this.clear({forUndo: true});\n        let strokes = [...this.state.strokes];\n        strokes.pop();\n        this.setState({\n            strokes: strokes,\n        }, () => {\n            this.drawFromStrokes(this.state.strokes);\n            callback();\n        });\n    }\n    drawFromStrokes(strokes) {\n        strokes.forEach(stroke => {\n            for (let i = 1; i < stroke.positions.length; i++) {\n                const prevPos = stroke.positions[i-1];\n                const currPos = stroke.positions[i];\n                this.paint(prevPos, currPos, stroke.color, stroke.thickness);\n            }\n        });\n    }\n    getCtx() {\n        return this.state.ref.current.getContext('2d');\n    }\n    render() {\n        return (\n            <div className='Canvas-container'>\n                <div className='Canvas-canvas'>\n                    <canvas\n                        id='Canvas'\n                        ref={this.state.ref}\n                        style={{ background: 'var(--offwhite)' }}\n                    />\n                </div>\n            </div>\n        )\n    }\n}","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/Entry.js",["117","118"],"import React, { Component } from 'react';\nimport './Entry.css';\n\nimport SmallButton from './SmallButton';\nimport JoinCreate from './JoinCreate';\nimport WaitingRoom from './WaitingRoom';\n\nexport default class Entry extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            didPressStart: false,\n            didJoinCreate: false,\n            roomName: \"\",\n            isCreator: false,\n        };\n    }\n    componentDidMount() {\n\n    }\n    componentDidUpdate() {\n\n    }\n    onStartGame() {\n        this.props.onStartGame(this.state.isCreator);\n    }\n    onJoinCreate(roomName, roomSize, isCreator) {\n        this.setState({\n            didJoinCreate: true,\n            roomName: roomName,\n            roomSize: roomSize,\n            isCreator: isCreator,\n        });\n    }\n    render() {\n        let content = (<JoinCreate handPos={this.props.handPos} \n                                    isGrabbing={this.props.isGrabbing} \n                                    socket={this.props.socket} \n                                    onJoinCreate={(roomName, roomSize, isCreator) => this.onJoinCreate(roomName, roomSize, isCreator)} />);\n        if (this.state.didJoinCreate) {\n            content = (<WaitingRoom isCreator={this.state.isCreator} \n                                    roomName={this.state.roomName} \n                                    roomSize={this.state.roomSize}\n                                    handPos={this.props.handPos} \n                                    isGrabbing={this.props.isGrabbing} \n                                    socket={this.props.socket} \n                                    onStartGame={() => this.onStartGame()} />);\n        }\n        return (\n            <div className='Entry-container'>\n                <div className='Entry-firstLine'>\n                    Multimodal\n                </div>\n                <div className='Entry-secondLine'>\n                    <span role='img' aria-label='hand'>✋</span> Pictionary <span role='img' aria-label='microphone'>🎤</span>\n                </div>\n\n                <div className='Entry-description'>\n                    remote pictionary with your friends, done right\n                </div>\n\n                <div className='Entry-content'>\n                    {content}\n                </div>\n                \n            </div>\n        )\n    };\n}","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/Drawer.js",["119","120","121"],"import React, { Component } from 'react';\nimport './Drawer.css';\n\nimport CanvasSpeechHandler from './CanvasSpeechHandler';\nimport DrawCard from './DrawCard';\nimport DrawHelper from './DrawHelper';\nimport ColorPalette from './ColorPalette';\nimport ThickPalette from './ThickPalette';\n\nimport { drawStates, colors, defaultColor, thickness, defaultThickness, announcements } from '../helpers/constants';\n\nexport default class Drawer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            drawState: drawStates.choosingState,\n            isDrawing: false,\n            selectedColor: defaultColor,\n            selectedThickness: defaultThickness,\n            announcement: \"\",\n        };\n    }\n    componentDidMount() {\n\n    }\n    componentDidUpdate() {\n    \n    }\n    updateIsDrawing(isDrawing) {\n        this.setState({\n            drawState: drawStates.drawingState,\n            isDrawing: isDrawing,\n        });\n    }\n    onSelectColor(selectedColor, colorName) {\n        this.setState({\n            selectedColor: selectedColor,\n            announcement: announcements.colorSelectedAnnouncement(colorName),\n        });\n    }\n    onSelectThickness(selectedThickness, thicknessName) {\n        this.setState({\n            selectedThickness: selectedThickness,\n            announcement: announcements.thicknessSelectedAnnouncement(thicknessName),\n        });\n    }\n    onUndo() {\n        this.setState({\n            announcement: announcements.undoSuccessfulAnnouncement(),\n        });\n    }\n    onClear() {\n        this.setState({\n            announcement: announcements.clearSuccessfulAnnouncement(),\n        });\n    }\n    onSelectWord(word) {\n        this.props.socket.emit('drawerSelectWord', word);\n    }\n    render() {\n        return (\n            <div className='Drawer-container'>\n                <DrawCard swipeObject={this.props.swipeObject} isDrawing={this.state.isDrawing} onSelectWord={(word) => this.onSelectWord(word)}/>\n                <div className='Drawer-row'>\n                    <ColorPalette handPos={this.props.handPos} \n                        isGrabbing={this.props.isGrabbing}\n                        onSelectColor={(selectedColor, colorName) => this.onSelectColor(selectedColor, colorName)} />\n                    <CanvasSpeechHandler isIndexPoint={this.props.isIndexPoint} \n                        handPos={this.props.handPos} \n                        isCircular={this.props.isCircular}\n                        onStartDraw={() => this.updateIsDrawing(true)} \n                        onEndDraw={() => this.updateIsDrawing(false)}\n                        onUndo={() => this.onUndo()}\n                        onClear={() => this.onClear()}\n                        selectedColor={this.state.selectedColor} \n                        selectedThickness={this.state.selectedThickness} \n                        socket={this.props.socket}\n                        isDrawer={true} />\n                    <ThickPalette handPos={this.props.handPos}\n                        isGrabbing={this.props.isGrabbing}\n                        onSelectThickness={(selectedThickness, thicknessName) => this.onSelectThickness(selectedThickness, thicknessName)} />\n                </div>\n                <DrawHelper drawState={this.state.drawState} announcement={this.state.announcement}/>\n            </div>\n        );\n    }\n}","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/ColorPalette.js",["122"],"import React, { Component } from 'react';\nimport './ColorPalette.css';\n\nimport {colors, defaultColor} from '../helpers/constants';\n\nexport default class ColorPalette extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedColor: defaultColor,\n        };\n    }\n    componentDidMount() {\n\n    }\n    componentDidUpdate(prevProps) {\n        if (this.props.isGrabbing && !prevProps.isGrabbing) {\n            this.onHandGrab(this.props.handPos);\n        }\n    }\n    onHandGrab(handPos) {\n        Object.keys(colors).forEach(color => {\n            const intersects = this.doesIntersect(handPos, document.getElementById(color).getBoundingClientRect());\n            if (intersects && this.state.selectedColor !== colors[color]) {\n                this.setState({\n                    selectedColor: colors[color],\n                }, () => this.props.onSelectColor(this.state.selectedColor, color));\n            }\n        })\n    }\n    doesIntersect(handPos, rectangle) {\n        return rectangle.left <= handPos.x && handPos.x <= rectangle.right && rectangle.top <= handPos.y && handPos.y <= rectangle.bottom; \n    }\n    render() {\n        const colorDivs = Object.keys(colors).map(color => {\n            let className = 'ColorPalette-color';\n            if (colors[color] === this.state.selectedColor) {\n                if (this.state.selectedColor === colors.green) {\n                    className += ' ColorPalette-colorSelectedGreen'\n                } else {\n                    className += ' ColorPalette-colorSelected';\n                }\n            }\n            return (\n                <div className={className} id={color} key={color} style={{backgroundColor: colors[color]}}/>\n            );\n        });\n        const colorRows = colorDivs.filter((color, index) => index % 2 === 0).map((firsColor, index) => {\n            const secondColor = colorDivs[2*index+1];\n            return (<div className='ColorPalette-row' key={index}>\n                {firsColor}\n                {secondColor}\n            </div>);\n        });\n        return (\n            <div className='ColorPalette-container'>\n                <div className='ColorPalette-title'>\n                    Colors:\n                </div>\n                <div className='ColorPalette-column'>\n                    {colorRows}\n                </div>\n            </div>\n        );\n    }\n}","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/DrawCard.js",["123"],"import React, { Component } from 'react';\nimport './DrawCard.css';\n\nexport default class DrawCard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            index: 0,\n            didStartDrawing: false,\n        };\n        this.options = ['cat', 'dog', 'car', 'bus', 'house', 'tree', 'pool', 'star', 'plane', 'computer'];\n    }\n    componentDidMount() {\n\n    }\n    componentDidUpdate(prevProps) {\n        if (this.props.isDrawing && !this.state.didStartDrawing) {\n            this.props.onSelectWord(this.options[this.state.index]);\n            this.setState({\n                didStartDrawing: true,\n            });\n        }\n        if (this.props.swipeObject.isSwipe && !prevProps.swipeObject.isSwipe && !this.state.didStartDrawing) {\n            let newIndex = this.state.index;\n            if (this.props.swipeObject.isRight) {\n                newIndex = (newIndex === this.options.length - 1 ? 0 : newIndex + 1);\n            } else {\n                newIndex = (newIndex === 0 ? this.options.length - 1 : newIndex - 1);\n            }\n            this.setState({\n                index: newIndex,\n            });\n        }\n    }\n    render() {\n        let card = (<span className='DrawCard-card'>{this.options[this.state.index]}</span>);\n        let text = this.state.didStartDrawing ? \n        (\n            <>\n                Drawing a {card}\n            </>\n        ) : (\n            <>\n                Choosing a {card}\n            </>\n        );\n\n        return (\n            <div className='DrawCard-container'>\n                {text}\n            </div>\n        )\n    }\n}","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/CanvasSpeechHandler.js",["124","125","126"],"import React, { Component } from 'react';\n\nimport Canvas from './Canvas';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\n\nvar undoId = 0;\nvar clearId = 0;\n\nconst getCommands = () => {\n    return [\n        {\n            command: 'undo',\n            callback: () => undo(),\n        },\n        {\n            command: 'clear',\n            callback: () => clear(),\n        }\n    ];\n}\n\nconst undo = () => {\n    console.log('undo');\n    undoId++;\n}\n\nconst clear = () => {\n    console.log('clear');\n    clearId++;\n}\n\nexport default function CanvasSpeechHandler(props) {\n    const commands = getCommands();\n    SpeechRecognition.startListening({continuous: true});\n    const { transcript, finalTranscript } = useSpeechRecognition({ commands });\n    return <Canvas undoId={undoId} clearId={clearId} {...props} />;\n} \n\n","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/ThickPalette.js",["127"],"import React, { Component } from 'react';\nimport './ThickPalette.css';\n\nimport {thickness, defaultThickness} from '../helpers/constants';\n\nexport default class ThickPalette extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedThickness: defaultThickness,\n        };\n        this.sizeForThickness = {\n            small : '50px',\n            medium : '70px',\n            large : '90px',\n            xLarge : '110px',\n        };\n    }\n    componentDidMount() {\n\n    }\n    componentDidUpdate(prevProps) {\n        if (this.props.isGrabbing && !prevProps.isGrabbing) {\n            this.onHandGrab(this.props.handPos);\n        }\n    }\n    onHandGrab(handPos) {\n        Object.keys(thickness).forEach(thicknessValue => {\n            const intersects = this.doesIntersect(handPos, document.getElementById(thicknessValue).getBoundingClientRect());\n            if (intersects && this.state.selectedThickness !== thickness[thicknessValue]) {\n                this.setState({\n                    selectedThickness: thickness[thicknessValue],\n                }, () => this.props.onSelectThickness(this.state.selectedThickness, thicknessValue));\n            }\n        })\n    }\n    doesIntersect(handPos, rectangle) {\n        return rectangle.left <= handPos.x && handPos.x <= rectangle.right && rectangle.top <= handPos.y && handPos.y <= rectangle.bottom; \n    }\n    render() {\n        const thicknessDivs = Object.keys(thickness).map(thicknessValue => {\n            const size = this.sizeForThickness[thicknessValue];\n            const className = 'ThickPalette-thickness' + (this.state.selectedThickness === thickness[thicknessValue] ? ' ThickPalette-thicknessSelected' : '');\n            return (\n                <div className={className} id={thicknessValue} key={thicknessValue} style={{width: size, height: size}} />\n            )\n        });\n        return (\n            <div className='ThickPalette-container'>\n                <div className='ThickPalette-title'>\n                    Thickness:\n                </div>\n                <div className='ThickPalette-column'>\n                    {thicknessDivs}\n                </div>\n            </div>\n        )\n    }\n}","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/SmallButton.js",["128"],"import React, { Component } from 'react';\nimport './SmallButton.css';\n\nexport default class SmallButton extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        };\n        this.id = Math.random().toString(36).substring(7);\n    };\n    componentDidMount() {\n\n    };\n    componentDidUpdate(prevProps) {\n        if (this.props.isGrabbing && !prevProps.isGrabbing) {\n            this.onHandGrab(this.props.handPos);\n        }\n    };\n    onClick() {\n        this.props.onButtonClick();\n    }\n    onHandGrab(handPos) {\n        if (this.doesIntersect(handPos, document.getElementById(this.id).getBoundingClientRect())) {\n            this.onClick();\n        }\n    }\n    doesIntersect(handPos, rectangle) {\n        return rectangle.left <= handPos.x && handPos.x <= rectangle.right && rectangle.top <= handPos.y && handPos.y <= rectangle.bottom; \n    }\n    render() {\n        const style = this.props.widthPercent !== undefined ? {width: this.props.widthPercent} : {};\n        return (\n            <div className='SmallButton-button' id={this.id} onClick={() => this.onClick()} style={style}>\n                {this.props.buttonText}\n            </div>\n        )\n    };\n}","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/DrawHelper.js",["129"],"import React, { Component } from 'react';\nimport './DrawHelper.css';\n\nimport { drawStates } from '../helpers/constants';\n\nexport default class DrawHelper extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            makeAnnouncement: false,\n            announcement: \"\",\n            announcementId: 0,\n        };\n        this.announcementTime = 5000;\n    }\n    componentDidMount() {\n\n    }\n    componentDidUpdate(prevProps) {\n        if (this.props.announcement !== prevProps.announcement) {\n            this.setState(prevState => ({\n                makeAnnouncement: true,\n                announcement: this.props.announcement,\n                announcementId: prevState.announcementId + 1,\n            }), () => {\n                const currAnnouncementId = this.state.announcementId;\n                setTimeout(() => this.setNoAnnouncement(currAnnouncementId), this.announcementTime)\n            });\n        }\n    }\n    setNoAnnouncement(announcementId) {\n        // set to false if the ids are identical (since we have already announced)\n        this.setState(prevState => ({\n            makeAnnouncement: announcementId !== prevState.announcementId,\n        }));\n    }\n    render() {\n        var text = '';\n        if (this.props.drawState === drawStates.choosingState) {\n            text = \"swipe left or right with fingers extended to switch word\";\n        } else if (this.props.drawState === drawStates.drawingState) {\n            text = \"say 'undo' or 'clear' to erase. hover over and grab colors or thickness levels\";\n        }\n        if (this.state.makeAnnouncement) {\n            text = this.state.announcement;\n        }\n        return (\n            <div className='DrawHelper-container'>\n                {text}\n            </div>\n        )\n    }\n}","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/helpers/constants.js",[],"/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/JoinCreate.js",["130"],"import React, { Component } from 'react';\nimport './JoinCreate.css';\n\nimport SmallButton from './SmallButton';\nimport SmallText from './SmallText';\n\nexport default class JoinCreate extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            roomName: \"\",\n            isError: false,\n            status: \"\",\n        };\n    }\n    componentDidMount() {\n\n    }\n    componentDidUpdate() {\n\n    }\n    onChooseCreate() {\n        if (this.state.roomName.length === 0) {\n            this.setState({\n                isError: true,\n                status: \"Cannot create an empty room name\",\n            });\n        } else {\n            this.setState({\n                isError: false,\n                status: \"Creating...\",\n            }, () => {\n                this.props.socket.emit(\"createRoom\", this.state.roomName, response => {\n                    if (response.error) {\n                        this.setState({\n                            isError: true,\n                            status: \"Room name already in use; choose another name\",\n                        });\n                    } else {\n                        // successfully created room\n                        this.props.onJoinCreate(this.state.roomName, 1, true);\n                    }\n                });\n            });\n        }\n    }\n    onChooseJoin() {\n        if (this.state.roomName.length === 0) {\n            this.setState({\n                isError: true,\n                status: \"Cannot join an empty room name\",\n            });\n        } else {\n            this.setState({\n                isError: false,\n                status: \"Joining...\",\n            }, () => {\n                this.props.socket.emit(\"joinRoom\", this.state.roomName, (response) => {\n                    if (response.error) {\n                        this.setState({\n                            isError: true,\n                            status: \"Room name does not exist\",\n                        });\n                    } else {\n                        // successfully joined room\n                        this.props.onJoinCreate(this.state.roomName, response.roomSize, false);\n                    }\n                });\n            });\n        }\n    }\n    onChangeRoomName(roomName) {\n        this.setState({\n            roomName: roomName,\n        });\n    }\n    render() {\n        const widthPercent = '35%';\n        const statusClassName = 'JoinCreate-status' + (this.state.isError ? ' JoinCreate-error' : '');\n        const status = this.state.status.length === 0 ? (<div></div>) : (<div className={statusClassName}>{this.state.status}</div>);\n        return (\n            <div className='JoinCreate-container'>\n                <div className='JoinCreate-description'>\n                    Create a new room or join a room created by your friends\n                </div>\n                {status}\n                <SmallText onChangeRoomName={(roomName) => this.onChangeRoomName(roomName)}/>\n                <div className='JoinCreate-row'>\n                    <SmallButton buttonText='Create Room' \n                                onButtonClick={() => this.onChooseCreate()} \n                                isGrabbing={this.props.isGrabbing}\n                                handPos={this.props.handPos} \n                                widthPercent={widthPercent}/>\n                    <SmallButton buttonText='Join Room' \n                                onButtonClick={() => this.onChooseJoin()} \n                                isGrabbing={this.props.isGrabbing}\n                                handPos={this.props.handPos} \n                                widthPercent={widthPercent}/>\n                </div>\n            </div>\n        );\n    }\n}","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/SmallText.js",["131"],"import React, { Component } from 'react';\nimport './SmallText.css';\n\nexport default class SmallText extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            roomName: \"\",\n        };\n    }\n    componentDidMount() {\n\n    }\n    componentDidUpdate() {\n\n    }\n    onChangeRoomName(evt) {\n        const roomName = evt.target.value;\n        this.setState({\n            roomName: roomName,\n        });\n        this.props.onChangeRoomName(roomName)\n    }\n    render() {\n        const style = this.props.widthPercent !== undefined ? {width: this.props.widthPercent} : {};\n        return (\n            <input className='SmallText-text'\n                    style={style} \n                    onChange={(evt) => this.onChangeRoomName(evt)} \n                    value={this.state.roomName} \n                    placeholder={\"Enter room name\"} />\n        );\n    }\n}","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/WaitingRoom.js",["132"],"import React, { Component } from 'react';\nimport './WaitingRoom.css';\n\nimport SmallButton from './SmallButton';\n\nexport default class WaitingRoom extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            roomSize: 1,\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            roomSize: this.props.roomSize,\n        });\n        this.props.socket.on('roomUpdate', (roomSize) => {\n            this.setState({\n                roomSize: roomSize,\n            });\n        });\n        this.props.socket.on('startGame', () => {\n            this.props.onStartGame();\n        })\n    }\n    componentDidUpdate(prevProps) {\n        if (this.props.isGrabbing && !prevProps.isGrabbing) {\n            this.onStartGame();\n        }\n    }\n    onStartGame() {\n        if (this.props.isCreator) {\n            this.props.socket.emit('creatorStartGame', (response) => {\n                if (!response.error) {\n                    this.props.onStartGame();\n                }\n            });\n        }\n    }\n    render() {\n        return (\n            <div className='WaitingRoom-container'>\n                <div className='WaitingRoom-description'>\n                    Currently in room <span className='WaitingRoom-roomName'>{this.props.roomName}</span>\n                </div>\n                <div className='WaitingRoom-body'>\n                    {`Room size: ${this.state.roomSize}`}\n                </div>\n                {this.props.isCreator ? (<div className='WaitingRoom-start'> \n                    <SmallButton buttonText='Close Fist to Start Game'\n                                onButtonClick={() => this.onStartGame()}\n                                isGrabbing={this.props.isGrabbing}\n                                handPos={this.props.handPos} />\n                </div>) : <div className='WaitingRoom-body'>\n                    Waiting for room creator to start...\n                </div>}\n            </div>\n        )\n    }\n}","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/Guesser.js",["133"],"/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/GuesserSidePanel.js",["134"],"import React, { Component } from 'react';\nimport './GuesserSidePanel.css';\n\nexport default class GuesserSidePanel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            didGuessCorrectly: false,\n        };\n    }\n    componentDidMount() {\n\n    }\n    componentDidUpdate() {\n\n    }\n    onGuessCorrectly() {\n        if (!this.state.didGuessCorrectly) {\n            this.setState({\n                didGuessCorrectly: true,\n            }, () => this.props.onGuessCorrectly());\n        }\n    }\n    render() {\n        let didGuessCorrectly = false;\n        const guesses = this.props.guesses.filter(guess => {\n            if (guess === this.props.selectedWord && !didGuessCorrectly) {\n                didGuessCorrectly = true;\n                return true;\n            } else {\n                return guess !== '' && !didGuessCorrectly;\n            }\n        }).map((guess, index) => {\n            let className = '';\n            if (guess === this.props.selectedWord) {\n                className = 'GuesserSidePanel-correct';\n                didGuessCorrectly = true;\n            } else {\n                className = 'GuesserSidePanel-incorrect';\n            }\n            return (<li className={className} key={index}>{guess}</li>);\n        });\n        if (didGuessCorrectly) {\n            this.onGuessCorrectly();\n        }\n        return (\n            <div className='GuesserSidePanel-container'>\n                <div className='GuesserSidePanel-title'>\n                    Guesses:\n                </div>\n                <ul className='GuesserSidePanel-guesses'>\n                    {guesses}\n                </ul>\n            </div>\n        )\n    }\n}","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/GuesserSidePanelSpeechHandler.js",["135","136","137","138"],"/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/GuessHelper.js",["139"],"import React, { Component } from 'react';\nimport './GuessHelper.css';\n\nimport {guessStates} from '../helpers/constants';\n\nexport default class GuessHelper extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        };\n    }\n    componentDidMount() {\n\n    }\n    componentDidUpdate() {\n\n    }\n    render() {\n        var text = '';\n        if (this.props.guessState === guessStates.waitingState) {\n            text = \"wait for the drawer to choose a word\";\n        } else if (this.props.guessState === guessStates.guessingState) {\n            text = \"drawing has started! shout out the word to guess it\";\n        } else if (this.props.guessState === guessStates.correctState) {\n            text = \"you have correctly guessed! now, wait for the round to be over\";\n        }\n        return (\n            <div className='GuessHelper-container'>\n                {text}\n            </div>\n        )\n    }\n}",{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","severity":1,"message":"145","line":1,"column":8,"nodeType":"146","messageId":"147","endLine":1,"endColumn":12},{"ruleId":"144","severity":1,"message":"148","line":2,"column":17,"nodeType":"146","messageId":"147","endLine":2,"endColumn":26},{"ruleId":"144","severity":1,"message":"149","line":8,"column":8,"nodeType":"146","messageId":"147","endLine":8,"endColumn":14},{"ruleId":"144","severity":1,"message":"150","line":10,"column":8,"nodeType":"146","messageId":"147","endLine":10,"endColumn":20},{"ruleId":"144","severity":1,"message":"151","line":11,"column":8,"nodeType":"146","messageId":"147","endLine":11,"endColumn":18},{"ruleId":"144","severity":1,"message":"152","line":12,"column":8,"nodeType":"146","messageId":"147","endLine":12,"endColumn":19},{"ruleId":"144","severity":1,"message":"153","line":14,"column":8,"nodeType":"146","messageId":"147","endLine":14,"endColumn":24},{"ruleId":"144","severity":1,"message":"148","line":1,"column":17,"nodeType":"146","messageId":"147","endLine":1,"endColumn":26},{"ruleId":"154","severity":1,"message":"155","line":84,"column":9,"nodeType":"156","messageId":"157","endLine":84,"endColumn":125},{"ruleId":"144","severity":1,"message":"148","line":1,"column":17,"nodeType":"146","messageId":"147","endLine":1,"endColumn":26},{"ruleId":"158","severity":1,"message":"159","line":22,"column":9,"nodeType":"160","endLine":22,"endColumn":31},{"ruleId":"158","severity":1,"message":"159","line":23,"column":9,"nodeType":"160","endLine":23,"endColumn":31},{"ruleId":"144","severity":1,"message":"148","line":1,"column":17,"nodeType":"146","messageId":"147","endLine":1,"endColumn":26},{"ruleId":"144","severity":1,"message":"161","line":4,"column":8,"nodeType":"146","messageId":"147","endLine":4,"endColumn":19},{"ruleId":"144","severity":1,"message":"148","line":1,"column":17,"nodeType":"146","messageId":"147","endLine":1,"endColumn":26},{"ruleId":"144","severity":1,"message":"162","line":10,"column":22,"nodeType":"146","messageId":"147","endLine":10,"endColumn":28},{"ruleId":"144","severity":1,"message":"163","line":10,"column":44,"nodeType":"146","messageId":"147","endLine":10,"endColumn":53},{"ruleId":"144","severity":1,"message":"148","line":1,"column":17,"nodeType":"146","messageId":"147","endLine":1,"endColumn":26},{"ruleId":"144","severity":1,"message":"148","line":1,"column":17,"nodeType":"146","messageId":"147","endLine":1,"endColumn":26},{"ruleId":"144","severity":1,"message":"148","line":1,"column":17,"nodeType":"146","messageId":"147","endLine":1,"endColumn":26},{"ruleId":"144","severity":1,"message":"164","line":35,"column":13,"nodeType":"146","messageId":"147","endLine":35,"endColumn":23},{"ruleId":"144","severity":1,"message":"165","line":35,"column":25,"nodeType":"146","messageId":"147","endLine":35,"endColumn":40},{"ruleId":"144","severity":1,"message":"148","line":1,"column":17,"nodeType":"146","messageId":"147","endLine":1,"endColumn":26},{"ruleId":"144","severity":1,"message":"148","line":1,"column":17,"nodeType":"146","messageId":"147","endLine":1,"endColumn":26},{"ruleId":"144","severity":1,"message":"148","line":1,"column":17,"nodeType":"146","messageId":"147","endLine":1,"endColumn":26},{"ruleId":"144","severity":1,"message":"148","line":1,"column":17,"nodeType":"146","messageId":"147","endLine":1,"endColumn":26},{"ruleId":"144","severity":1,"message":"148","line":1,"column":17,"nodeType":"146","messageId":"147","endLine":1,"endColumn":26},{"ruleId":"144","severity":1,"message":"148","line":1,"column":17,"nodeType":"146","messageId":"147","endLine":1,"endColumn":26},{"ruleId":"144","severity":1,"message":"148","line":1,"column":17,"nodeType":"146","messageId":"147","endLine":1,"endColumn":26},{"ruleId":"144","severity":1,"message":"148","line":1,"column":17,"nodeType":"146","messageId":"147","endLine":1,"endColumn":26},{"ruleId":"144","severity":1,"message":"148","line":1,"column":17,"nodeType":"146","messageId":"147","endLine":1,"endColumn":26},{"ruleId":"144","severity":1,"message":"166","line":6,"column":5,"nodeType":"146","messageId":"147","endLine":6,"endColumn":11},{"ruleId":"144","severity":1,"message":"167","line":7,"column":5,"nodeType":"146","messageId":"147","endLine":7,"endColumn":12},{"ruleId":"144","severity":1,"message":"165","line":18,"column":25,"nodeType":"146","messageId":"147","endLine":18,"endColumn":40},{"ruleId":"144","severity":1,"message":"148","line":1,"column":17,"nodeType":"146","messageId":"147","endLine":1,"endColumn":26},"no-native-reassign",["168"],"no-negated-in-lhs",["169"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Component' is defined but never used.","'Canvas' is defined but never used.","'ColorPalette' is defined but never used.","'JoinCreate' is defined but never used.","'WaitingRoom' is defined but never used.","'GuesserSidePanel' is defined but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'SmallButton' is defined but never used.","'colors' is defined but never used.","'thickness' is defined but never used.","'transcript' is assigned a value but never used.","'finalTranscript' is assigned a value but never used.","'undoId' is assigned a value but never used.","'clearId' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]