[{"/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/index.js":"1","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/App.js":"2","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/reportWebVitals.js":"3","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/Cursor.js":"4","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/Canvas.js":"5","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/Entry.js":"6","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/Drawer.js":"7","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/ColorPalette.js":"8","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/DrawCard.js":"9","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/CanvasSpeechHandler.js":"10","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/ThickPalette.js":"11","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/SmallButton.js":"12","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/DrawHelper.js":"13","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/helpers/constants.js":"14","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/JoinCreate.js":"15","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/SmallText.js":"16","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/WaitingRoom.js":"17"},{"size":500,"mtime":1619418528794,"results":"18","hashOfConfig":"19"},{"size":2307,"mtime":1620170549021,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":1619418528794,"results":"21","hashOfConfig":"19"},{"size":4222,"mtime":1619490560493,"results":"22","hashOfConfig":"19"},{"size":5174,"mtime":1620156241632,"results":"23","hashOfConfig":"19"},{"size":2289,"mtime":1620171129177,"results":"24","hashOfConfig":"19"},{"size":3145,"mtime":1620157807878,"results":"25","hashOfConfig":"19"},{"size":2402,"mtime":1620157695095,"results":"26","hashOfConfig":"19"},{"size":1559,"mtime":1619459447669,"results":"27","hashOfConfig":"19"},{"size":828,"mtime":1619475205094,"results":"28","hashOfConfig":"19"},{"size":2222,"mtime":1620162086377,"results":"29","hashOfConfig":"19"},{"size":1208,"mtime":1620165915225,"results":"30","hashOfConfig":"19"},{"size":1806,"mtime":1620165624407,"results":"31","hashOfConfig":"19"},{"size":1245,"mtime":1620156058065,"results":"32","hashOfConfig":"19"},{"size":3821,"mtime":1620172793109,"results":"33","hashOfConfig":"19"},{"size":901,"mtime":1620167608459,"results":"34","hashOfConfig":"19"},{"size":1676,"mtime":1620172984034,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1mb4u64",{"filePath":"39","messages":"40","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"38"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"38"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},"/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/index.js",[],["85","86"],"/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/App.js",["87","88","89","90","91","92"],"import logo from './logo.svg';\nimport React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport './App.css';\n\nimport Cursor from './components/Cursor';\nimport Entry from './components/Entry';\nimport Canvas from './components/Canvas';\nimport Drawer from './components/Drawer';\nimport ColorPalette from './components/ColorPalette';\nimport JoinCreate from './components/JoinCreate';\nimport WaitingRoom from './components/WaitingRoom';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      didTransitionToDraw: false,\n      isIndexPoint: false,\n      handPos: {x: 0, y: 0},\n      isGrabbing: false,\n      isCircular: false,\n      swipeObject: {\n        isSwipe: false,\n        isRight: false,\n      },\n    };\n    this.socket = socketIOClient();\n  }\n\n  componentDidMount() {\n  \n  }\n  componentDidUpdate() {\n\n  }\n  onPointUpdate(isIndexPoint, handPos) {\n    this.setState({\n      isIndexPoint: isIndexPoint,\n      handPos: handPos,\n    });\n  }\n  onHandGrabUpdate(isGrabbing) {\n    this.setState({\n      isGrabbing: isGrabbing,\n    });\n  }\n  onCircularUpdate(isCircular) {\n    this.setState({\n      isCircular: isCircular,\n    });\n  }\n  onSwipeUpdate(swipeObject) {\n    this.setState({\n      swipeObject: swipeObject,\n    });\n  }\n  render() {\n    let content = (<Entry handPos={this.state.handPos} isGrabbing={this.state.isGrabbing} socket={this.socket}/>);\n    if (this.state.isGrabbing && !this.state.didTransitionToDraw) {\n      this.setState({\n        didTransitionToDraw: true,\n      });\n    }\n    if (this.state.didTransitionToDraw) {\n      content = (<Drawer isIndexPoint={this.state.isIndexPoint} \n                          handPos={this.state.handPos} \n                          swipeObject={this.state.swipeObject}\n                          isGrabbing={this.state.isGrabbing}/>);\n    }\n    return (\n      <div>\n        <Cursor onHandGrabUpdate={(isGrabbing) => this.onHandGrabUpdate(isGrabbing)} \n                onPointUpdate={(isIndexPoint, handPos) => this.onPointUpdate(isIndexPoint, handPos)}\n                onCircularUpdate={(isCircular) => this.onCircularUpdate(isCircular)}\n                onSwipeUpdate={(swipeObject) => this.onSwipeUpdate(swipeObject)}/>\n        {content}\n      </div>\n    )\n  }\n}\n","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/reportWebVitals.js",[],"/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/Cursor.js",["93","94"],"import React, { Component } from 'react';\nimport './Cursor.css';\n\nimport Leap from 'leapjs';\nimport 'leapjs-plugins'\n\nexport default class Cursor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isGrabbing: false,\n            isPointing: false,\n            isCircular: false,\n            swipeObject: {\n                isSwipe: false,\n                isRight: false,\n            },\n            position: {\n                x: 0,\n                y: 0,\n            },\n        };\n        this.grabThreshold = 0.8;\n        this.flatThreshold = 0.7;\n    }\n    componentDidMount() {\n        this.leapController = Leap.loop({enableGestures: true}, (frame) => this.onLeapFrame(frame));\n        this.leapController.use('screenPosition', {scale: 0.8, positioning: 'absolute'});\n        this.leapController.connect();\n    }\n    componentDidUpdate() {\n\n    }\n    onLeapFrame(frame) {\n        if (frame.hands.length > 0) {\n            const hand = frame.hands[0];\n            const handPosition = hand.screenPosition();\n            this.setState({position: {x: handPosition[0] + 30, y: handPosition[1] + 600}});\n            if (hand.grabStrength > this.grabThreshold) {\n                if (!this.state.isGrabbing) {\n                    this.setState({\n                        isGrabbing: true,\n                    });\n                }\n                this.props.onHandGrabUpdate(true);\n            } else if (hand.grabStrength < this.flatThreshold) {\n                if (this.state.isGrabbing) {\n                    this.setState({\n                        isGrabbing: false,\n                    });\n                }\n                this.props.onHandGrabUpdate(false);\n            }\n            const isPointing = this.onlyIndexFingerExtended(hand);\n            this.setState({\n                isPointing: isPointing,\n            });\n            this.props.onPointUpdate(isPointing, this.state.position);\n\n            const gestures = frame.data.gestures;\n            const isCircular = this.circularGesture(hand, gestures);\n            this.setState({\n                isCircular: isCircular,\n            });\n            this.props.onCircularUpdate(isCircular);\n\n            const isSwipe = this.swipeGesture(hand, gestures);\n            const isRight = this.swipeIsRight(gestures);\n            const swipeObject = {\n                isSwipe: isSwipe,\n                isRight: isRight,\n            };\n            this.setState({\n                swipeObject: swipeObject,\n            });\n            this.props.onSwipeUpdate(swipeObject);\n        }\n    }\n    onlyIndexFingerExtended(hand) {\n        return (hand.indexFinger.extended && !hand.ringFinger.extended && !hand.pinky.extended && !hand.thumb.extended && !hand.middleFinger.extended);\n    }\n    allFingersExtended(hand) {\n        return true;\n        return (hand.indexFinger.extended && hand.ringFinger.extended && hand.pinky.extended && hand.middleFinger.extended);\n    }\n    circularGesture(hand, gestures) {\n        const circleGesture = gestures.filter(gesture => gesture.type === 'circle');\n        return hand.pinky.extended && circleGesture.length === 1 && circleGesture.duration > 700;\n    }\n    swipeGesture(hand, gestures) {\n        const swipeGesture = gestures.filter(gesture => gesture.type === 'swipe');\n        return swipeGesture.length > 0;\n    }\n    swipeIsRight(gestures) {\n        const swipeGesture = gestures.filter(gesture => gesture.type === 'swipe' && gesture.state === 'stop');\n        if (swipeGesture.length > 0) {\n            const stop = swipeGesture[0];\n            if (stop.position[0] < 0 || stop.position[0] < 0) {\n                return true;\n            }\n            return false;\n        }\n        return false;\n    }\n    render() {\n        var className = 'Cursor-cursor';\n        if (this.state.isGrabbing) {\n            className += ' Cursor-cursorGrab';\n        } else if (this.state.isPointing) {\n            className += ' Cursor-cursorPoint';\n        } else {\n            className += ' Cursor-cursorNormal';\n        }\n        return (\n            <div className={className} style={{left: `${this.state.position.x}px`, top: `${this.state.position.y}px`}}/>\n        )\n    }\n}","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/Canvas.js",["95","96","97"],"import React, { Component } from 'react';\nimport './Canvas.css';\n\nexport default class Canvas extends React.Component {\n    constructor(props) {\n        super(props);\n        let ref = React.createRef();\n        this.state = {\n            isDrawing: false,\n            prevPos: {\n                x: 0,\n                y: 0,\n            },\n            line: [],\n            strokes: [], // strokes[i] is stroke object, which contains color, thickness, and position fields\n            ref: ref,\n        };\n        this.canvasWidth = 1200;\n        this.canvasHeight = 800;\n    }\n    componentDidMount() {\n        this.state.ref.current.width = this.canvasWidth;\n        this.state.ref.current.height = this.canvasHeight;\n        const ctx = this.getCtx();\n        ctx.lineJoin = 'round';\n        ctx.lineCap = 'round';\n        ctx.lineWidth = this.props.selectedThickness; \n    }\n    componentDidUpdate(prevProps) {\n        const transformedHandPos = this.transform(this.props.handPos);\n        if (!this.state.isDrawing && this.props.isIndexPoint && !prevProps.isIndexPoint) {\n            this.onStartDraw(transformedHandPos);\n            this.props.onStartDraw();\n        } else if (this.state.isDrawing && this.props.isIndexPoint && prevProps.isIndexPoint && \n            this.props.handPos !== prevProps.handPos) {\n            this.onMoveFinger(transformedHandPos);\n        } else if (this.state.isDrawing && !this.props.isIndexPoint && prevProps.isIndexPoint) {\n            this.onEndDraw();\n            this.props.onEndDraw();\n        } else if (this.props.undoId > prevProps.undoId) {\n            this.undo();\n            this.props.onUndo();\n        } else if (this.props.clearId > prevProps.clearId) {\n            this.clear({forUndo: false});\n            this.props.onClear();\n        }\n    }\n    transform(handPos) {\n        return {\n            x: handPos.x - 340,\n            y: handPos.y - 100,\n        };\n    }\n    onStartDraw(posEvent) {\n        const { x, y } = posEvent;\n        const offsetData = {x, y};\n        const newStrokeObj = {\n            color: this.props.selectedColor,\n            thickness: this.props.selectedThickness,\n            positions: [offsetData],\n        };\n        this.setState((prevState) => ({\n            isDrawing: true,\n            prevPos: offsetData,\n            strokes: prevState.strokes.concat(newStrokeObj),\n        }));\n    }\n    onMoveFinger(posEvent) {\n        if (this.state.isDrawing) {\n            const { x, y } = posEvent;\n            const offsetData = { x, y };\n            const positionData = {\n                start: { ...this.state.prevPos },\n                stop: { ...offsetData },\n            };\n            let strokes = [...this.state.strokes];\n            const lastIndex = strokes.length - 1;\n            let lastStrokeObject = {...strokes[lastIndex]};\n            let positions = [...lastStrokeObject.positions];  \n            positions.push(offsetData);\n            lastStrokeObject.positions = positions;\n            strokes[lastIndex] = lastStrokeObject;\n            this.setState(prevState => ({\n                line: prevState.line.concat(positionData),\n                strokes: strokes\n            }), () => this.paint(this.state.prevPos, offsetData, this.props.selectedColor, this.props.selectedThickness));\n        }\n    }\n    onEndDraw() {\n        this.setState({\n            isDrawing: false,\n        });\n    }\n    paint(prevPos, currPos, color, thickness) {\n        const { x, y } = currPos;\n        const { x: prevX, y: prevY } = prevPos;\n\n        const ctx = this.getCtx();\n        ctx.beginPath();\n        ctx.strokeStyle = color;\n        ctx.lineWidth = thickness; \n        ctx.moveTo(prevX, prevY);\n        ctx.lineTo(x, y);\n        ctx.stroke();\n        this.setState({\n            prevPos: {\n                x,\n                y\n            },\n        });\n    }\n    clear({forUndo}) {\n        console.log('clear');\n        const ctx = this.getCtx();\n        ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n        if (!forUndo) {\n            this.setState({\n                strokes: [],\n            });\n        }\n    }\n    undo() {\n        console.log('undo');\n        this.clear({forUndo: true});\n        let strokes = [...this.state.strokes];\n        strokes.pop();\n        this.setState({\n            strokes: strokes,\n        }, () => {\n            this.state.strokes.forEach(stroke => {\n                for (let i = 1; i < stroke.positions.length; i++) {\n                    const prevPos = stroke.positions[i-1];\n                    const currPos = stroke.positions[i];\n                    this.paint(prevPos, currPos, stroke.color, stroke.thickness);\n                }\n            });\n        });\n    }\n    getCtx() {\n        return this.state.ref.current.getContext('2d');\n    }\n    render() {\n        return (\n            <div className='Canvas-container'>\n                <div className='Canvas-canvas'>\n                    <canvas\n                        id='Canvas'\n                        ref={this.state.ref}\n                        style={{ background: 'var(--offwhite)' }}\n                    />\n                </div>\n            </div>\n        )\n    }\n}","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/Entry.js",["98","99"],"import React, { Component } from 'react';\nimport './Entry.css';\n\nimport SmallButton from './SmallButton';\nimport JoinCreate from './JoinCreate';\nimport WaitingRoom from './WaitingRoom';\n\nexport default class Entry extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            didPressStart: false,\n            didJoinCreate: false,\n            roomName: \"\",\n            isCreator: false,\n        };\n    }\n    componentDidMount() {\n\n    }\n    componentDidUpdate() {\n\n    }\n    didClickStart() {\n        console.log('started');\n    }\n    onJoinCreate(roomName, roomSize, isCreator) {\n        this.setState({\n            didJoinCreate: true,\n            roomName: roomName,\n            roomSize: roomSize,\n            isCreator: isCreator,\n        });\n    }\n    render() {\n        let content = (<JoinCreate handPos={this.state.handPos} \n                                    isGrabbing={this.state.isGrabbing} \n                                    socket={this.props.socket} \n                                    onJoinCreate={(roomName, roomSize, isCreator) => this.onJoinCreate(roomName, roomSize, isCreator)} />);\n        if (this.state.didJoinCreate) {\n            content = (<WaitingRoom isCreator={this.state.isCreator} \n                                    roomName={this.state.roomName} \n                                    roomSize={this.state.roomSize}\n                                    handPos={this.state.handPos} \n                                    isGrabbing={this.state.isGrabbing} \n                                    socket={this.props.socket} />);\n        }\n        return (\n            <div className='Entry-container'>\n                <div className='Entry-firstLine'>\n                    Multimodal\n                </div>\n                <div className='Entry-secondLine'>\n                    <span role='img' aria-label='hand'>✋</span> Pictionary <span role='img' aria-label='microphone'>🎤</span>\n                </div>\n\n                <div className='Entry-description'>\n                    remote pictionary with your friends, done right\n                </div>\n\n                <div className='Entry-content'>\n                    {content}\n                </div>\n                \n            </div>\n        )\n    };\n}","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/Drawer.js",["100","101","102"],"import React, { Component } from 'react';\nimport './Drawer.css';\n\nimport CanvasSpeechHandler from './CanvasSpeechHandler';\nimport DrawCard from './DrawCard';\nimport DrawHelper from './DrawHelper';\nimport ColorPalette from './ColorPalette';\nimport ThickPalette from './ThickPalette';\n\nimport { drawStates, colors, defaultColor, thickness, defaultThickness, announcements } from '../helpers/constants';\n\nexport default class Drawer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            drawState: drawStates.choosingState,\n            isDrawing: false,\n            selectedColor: defaultColor,\n            selectedThickness: defaultThickness,\n            announcement: \"\",\n        };\n    }\n    componentDidMount() {\n\n    }\n    componentDidUpdate() {\n    \n    }\n    updateIsDrawing(isDrawing) {\n        this.setState({\n            drawState: drawStates.drawingState,\n            isDrawing: isDrawing,\n        });\n    }\n    onSelectColor(selectedColor, colorName) {\n        this.setState({\n            selectedColor: selectedColor,\n            announcement: announcements.colorSelectedAnnouncement(colorName),\n        });\n    }\n    onSelectThickness(selectedThickness, thicknessName) {\n        this.setState({\n            selectedThickness: selectedThickness,\n            announcement: announcements.thicknessSelectedAnnouncement(thicknessName),\n        });\n    }\n    onUndo() {\n        this.setState({\n            announcement: announcements.undoSuccessfulAnnouncement(),\n        });\n    }\n    onClear() {\n        this.setState({\n            announcement: announcements.clearSuccessfulAnnouncement(),\n        });\n    }\n    render() {\n        return (\n            <div className='Drawer-container'>\n                <DrawCard swipeObject={this.props.swipeObject} isDrawing={this.state.isDrawing}/>\n                <div className='Drawer-row'>\n                    <ColorPalette handPos={this.props.handPos} \n                        isGrabbing={this.props.isGrabbing}\n                        onSelectColor={(selectedColor, colorName) => this.onSelectColor(selectedColor, colorName)} />\n                    <CanvasSpeechHandler isIndexPoint={this.props.isIndexPoint} \n                        handPos={this.props.handPos} \n                        isCircular={this.props.isCircular}\n                        onStartDraw={() => this.updateIsDrawing(true)} \n                        onEndDraw={() => this.updateIsDrawing(false)}\n                        onUndo={() => this.onUndo()}\n                        onClear={() => this.onClear()}\n                        selectedColor={this.state.selectedColor} \n                        selectedThickness={this.state.selectedThickness} />\n                    <ThickPalette handPos={this.props.handPos}\n                        isGrabbing={this.props.isGrabbing}\n                        onSelectThickness={(selectedThickness, thicknessName) => this.onSelectThickness(selectedThickness, thicknessName)} />\n                </div>\n                <DrawHelper drawState={this.state.drawState} announcement={this.state.announcement}/>\n            </div>\n        );\n    }\n}","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/ColorPalette.js",["103"],"import React, { Component } from 'react';\nimport './ColorPalette.css';\n\nimport {colors, defaultColor} from '../helpers/constants';\n\nexport default class ColorPalette extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedColor: defaultColor,\n        };\n    }\n    componentDidMount() {\n\n    }\n    componentDidUpdate(prevProps) {\n        if (this.props.isGrabbing && !prevProps.isGrabbing) {\n            this.onHandGrab(this.props.handPos);\n        }\n    }\n    onHandGrab(handPos) {\n        Object.keys(colors).forEach(color => {\n            const intersects = this.doesIntersect(handPos, document.getElementById(color).getBoundingClientRect());\n            if (intersects && this.state.selectedColor !== colors[color]) {\n                this.setState({\n                    selectedColor: colors[color],\n                }, () => this.props.onSelectColor(this.state.selectedColor, color));\n            }\n        })\n    }\n    doesIntersect(handPos, rectangle) {\n        return rectangle.left <= handPos.x && handPos.x <= rectangle.right && rectangle.top <= handPos.y && handPos.y <= rectangle.bottom; \n    }\n    render() {\n        const colorDivs = Object.keys(colors).map(color => {\n            let className = 'ColorPalette-color';\n            if (colors[color] === this.state.selectedColor) {\n                if (this.state.selectedColor === colors.green) {\n                    className += ' ColorPalette-colorSelectedGreen'\n                } else {\n                    className += ' ColorPalette-colorSelected';\n                }\n            }\n            return (\n                <div className={className} id={color} key={color} style={{backgroundColor: colors[color]}}/>\n            );\n        });\n        const colorRows = colorDivs.filter((color, index) => index % 2 === 0).map((firsColor, index) => {\n            const secondColor = colorDivs[2*index+1];\n            return (<div className='ColorPalette-row' key={index}>\n                {firsColor}\n                {secondColor}\n            </div>);\n        });\n        return (\n            <div className='ColorPalette-container'>\n                <div className='ColorPalette-title'>\n                    Colors:\n                </div>\n                <div className='ColorPalette-column'>\n                    {colorRows}\n                </div>\n            </div>\n        );\n    }\n}","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/DrawCard.js",["104"],"import React, { Component } from 'react';\nimport './DrawCard.css';\n\nexport default class DrawCard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            index: 0,\n            didStartDrawing: false,\n        };\n        this.options = ['cat', 'dog', 'car', 'bus', 'house', 'tree', 'pool', 'star', 'plane', 'computer'];\n    }\n    componentDidMount() {\n\n    }\n    componentDidUpdate(prevProps) {\n        if (this.props.isDrawing && !this.state.didStartDrawing) {\n            this.setState({\n                didStartDrawing: true,\n            });\n        }\n        if (this.props.swipeObject.isSwipe && !prevProps.swipeObject.isSwipe && !this.state.didStartDrawing) {\n            let newIndex = this.state.index;\n            if (this.props.swipeObject.isRight) {\n                newIndex = (newIndex === this.options.length - 1 ? 0 : newIndex + 1);\n            } else {\n                newIndex = (newIndex === 0 ? this.options.length - 1 : newIndex - 1);\n            }\n            this.setState({\n                index: newIndex,\n            });\n        }\n    }\n    render() {\n        let card = (<span className='DrawCard-card'>{this.options[this.state.index]}</span>);\n        let text = this.state.didStartDrawing ? \n        (\n            <>\n                Drawing a {card}\n            </>\n        ) : (\n            <>\n                Choosing a {card}\n            </>\n        );\n\n        return (\n            <div className='DrawCard-container'>\n                {text}\n            </div>\n        )\n    }\n}","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/CanvasSpeechHandler.js",["105","106"],"import React, { Component } from 'react';\n\nimport Canvas from './Canvas';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\n\nvar undoId = 0;\nvar clearId = 0;\n\nconst getCommands = () => {\n    return [\n        {\n            command: 'undo',\n            callback: () => undo(),\n        },\n        {\n            command: 'clear',\n            callback: () => clear(),\n        }\n    ];\n}\n\nconst undo = () => {\n    console.log('undo');\n    undoId++;\n}\n\nconst clear = () => {\n    console.log('clear');\n    clearId++;\n}\n\nexport default function CanvasSpeechHandler(props) {\n    const commands = getCommands();\n    SpeechRecognition.startListening({continuous: true});\n    const { transcript } = useSpeechRecognition({ commands });\n    return <Canvas undoId={undoId} clearId={clearId} {...props} />;\n} \n\n","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/ThickPalette.js",["107"],"import React, { Component } from 'react';\nimport './ThickPalette.css';\n\nimport {thickness, defaultThickness} from '../helpers/constants';\n\nexport default class ThickPalette extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedThickness: defaultThickness,\n        };\n        this.sizeForThickness = {\n            small : '50px',\n            medium : '70px',\n            large : '90px',\n            xLarge : '110px',\n        };\n    }\n    componentDidMount() {\n\n    }\n    componentDidUpdate(prevProps) {\n        if (this.props.isGrabbing && !prevProps.isGrabbing) {\n            this.onHandGrab(this.props.handPos);\n        }\n    }\n    onHandGrab(handPos) {\n        Object.keys(thickness).forEach(thicknessValue => {\n            const intersects = this.doesIntersect(handPos, document.getElementById(thicknessValue).getBoundingClientRect());\n            if (intersects && this.state.selectedThickness !== thickness[thicknessValue]) {\n                this.setState({\n                    selectedThickness: thickness[thicknessValue],\n                }, () => this.props.onSelectThickness(this.state.selectedThickness, thicknessValue));\n            }\n        })\n    }\n    doesIntersect(handPos, rectangle) {\n        return rectangle.left <= handPos.x && handPos.x <= rectangle.right && rectangle.top <= handPos.y && handPos.y <= rectangle.bottom; \n    }\n    render() {\n        const thicknessDivs = Object.keys(thickness).map(thicknessValue => {\n            const size = this.sizeForThickness[thicknessValue];\n            const className = 'ThickPalette-thickness' + (this.state.selectedThickness === thickness[thicknessValue] ? ' ThickPalette-thicknessSelected' : '');\n            return (\n                <div className={className} id={thicknessValue} key={thicknessValue} style={{width: size, height: size}} />\n            )\n        });\n        return (\n            <div className='ThickPalette-container'>\n                <div className='ThickPalette-title'>\n                    Thickness:\n                </div>\n                <div className='ThickPalette-column'>\n                    {thicknessDivs}\n                </div>\n            </div>\n        )\n    }\n}","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/SmallButton.js",["108"],"import React, { Component } from 'react';\nimport './SmallButton.css';\n\nexport default class SmallButton extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        };\n        this.id = Math.random().toString(36).substring(7);\n    };\n    componentDidMount() {\n\n    };\n    componentDidUpdate(prevProps) {\n        if (this.props.isGrabbing && !prevProps.isGrabbing) {\n            this.onHandGrab(this.props.handPos);\n        }\n    };\n    onClick() {\n        this.props.onButtonClick();\n    }\n    onHandGrab(handPos) {\n        if (this.doesIntersect(handPos, document.getElementById(this.id).getBoundingClientRect())) {\n            this.onClick();\n        }\n    }\n    doesIntersect(handPos, rectangle) {\n        return rectangle.left <= handPos.x && handPos.x <= rectangle.right && rectangle.top <= handPos.y && handPos.y <= rectangle.bottom; \n    }\n    render() {\n        const style = this.props.widthPercent !== undefined ? {width: this.props.widthPercent} : {};\n        return (\n            <div className='SmallButton-button' id={this.id} onClick={() => this.onClick()} style={style}>\n                {this.props.buttonText}\n            </div>\n        )\n    };\n}","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/DrawHelper.js",["109"],"import React, { Component } from 'react';\nimport './DrawHelper.css';\n\nimport { drawStates } from '../helpers/constants';\n\nexport default class DrawHelper extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            makeAnnouncement: false,\n            announcement: \"\",\n            announcementId: 0,\n        };\n        this.announcementTime = 5000;\n    }\n    componentDidMount() {\n\n    }\n    componentDidUpdate(prevProps) {\n        if (this.props.announcement !== prevProps.announcement) {\n            this.setState(prevState => ({\n                makeAnnouncement: true,\n                announcement: this.props.announcement,\n                announcementId: prevState.announcementId + 1,\n            }), () => {\n                const currAnnouncementId = this.state.announcementId;\n                setTimeout(() => this.setNoAnnouncement(currAnnouncementId), this.announcementTime)\n            });\n        }\n    }\n    setNoAnnouncement(announcementId) {\n        // set to false if the ids are identical (since we have already announced)\n        this.setState(prevState => ({\n            makeAnnouncement: announcementId !== prevState.announcementId,\n        }));\n    }\n    render() {\n        var text = '';\n        if (this.props.drawState === drawStates.choosingState) {\n            text = \"swipe left or right with fingers extended to switch word\";\n        } else if (this.props.drawState === drawStates.drawingState) {\n            text = \"say 'undo' or 'clear' to erase. hover over and grab colors or thickness levels\";\n        }\n        if (this.state.makeAnnouncement) {\n            text = this.state.announcement;\n        }\n        return (\n            <div className='DrawHelper-container'>\n                {text}\n            </div>\n        )\n    }\n}","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/helpers/constants.js",[],"/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/JoinCreate.js",["110"],"import React, { Component } from 'react';\nimport './JoinCreate.css';\n\nimport SmallButton from './SmallButton';\nimport SmallText from './SmallText';\n\nexport default class JoinCreate extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            roomName: \"\",\n            isError: false,\n            status: \"\",\n        };\n    }\n    componentDidMount() {\n\n    }\n    componentDidUpdate() {\n\n    }\n    onChooseCreate() {\n        console.log(\"did choose create\");\n        if (this.state.roomName.length === 0) {\n            this.setState({\n                isError: true,\n                status: \"Cannot create an empty room name\",\n            });\n        } else {\n            this.setState({\n                isError: false,\n                status: \"Creating...\",\n            }, () => {\n                this.props.socket.emit(\"createRoom\", this.state.roomName, response => {\n                    if (response.error) {\n                        this.setState({\n                            isError: true,\n                            status: \"Room name already in use; choose another name\",\n                        });\n                    } else {\n                        // successfully created room\n                        this.props.onJoinCreate(this.state.roomName, 1, true);\n                    }\n                });\n            });\n        }\n    }\n    onChooseJoin() {\n        console.log(\"did choose join\");\n        if (this.state.roomName.length === 0) {\n            this.setState({\n                isError: true,\n                status: \"Cannot join an empty room name\",\n            });\n        } else {\n            this.setState({\n                isError: false,\n                status: \"Joining...\",\n            }, () => {\n                this.props.socket.emit(\"joinRoom\", this.state.roomName, (response) => {\n                    if (response.error) {\n                        this.setState({\n                            isError: true,\n                            status: \"Room name does not exist\",\n                        });\n                    } else {\n                        // successfully joined room\n                        this.props.onJoinCreate(this.state.roomName, response.roomSize, false);\n                    }\n                });\n            });\n        }\n    }\n    onChangeRoomName(roomName) {\n        this.setState({\n            roomName: roomName,\n        });\n    }\n    render() {\n        const widthPercent = '35%';\n        const statusClassName = 'JoinCreate-status' + (this.state.isError ? ' JoinCreate-error' : '');\n        const status = this.state.status.length === 0 ? (<div></div>) : (<div className={statusClassName}>{this.state.status}</div>);\n        return (\n            <div className='JoinCreate-container'>\n                <div className='JoinCreate-description'>\n                    Create a new room or join a room created by your friends\n                </div>\n                {status}\n                <SmallText onChangeRoomName={(roomName) => this.onChangeRoomName(roomName)}/>\n                <div className='JoinCreate-row'>\n                    <SmallButton buttonText='Create Room' \n                                onButtonClick={() => this.onChooseCreate()} \n                                isGrabbing={this.props.isGrabbing}\n                                handPos={this.props.handPos} \n                                widthPercent={widthPercent}/>\n                    <SmallButton buttonText='Join Room' \n                                onButtonClick={() => this.onChooseJoin()} \n                                isGrabbing={this.props.isGrabbing}\n                                handPos={this.props.handPos} \n                                widthPercent={widthPercent}/>\n                </div>\n            </div>\n        );\n    }\n}","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/SmallText.js",["111"],"import React, { Component } from 'react';\nimport './SmallText.css';\n\nexport default class SmallText extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            roomName: \"\",\n        };\n    }\n    componentDidMount() {\n\n    }\n    componentDidUpdate() {\n\n    }\n    onChangeRoomName(evt) {\n        const roomName = evt.target.value;\n        this.setState({\n            roomName: roomName,\n        });\n        this.props.onChangeRoomName(roomName)\n    }\n    render() {\n        const style = this.props.widthPercent !== undefined ? {width: this.props.widthPercent} : {};\n        return (\n            <input className='SmallText-text'\n                    style={style} \n                    onChange={(evt) => this.onChangeRoomName(evt)} \n                    value={this.state.roomName} \n                    placeholder={\"Enter room name\"} />\n        );\n    }\n}","/Users/stevdiaz/Desktop/MIT SPRING 2021/6835/6835Final/pic/client/src/components/WaitingRoom.js",["112"],"import React, { Component } from 'react';\nimport './WaitingRoom.css';\n\nimport SmallButton from './SmallButton';\n\nexport default class WaitingRoom extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            roomSize: 1,\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            roomSize: this.props.roomSize,\n        });\n        this.props.socket.on('roomUpdate', (roomSize) => {\n            this.setState({\n                roomSize: roomSize,\n            });\n        });\n    }\n    componentDidUpdate(prevProps) {\n        if (this.props.isGrabbing && !prevProps.isGrabbing) {\n            this.onStartGame();\n        }\n    }\n    onStartGame() {\n        // do something\n    }\n    render() {\n        return (\n            <div className='WaitingRoom-container'>\n                <div className='WaitingRoom-description'>\n                    Currently in room <span className='WaitingRoom-roomName'>{this.props.roomName}</span>\n                </div>\n                <div className='WaitingRoom-body'>\n                    {`Room size: ${this.state.roomSize}`}\n                </div>\n                {this.props.isCreator ? (<div className='WaitingRoom-start'> \n                    <SmallButton buttonText='Close Fist to Start Game'\n                                onButtonClick={() => this.onStartGame()}\n                                isGrabbing={this.props.isGrabbing}\n                                handPos={this.props.handPos} />\n                </div>) : <div className='WaitingRoom-body'>\n                    Waiting for room creator to start...\n                </div>}\n            </div>\n        )\n    }\n}",{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","severity":1,"message":"118","line":1,"column":8,"nodeType":"119","messageId":"120","endLine":1,"endColumn":12},{"ruleId":"117","severity":1,"message":"121","line":2,"column":17,"nodeType":"119","messageId":"120","endLine":2,"endColumn":26},{"ruleId":"117","severity":1,"message":"122","line":8,"column":8,"nodeType":"119","messageId":"120","endLine":8,"endColumn":14},{"ruleId":"117","severity":1,"message":"123","line":10,"column":8,"nodeType":"119","messageId":"120","endLine":10,"endColumn":20},{"ruleId":"117","severity":1,"message":"124","line":11,"column":8,"nodeType":"119","messageId":"120","endLine":11,"endColumn":18},{"ruleId":"117","severity":1,"message":"125","line":12,"column":8,"nodeType":"119","messageId":"120","endLine":12,"endColumn":19},{"ruleId":"117","severity":1,"message":"121","line":1,"column":17,"nodeType":"119","messageId":"120","endLine":1,"endColumn":26},{"ruleId":"126","severity":1,"message":"127","line":84,"column":9,"nodeType":"128","messageId":"129","endLine":84,"endColumn":125},{"ruleId":"117","severity":1,"message":"121","line":1,"column":17,"nodeType":"119","messageId":"120","endLine":1,"endColumn":26},{"ruleId":"130","severity":1,"message":"131","line":22,"column":9,"nodeType":"132","endLine":22,"endColumn":31},{"ruleId":"130","severity":1,"message":"131","line":23,"column":9,"nodeType":"132","endLine":23,"endColumn":31},{"ruleId":"117","severity":1,"message":"121","line":1,"column":17,"nodeType":"119","messageId":"120","endLine":1,"endColumn":26},{"ruleId":"117","severity":1,"message":"133","line":4,"column":8,"nodeType":"119","messageId":"120","endLine":4,"endColumn":19},{"ruleId":"117","severity":1,"message":"121","line":1,"column":17,"nodeType":"119","messageId":"120","endLine":1,"endColumn":26},{"ruleId":"117","severity":1,"message":"134","line":10,"column":22,"nodeType":"119","messageId":"120","endLine":10,"endColumn":28},{"ruleId":"117","severity":1,"message":"135","line":10,"column":44,"nodeType":"119","messageId":"120","endLine":10,"endColumn":53},{"ruleId":"117","severity":1,"message":"121","line":1,"column":17,"nodeType":"119","messageId":"120","endLine":1,"endColumn":26},{"ruleId":"117","severity":1,"message":"121","line":1,"column":17,"nodeType":"119","messageId":"120","endLine":1,"endColumn":26},{"ruleId":"117","severity":1,"message":"121","line":1,"column":17,"nodeType":"119","messageId":"120","endLine":1,"endColumn":26},{"ruleId":"117","severity":1,"message":"136","line":35,"column":13,"nodeType":"119","messageId":"120","endLine":35,"endColumn":23},{"ruleId":"117","severity":1,"message":"121","line":1,"column":17,"nodeType":"119","messageId":"120","endLine":1,"endColumn":26},{"ruleId":"117","severity":1,"message":"121","line":1,"column":17,"nodeType":"119","messageId":"120","endLine":1,"endColumn":26},{"ruleId":"117","severity":1,"message":"121","line":1,"column":17,"nodeType":"119","messageId":"120","endLine":1,"endColumn":26},{"ruleId":"117","severity":1,"message":"121","line":1,"column":17,"nodeType":"119","messageId":"120","endLine":1,"endColumn":26},{"ruleId":"117","severity":1,"message":"121","line":1,"column":17,"nodeType":"119","messageId":"120","endLine":1,"endColumn":26},{"ruleId":"117","severity":1,"message":"121","line":1,"column":17,"nodeType":"119","messageId":"120","endLine":1,"endColumn":26},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Component' is defined but never used.","'Canvas' is defined but never used.","'ColorPalette' is defined but never used.","'JoinCreate' is defined but never used.","'WaitingRoom' is defined but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'SmallButton' is defined but never used.","'colors' is defined but never used.","'thickness' is defined but never used.","'transcript' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]